{"version":3,"sources":["webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/axios/lib/helpers/isURLSameOrigin.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/axios/lib/core/transformData.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/axios/lib/axios.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/react-bootstrap/esm/divWithClassName.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/axios/lib/adapters/xhr.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/axios/lib/helpers/isAbsoluteURL.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/axios/lib/core/dispatchRequest.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/axios/lib/helpers/combineURLs.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/axios/lib/cancel/Cancel.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/axios/lib/helpers/spread.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/axios/lib/cancel/CancelToken.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/react-bootstrap/esm/Fade.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/react-bootstrap/esm/CloseButton.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/react-bootstrap/esm/Alert.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/libphonenumber-js/es6/constants.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/libphonenumber-js/es6/util.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/libphonenumber-js/es6/ParseError.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/libphonenumber-js/es6/tools/semver-compare.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/libphonenumber-js/es6/metadata.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/libphonenumber-js/es6/extension.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/libphonenumber-js/es6/isViablePhoneNumber.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/libphonenumber-js/es6/parseDigits.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/libphonenumber-js/es6/parseIncompletePhoneNumber.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/libphonenumber-js/es6/getNumberType_.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/libphonenumber-js/es6/isPossibleNumber_.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/libphonenumber-js/es6/IDD.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/libphonenumber-js/es6/RFC3966.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/libphonenumber-js/es6/format_.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/libphonenumber-js/es6/PhoneNumber.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/libphonenumber-js/es6/validate_.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/libphonenumber-js/es6/parse_.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/libphonenumber-js/es6/parsePhoneNumber_.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/libphonenumber-js/es6/parsePhoneNumber.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/libphonenumber-js/es6/parsePhoneNumberFromString_.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/libphonenumber-js/es6/parsePhoneNumberFromString.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/react-phone-number-input/modules/libphonenumber/isValidPhoneNumber.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/libphonenumber-js/es6/getCountries.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/input-format/modules/helpers.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/input-format/modules/close braces.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/input-format/modules/format.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/input-format/modules/template formatter.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/input-format/modules/dom.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/input-format/modules/input control.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/input-format/modules/parse.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/input-format/modules/edit.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/input-format/modules/react/Input.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/libphonenumber-js/es6/AsYouType.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/react-phone-number-input/modules/inputValuePrefix.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/react-phone-number-input/modules/InputSmart.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/react-phone-number-input/modules/InputBasic.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/libphonenumber-js/es6/formatIncompletePhoneNumber.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/react-phone-number-input/modules/Flag.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/react-phone-number-input/modules/InternationalIcon.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/react-phone-number-input/modules/countries.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/react-phone-number-input/modules/CountryIcon.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/react-phone-number-input/modules/phoneInputHelpers.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/react-phone-number-input/modules/PhoneInputWithCountry.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/country-flag-icons/modules/unicode.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/react-phone-number-input/modules/CountrySelect.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/react-phone-number-input/modules/PhoneInputWithCountryDefault.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/react-phone-number-input/min/index.js","webpack:///./src/pages/request.tsx","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/axios/lib/core/enhanceError.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/axios/lib/core/mergeConfig.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/axios/lib/core/InterceptorManager.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/axios/lib/utils.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/axios/lib/helpers/buildURL.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/axios/lib/core/settle.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/axios/lib/cancel/isCancel.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/axios/lib/core/Axios.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/axios/lib/defaults.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/axios/lib/helpers/parseHeaders.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/axios/index.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/axios/lib/core/createError.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/axios/lib/core/buildFullPath.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/axios/lib/helpers/normalizeHeaderName.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/axios/lib/helpers/bind.js","webpack:///C:/Users/MartienvKnippenberg/source/Repos/Aviaco/custom/Workspace/Typescript/node_modules/axios/lib/helpers/cookies.js"],"names":["utils","module","exports","isStandardBrowserEnv","originURL","msie","test","navigator","userAgent","urlParsingNode","document","createElement","resolveURL","url","href","setAttribute","protocol","replace","host","search","hash","hostname","port","pathname","charAt","window","location","requestURL","parsed","isString","data","headers","fns","forEach","fn","bind","Axios","mergeConfig","createInstance","defaultConfig","context","instance","prototype","request","extend","axios","create","instanceConfig","defaults","Cancel","CancelToken","isCancel","all","promises","Promise","spread","default","forwardRef","p","ref","className","settle","buildURL","buildFullPath","parseHeaders","isURLSameOrigin","createError","config","resolve","reject","requestData","requestHeaders","isFormData","XMLHttpRequest","auth","username","password","Authorization","btoa","fullPath","baseURL","open","method","toUpperCase","params","paramsSerializer","timeout","onreadystatechange","readyState","status","responseURL","indexOf","responseHeaders","getAllResponseHeaders","response","responseType","responseText","statusText","onabort","onerror","ontimeout","timeoutErrorMessage","cookies","xsrfValue","withCredentials","xsrfCookieName","read","undefined","xsrfHeaderName","val","key","toLowerCase","setRequestHeader","isUndefined","e","onDownloadProgress","addEventListener","onUploadProgress","upload","cancelToken","promise","then","cancel","abort","send","transformData","throwIfCancellationRequested","throwIfRequested","transformRequest","merge","common","adapter","transformResponse","reason","relativeURL","message","this","toString","__CANCEL__","callback","arr","apply","executor","TypeError","resolvePromise","token","source","c","_fadeStyles","fadeStyles","Fade","_ref","children","props","handleEnter","node","triggerBrowserReflow","onEnter","addEndListener","transitionEnd","innerProps","cloneElement","defaultProps","in","mountOnEnter","unmountOnExit","appear","displayName","CloseButton","label","onClick","type","DivStyledAsH4","divWithClassName","AlertHeading","createWithBsPrefix","Component","AlertLink","SafeAnchor","show","transition","closeLabel","Alert","uncontrolledProps","_useUncontrolled","bsPrefix","variant","onClose","dismissible","prefix","handleClose","useEventCallback","Transition","alert","role","Link","Heading","VALID_PUNCTUATION","concat","matchesEntirely","text","regular_expression","RegExp","ParseError","code","Constructor","_classCallCheck","name","constructor","stack","Error","Object","a","split","b","pa","pb","i","na","Number","nb","isNaN","_typeof","obj","Symbol","iterator","_defineProperties","target","length","descriptor","enumerable","configurable","writable","defineProperty","_createClass","protoProps","staticProps","Metadata","metadata","is_object","countries","keys","join","type_of","validateMetadata","setVersion","call","value","filter","_","countryCode","v1","v2","v3","nonGeographic","nonGeographical","country","getCountryMetadata","callingCode","getCountryCodesForCallingCode","countryCodes","countryCallingCodes","selectNumberingPlan","hasCountry","numberingPlan","NumberingPlan","hasCallingCode","getNumberingPlanMetadata","getCountryCodeForCallingCode","IDDPrefix","defaultIDDPrefix","nationalNumberPattern","possibleLengths","formats","nationalPrefixForParsing","nationalPrefixTransformRule","leadingDigits","hasTypes","_type","ext","country_phone_code_to_countries","country_calling_codes","globalMetadataObject","_this","_getFormats","getDefaultCountryMetadataForRegion","map","Format","_getNationalPrefixFormattingRule","_nationalPrefixForParsing","nationalPrefix","_getNationalPrefixIsOptionalWhenFormatting","types","_type2","Type","format","_format","nationalPrefixFormattingRule","nationalPrefixIsOptionalWhenFormattingInNationalFormat","usesNationalPrefix","FIRST_GROUP_ONLY_PREFIX_PATTERN","getCountryCallingCode","countryCallingCode","isSupportedCountry","version","v4","create_extension_pattern","purpose","single_extension_characters","RFC3966_EXTN_PREFIX","EXTN_PATTERNS_FOR_PARSING","EXTN_PATTERN","VALID_PHONE_NUMBER_PATTERN","isViablePhoneNumber","number","DIGITS","parseDigit","character","parseDigits","string","result","_iterator","_isArray","Array","isArray","_i","next","done","digit","parseIncompletePhoneNumber","parsePhoneNumberCharacter","NON_FIXED_LINE_PHONE_TYPES","getNumberType","input","options","nationalNumber","phone","is_of_type","pattern","_NON_FIXED_LINE_PHONE","checkNumberLengthForType","type_info","possible_lengths","mobile_type","merged","slice","element","push","sort","mergeArrays","actual_length","minimum_length","isPossibleNumber","isInternational","CAPTURING_DIGIT_PATTERN","SINGLE_IDD_PREFIX","stripIDDPrefix","countryMetadata","IDDPrefixPattern","matchedGroups","match","_slicedToArray","_arrayWithHoles","_arr","_n","_d","_e","_s","err","_iterableToArrayLimit","_nonIterableRest","_defineProperty","DEFAULT_OPTIONS","formatExtension","formattedNumber","extension","formatNumber","arguments","ownKeys","getOwnPropertySymbols","sym","getOwnPropertyDescriptor","_objectSpread","chooseCountryByCountryCallingCode","addExtension","formatNationalNumber","_ref2","formatRFC3966","fromCountry","getIDDPrefix","humanReadable","formattedForSameCountryCallingCode","toCountryCallingCode","toCountryMetadata","fromCountryMetadata","formatIDDSameCountryCallingCodeNumber","FIRST_GROUP_PATTERN","formatNationalNumberUsingFormat","useInternationalSeparator","useNationalPrefixFormattingRule","internationalFormat","applyInternationalSeparatorStyle","formatAs","availableFormats","nationalNnumber","leadingDigitsPatterns","lastLeadingDigitsPattern","chooseFormatForNumber","local","trim","PhoneNumber","_metadata","isCountryCode","isNonGeographicCallingCode","phoneNumber","PHONE_NUMBER_START_PATTERN","AFTER_PHONE_NUMBER_END_PATTERN","defaultCountry","_parseInput","_part$split2","parseRFC3966","throwOnError","startsAt","extractFormattedPhoneNumber","withExtensionStripped","start","number_without_extension","matches","extractExtension","parseInput","formattedPhoneNumber","_parsePhoneNumber","defaultCallingCode","_extractCountryCallin","_stripNationalPrefixA","stripNationalPrefixAndCarrierCodeFromCompleteNumber","carrierCode","exactCountry","findCountryCode","parsePhoneNumber","hasSelectedNumberingPlan","valid","extended","possible","stripNationalPrefixAndCarrierCode","prefixPattern","prefixMatch","exec","capturedGroupsCount","nationalPhoneNumber","possibleCountries","_findCountryCode","_stripNationalPrefixA2","numberWithoutIDD","_extractCountryCallin2","extractCountryCallingCodeFromInternationalNumberWithoutPlusSign","shorterNumber","_countryCallingCode","possibleShorterNumber","possibleShorterNationalNumber","normalizeArguments","args","_Array$prototype$slic2","arg_1","arg_2","arg_3","arg_4","isObject","parsePhoneNumberFromString","error","_normalizeArguments","isValidPhoneNumber","isValid","getCountries","count_occurences","symbol","count","close_braces","retained_template","template","placeholder","empty_placeholder","cut_before","opening_braces","closing_braces","dangling_braces","caret","formatter","should_close_braces","characters_in_template","value_character_index","filled_in_template","template_formatter","index","found","possibly_last_input_character_index","getSelection","selectionStart","selectionEnd","end","Keys","setCaretPosition","caret_position","ANDROID_USER_AGENT_REG_EXP","isAndroid","setSelectionRange","setTimeout","event","_parse","on_change","operation","keyCode","getOperation","preventDefault","selection","erase_selection","format_input_text","_parse2","parse_character","focused_input_character_index","operation_applied","edit","formatted","_extends","assign","hasOwnProperty","_objectWithoutProperties","excluded","sourceKeys","_objectWithoutPropertiesLoose","sourceSymbolKeys","propertyIsEnumerable","parse","InputComponent","inputComponent","onChange","onCut","onPaste","onKeyDown","rest","ownRef","_onChange","current","_onPaste","_onCut","_onKeyDown","isEmptyValue","LONGEST_DUMMY_PHONE_NUMBER","repeat","DIGIT_PLACEHOLDER_MATCHER","NATIONAL_PREFIX_SEPARATORS_PATTERN","CREATE_CHARACTER_CLASS_PATTERN","CREATE_STANDALONE_DIGIT_PATTERN","ELIGIBLE_FORMAT_PATTERN","VALID_FORMATTED_PHONE_NUMBER_PART_PATTERN","AFTER_PHONE_NUMBER_DIGITS_END_PATTERN","AsYouType","optionsOrDefaultCountry","reset","formattedOutput","international","internationalPrefix","digits","nationalNumberDigits","setCountry","chosenFormat","populatedNationalNumberTemplate","populatedNationalNumberTemplatePosition","initializePhoneNumberFormatsForCountry","matchingFormats","resetFormat","formattedDigits","extractFormattedDigits","getFullNumber","inputDigits","getNonFormattedNationalNumber","extractedNumber","hasPlus","startInternationalNumber","nextDigits","isCountryCallingCodeAmbiguous","determineTheCountry","extractCountryCallingCode","previousNationalPrefix","extractNationalPrefix","matchFormats","formatNationalNumberWithNextDigits","attemptToFormatCompletePhoneNumber","previouslyChosenFormat","newlyChosenFormat","chooseFormat","formatNextNationalNumberDigits","reformatNationalNumber","createFormattingTemplate","leadingDigitsPatternIndex","nationalPrefixIsMandatoryWhenFormattingInNationalFormat","leadingDigitsPatternsCount","Math","min","leadingDigitsPattern","_iterator2","_isArray2","_i2","formattedNationalNumber","formattedNationalNumberWithNationalPrefix","getSeparatorAfterNationalPrefix","spacing","getInternationalPrefix","getTemplateForNumberFormatPattern","strictPattern","nationalNumberDummyDigits","includesNationalPrefix","numberFormat","getFormatFormat","numberFormatWithNationalPrefix","_iterator3","_isArray3","_i3","_ref3","cutAndStripNonPairedParens","getCountry","getNumber","isPossible","getNonFormattedTemplate","cutBeforeIndex","pop","cleared_string","_i4","_dangling_braces","stripNonPairedParens","times","getInputValuePrefix","removeInputValuePrefix","defaultMetadata","InputSmart","getTemplate","InputBasic","Input","newValue","formatIncompletePhoneNumber","countryName","flags","flagUrl","title","alt","src","aspectRatio","InternationalIcon1x1","InternationalIcon3x2","xmlns","viewBox","stroke","fill","strokeWidth","strokeMiterlimit","strokeLinecap","d","x1","y1","x2","y2","isCountrySupportedWithError","console","getSupportedCountries","createCountryIconComponent","FlagComponent","flagComponent","InternationalIcon","internationalIcon","_aspectRatio","getPreSelectedCountry","includeInternationalOption","migrateParsedInputForNewCountry","previous_country","new_country","preferNationalFormat","country_calling_prefix","_Object$keys","country_calling_code","strip_country_calling_code","defaultValue","e164","partial_national_significant_number","getNationalSignificantNumberDigits","trimNumber","nationalSignificantNumberPart","overflowDigitsCount","getMaxNumberLength","getCountryForPartialE164Number","partialE164Number","derived_country","get_country_from_possibly_incomplete_international_phone_number","could_number_belong_to_country","compareStrings","locales","String","localeCompare","getInitialParsedInput","object","enumerableOnly","symbols","getOwnPropertyDescriptors","defineProperties","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","_assertThisInitialized","self","ReferenceError","_setPrototypeOf","_React$PureComponent","PhoneNumberInput_","_possibleConstructorReturn","createRef","newCountry","_this$props","_this$state","state","newParsedInput","parsedInput","getInputRef","focus","setState","hasUserSelectedACountry","_input","_this$props2","addInternationalOption","limitMaxLength","prevInput","isFocused","_onFocus","onFocus","onBlur","_onBlur","countrySelectProps","_this$props3","_value","_addInternationalOption","labels","_this$props4","countryOptionsOrder","_defaultCountry","CountryIcon","generateInitialParsedInput","subClass","superClass","_inherits","_state$props","prevDefaultCountry","prevValue","prevReset","newDefaultCountry","newReset","newState","parsedCountry","_countries","onCountryChange","selectedCountry","prevProps","prevState","inputRef","generator","dependencies","_this$props5","disabled","autoComplete","style","numberInputProps","smartCaret","CountrySelectComponent","countrySelectComponent","ContainerComponent","containerComponent","displayInitialValueAsLocalNumber","_this$state2","countrySelectOptions","order","optionsOnTop","optionsOnBottom","appendTo","_loop","divider","option","splice","sortCountryOptions","country_names","compare_strings","country_select_options","unshift","ZZ","getCountrySelectOptions","countryOptions","getSupportedCountryOptions","countrySelectOptionsMemoDependencies","areEqualArrays","countrySelectOptionsMemo","onCountryFocus","onCountryBlur","iconComponent","PureComponent","PhoneNumberInput","any","formatNational","generateNationalNumberDigits","getRegionalIndicatorSymbol","letter","fromCodePoint","charCodeAt","CountrySelect","onChange_","getSelectedOption","DIVIDER_STYLE","fontSize","backgroundColor","color","CountrySelectWithIcon","Icon","Arrow","getIconAspectRatio","arrowComponent","unicodeFlags","selectedOption","_ref4","createPhoneInput","PhoneInputDefault","func","_arguments","query","RequestPage","allorsApiUrl","site","siteMetadata","allAllorsUnifiedGood","allAllorsSerialisedItem","useContext","StoreContext","email","setEmail","telephone","setTelephone","comment","setComment","productIds","setProductIds","serialisedItemIds","setSerialisedItemIds","removeProductId","removeSerialisedItemId","useState","formClass","setFormClass","products","nodes","v","allorsId","serialisedItems","addToast","useToasts","intl","useIntl","formatMessage","id","description","Container","Row","Col","Breadcrumb","Item","to","active","Form","onSubmit","form","emailField","elements","namedItem","telephoneField","isEmailValid","checkValidity","isTelephoneValid","setCustomValidity","model","post","appearance","autoDismiss","navigate","catch","noValidate","xs","span","md","Group","Label","Control","required","as","currentTarget","Button","Table","striped","hover","scope","width","product","slug","fluid","primaryPhoto","file","childImageSharp","removeProduct","serialisedItem","itemNumber","removeSerialisedItem","isAxiosError","toJSON","fileName","lineNumber","columnNumber","config1","config2","valueFromConfig2Keys","mergeDeepPropertiesKeys","defaultToConfig2Keys","prop","deepMerge","axiosKeys","otherKeys","InterceptorManager","handlers","use","fulfilled","rejected","eject","h","isFunction","l","isArrayBuffer","isBuffer","FormData","isArrayBufferView","ArrayBuffer","isView","buffer","isNumber","isDate","isFile","isBlob","isStream","pipe","isURLSearchParams","URLSearchParams","assignValue","thisArg","str","encode","encodeURIComponent","serializedParams","parts","toISOString","JSON","stringify","hashmarkIndex","validateStatus","dispatchRequest","interceptors","chain","interceptor","shift","getUri","normalizeHeaderName","DEFAULT_CONTENT_TYPE","setContentTypeIfUnset","process","maxContentLength","ignoreDuplicateOf","line","substr","enhanceError","isAbsoluteURL","combineURLs","requestedURL","normalizedName","write","expires","path","domain","secure","cookie","Date","toGMTString","decodeURIComponent","remove","now"],"mappings":"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","file":"component---src-pages-request-tsx-e5a7afafbe6861ae5cd1.js","sourcesContent":["'use strict';\n\nvar utils = require('./../utils');\n\nmodule.exports = utils.isStandardBrowserEnv() ? // Standard browser envs have full support of the APIs needed to test\n// whether the request URL is of the same origin as current location.\nfunction standardBrowserEnv() {\n  var msie = /(msie|trident)/i.test(navigator.userAgent);\n  var urlParsingNode = document.createElement('a');\n  var originURL;\n  /**\n  * Parse a URL to discover it's components\n  *\n  * @param {String} url The URL to be parsed\n  * @returns {Object}\n  */\n\n  function resolveURL(url) {\n    var href = url;\n\n    if (msie) {\n      // IE needs attribute set twice to normalize properties\n      urlParsingNode.setAttribute('href', href);\n      href = urlParsingNode.href;\n    }\n\n    urlParsingNode.setAttribute('href', href); // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n\n    return {\n      href: urlParsingNode.href,\n      protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n      host: urlParsingNode.host,\n      search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n      hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n      hostname: urlParsingNode.hostname,\n      port: urlParsingNode.port,\n      pathname: urlParsingNode.pathname.charAt(0) === '/' ? urlParsingNode.pathname : '/' + urlParsingNode.pathname\n    };\n  }\n\n  originURL = resolveURL(window.location.href);\n  /**\n  * Determine if a URL shares the same origin as the current location\n  *\n  * @param {String} requestURL The URL to test\n  * @returns {boolean} True if URL shares the same origin, otherwise false\n  */\n\n  return function isURLSameOrigin(requestURL) {\n    var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;\n    return parsed.protocol === originURL.protocol && parsed.host === originURL.host;\n  };\n}() : // Non standard browser envs (web workers, react-native) lack needed support.\nfunction nonStandardBrowserEnv() {\n  return function isURLSameOrigin() {\n    return true;\n  };\n}();","'use strict';\n\nvar utils = require('./../utils');\n/**\n * Transform the data for a request or a response\n *\n * @param {Object|String} data The data to be transformed\n * @param {Array} headers The headers for the request or response\n * @param {Array|Function} fns A single function or Array of functions\n * @returns {*} The resulting transformed data\n */\n\n\nmodule.exports = function transformData(data, headers, fns) {\n  /*eslint no-param-reassign:0*/\n  utils.forEach(fns, function transform(fn) {\n    data = fn(data, headers);\n  });\n  return data;\n};","'use strict';\n\nvar utils = require('./utils');\n\nvar bind = require('./helpers/bind');\n\nvar Axios = require('./core/Axios');\n\nvar mergeConfig = require('./core/mergeConfig');\n\nvar defaults = require('./defaults');\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n * @return {Axios} A new instance of Axios\n */\n\n\nfunction createInstance(defaultConfig) {\n  var context = new Axios(defaultConfig);\n  var instance = bind(Axios.prototype.request, context); // Copy axios.prototype to instance\n\n  utils.extend(instance, Axios.prototype, context); // Copy context to instance\n\n  utils.extend(instance, context);\n  return instance;\n} // Create the default instance to be exported\n\n\nvar axios = createInstance(defaults); // Expose Axios class to allow class inheritance\n\naxios.Axios = Axios; // Factory for creating new instances\n\naxios.create = function create(instanceConfig) {\n  return createInstance(mergeConfig(axios.defaults, instanceConfig));\n}; // Expose Cancel & CancelToken\n\n\naxios.Cancel = require('./cancel/Cancel');\naxios.CancelToken = require('./cancel/CancelToken');\naxios.isCancel = require('./cancel/isCancel'); // Expose all/spread\n\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\n\naxios.spread = require('./helpers/spread');\nmodule.exports = axios; // Allow use of default import syntax in TypeScript\n\nmodule.exports.default = axios;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport classNames from 'classnames';\nexport default (function (className) {\n  return React.forwardRef(function (p, ref) {\n    return /*#__PURE__*/React.createElement(\"div\", _extends({}, p, {\n      ref: ref,\n      className: classNames(p.className, className)\n    }));\n  });\n});","'use strict';\n\nvar utils = require('./../utils');\n\nvar settle = require('./../core/settle');\n\nvar buildURL = require('./../helpers/buildURL');\n\nvar buildFullPath = require('../core/buildFullPath');\n\nvar parseHeaders = require('./../helpers/parseHeaders');\n\nvar isURLSameOrigin = require('./../helpers/isURLSameOrigin');\n\nvar createError = require('../core/createError');\n\nmodule.exports = function xhrAdapter(config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    var requestData = config.data;\n    var requestHeaders = config.headers;\n\n    if (utils.isFormData(requestData)) {\n      delete requestHeaders['Content-Type']; // Let the browser set it\n    }\n\n    var request = new XMLHttpRequest(); // HTTP basic authentication\n\n    if (config.auth) {\n      var username = config.auth.username || '';\n      var password = config.auth.password || '';\n      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\n    }\n\n    var fullPath = buildFullPath(config.baseURL, config.url);\n    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true); // Set the request timeout in MS\n\n    request.timeout = config.timeout; // Listen for ready state\n\n    request.onreadystatechange = function handleLoad() {\n      if (!request || request.readyState !== 4) {\n        return;\n      } // The request errored out and we didn't get a response, this will be\n      // handled by onerror instead\n      // With one exception: request that using file: protocol, most browsers\n      // will return status as 0 even though it's a successful request\n\n\n      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n        return;\n      } // Prepare the response\n\n\n      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;\n      var response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config: config,\n        request: request\n      };\n      settle(resolve, reject, response); // Clean up request\n\n      request = null;\n    }; // Handle browser request cancellation (as opposed to a manual cancellation)\n\n\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n\n      reject(createError('Request aborted', config, 'ECONNABORTED', request)); // Clean up request\n\n      request = null;\n    }; // Handle low level network errors\n\n\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(createError('Network Error', config, null, request)); // Clean up request\n\n      request = null;\n    }; // Handle timeout\n\n\n    request.ontimeout = function handleTimeout() {\n      var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';\n\n      if (config.timeoutErrorMessage) {\n        timeoutErrorMessage = config.timeoutErrorMessage;\n      }\n\n      reject(createError(timeoutErrorMessage, config, 'ECONNABORTED', request)); // Clean up request\n\n      request = null;\n    }; // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n\n\n    if (utils.isStandardBrowserEnv()) {\n      var cookies = require('./../helpers/cookies'); // Add xsrf header\n\n\n      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : undefined;\n\n      if (xsrfValue) {\n        requestHeaders[config.xsrfHeaderName] = xsrfValue;\n      }\n    } // Add headers to the request\n\n\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n          // Remove Content-Type if data is undefined\n          delete requestHeaders[key];\n        } else {\n          // Otherwise add header to the request\n          request.setRequestHeader(key, val);\n        }\n      });\n    } // Add withCredentials to request if needed\n\n\n    if (!utils.isUndefined(config.withCredentials)) {\n      request.withCredentials = !!config.withCredentials;\n    } // Add responseType to request if needed\n\n\n    if (config.responseType) {\n      try {\n        request.responseType = config.responseType;\n      } catch (e) {\n        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.\n        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.\n        if (config.responseType !== 'json') {\n          throw e;\n        }\n      }\n    } // Handle progress if needed\n\n\n    if (typeof config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', config.onDownloadProgress);\n    } // Not all browsers support upload events\n\n\n    if (typeof config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', config.onUploadProgress);\n    }\n\n    if (config.cancelToken) {\n      // Handle cancellation\n      config.cancelToken.promise.then(function onCanceled(cancel) {\n        if (!request) {\n          return;\n        }\n\n        request.abort();\n        reject(cancel); // Clean up request\n\n        request = null;\n      });\n    }\n\n    if (requestData === undefined) {\n      requestData = null;\n    } // Send the request\n\n\n    request.send(requestData);\n  });\n};","'use strict';\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\n\nmodule.exports = function isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d\\+\\-\\.]*:)?\\/\\//i.test(url);\n};","'use strict';\n\nvar utils = require('./../utils');\n\nvar transformData = require('./transformData');\n\nvar isCancel = require('../cancel/isCancel');\n\nvar defaults = require('../defaults');\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\n\n\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n}\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n * @returns {Promise} The Promise to be fulfilled\n */\n\n\nmodule.exports = function dispatchRequest(config) {\n  throwIfCancellationRequested(config); // Ensure headers exist\n\n  config.headers = config.headers || {}; // Transform request data\n\n  config.data = transformData(config.data, config.headers, config.transformRequest); // Flatten headers\n\n  config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers);\n  utils.forEach(['delete', 'get', 'head', 'post', 'put', 'patch', 'common'], function cleanHeaderConfig(method) {\n    delete config.headers[method];\n  });\n  var adapter = config.adapter || defaults.adapter;\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config); // Transform response data\n\n    response.data = transformData(response.data, response.headers, config.transformResponse);\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config); // Transform response data\n\n      if (reason && reason.response) {\n        reason.response.data = transformData(reason.response.data, reason.response.headers, config.transformResponse);\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n};","'use strict';\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n * @returns {string} The combined URL\n */\n\nmodule.exports = function combineURLs(baseURL, relativeURL) {\n  return relativeURL ? baseURL.replace(/\\/+$/, '') + '/' + relativeURL.replace(/^\\/+/, '') : baseURL;\n};","'use strict';\n/**\n * A `Cancel` is an object that is thrown when an operation is canceled.\n *\n * @class\n * @param {string=} message The message.\n */\n\nfunction Cancel(message) {\n  this.message = message;\n}\n\nCancel.prototype.toString = function toString() {\n  return 'Cancel' + (this.message ? ': ' + this.message : '');\n};\n\nCancel.prototype.__CANCEL__ = true;\nmodule.exports = Cancel;","'use strict';\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n * @returns {Function}\n */\n\nmodule.exports = function spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n};","'use strict';\n\nvar Cancel = require('./Cancel');\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @class\n * @param {Function} executor The executor function.\n */\n\n\nfunction CancelToken(executor) {\n  if (typeof executor !== 'function') {\n    throw new TypeError('executor must be a function.');\n  }\n\n  var resolvePromise;\n  this.promise = new Promise(function promiseExecutor(resolve) {\n    resolvePromise = resolve;\n  });\n  var token = this;\n  executor(function cancel(message) {\n    if (token.reason) {\n      // Cancellation has already been requested\n      return;\n    }\n\n    token.reason = new Cancel(message);\n    resolvePromise(token.reason);\n  });\n}\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\n\n\nCancelToken.prototype.throwIfRequested = function throwIfRequested() {\n  if (this.reason) {\n    throw this.reason;\n  }\n};\n/**\n * Returns an object that contains a new `CancelToken` and a function that, when called,\n * cancels the `CancelToken`.\n */\n\n\nCancelToken.source = function source() {\n  var cancel;\n  var token = new CancelToken(function executor(c) {\n    cancel = c;\n  });\n  return {\n    token: token,\n    cancel: cancel\n  };\n};\n\nmodule.exports = CancelToken;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\n\nvar _fadeStyles;\n\nimport classNames from 'classnames';\nimport transitionEnd from 'dom-helpers/transitionEnd';\nimport React, { useCallback } from 'react';\nimport Transition, { ENTERED, ENTERING } from 'react-transition-group/Transition';\nimport triggerBrowserReflow from './triggerBrowserReflow';\nvar defaultProps = {\n  in: false,\n  timeout: 300,\n  mountOnEnter: false,\n  unmountOnExit: false,\n  appear: false\n};\nvar fadeStyles = (_fadeStyles = {}, _fadeStyles[ENTERING] = 'show', _fadeStyles[ENTERED] = 'show', _fadeStyles);\nvar Fade = React.forwardRef(function (_ref, ref) {\n  var className = _ref.className,\n      children = _ref.children,\n      props = _objectWithoutPropertiesLoose(_ref, [\"className\", \"children\"]);\n\n  var handleEnter = useCallback(function (node) {\n    triggerBrowserReflow(node);\n    if (props.onEnter) props.onEnter(node);\n  }, [props]);\n  return /*#__PURE__*/React.createElement(Transition, _extends({\n    ref: ref,\n    addEndListener: transitionEnd\n  }, props, {\n    onEnter: handleEnter\n  }), function (status, innerProps) {\n    return React.cloneElement(children, _extends({}, innerProps, {\n      className: classNames('fade', className, children.props.className, fadeStyles[status])\n    }));\n  });\n});\nFade.defaultProps = defaultProps;\nFade.displayName = 'Fade';\nexport default Fade;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport classNames from 'classnames';\nvar defaultProps = {\n  label: 'Close'\n};\nvar CloseButton = React.forwardRef(function (_ref, ref) {\n  var label = _ref.label,\n      onClick = _ref.onClick,\n      className = _ref.className,\n      props = _objectWithoutPropertiesLoose(_ref, [\"label\", \"onClick\", \"className\"]);\n\n  return /*#__PURE__*/React.createElement(\"button\", _extends({\n    ref: ref,\n    type: \"button\",\n    className: classNames('close', className),\n    onClick: onClick\n  }, props), /*#__PURE__*/React.createElement(\"span\", {\n    \"aria-hidden\": \"true\"\n  }, \"\\xD7\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"sr-only\"\n  }, label));\n});\nCloseButton.displayName = 'CloseButton';\nCloseButton.defaultProps = defaultProps;\nexport default CloseButton;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useUncontrolled } from 'uncontrollable';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport Fade from './Fade';\nimport CloseButton from './CloseButton';\nimport divWithClassName from './divWithClassName';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport SafeAnchor from './SafeAnchor';\nvar DivStyledAsH4 = divWithClassName('h4');\nDivStyledAsH4.displayName = 'DivStyledAsH4';\nvar AlertHeading = createWithBsPrefix('alert-heading', {\n  Component: DivStyledAsH4\n});\nvar AlertLink = createWithBsPrefix('alert-link', {\n  Component: SafeAnchor\n});\nvar defaultProps = {\n  show: true,\n  transition: Fade,\n  closeLabel: 'Close alert'\n};\nvar Alert = React.forwardRef(function (uncontrolledProps, ref) {\n  var _useUncontrolled = useUncontrolled(uncontrolledProps, {\n    show: 'onClose'\n  }),\n      bsPrefix = _useUncontrolled.bsPrefix,\n      show = _useUncontrolled.show,\n      closeLabel = _useUncontrolled.closeLabel,\n      className = _useUncontrolled.className,\n      children = _useUncontrolled.children,\n      variant = _useUncontrolled.variant,\n      onClose = _useUncontrolled.onClose,\n      dismissible = _useUncontrolled.dismissible,\n      transition = _useUncontrolled.transition,\n      props = _objectWithoutPropertiesLoose(_useUncontrolled, [\"bsPrefix\", \"show\", \"closeLabel\", \"className\", \"children\", \"variant\", \"onClose\", \"dismissible\", \"transition\"]);\n\n  var prefix = useBootstrapPrefix(bsPrefix, 'alert');\n  var handleClose = useEventCallback(function (e) {\n    if (onClose) {\n      onClose(false, e);\n    }\n  });\n  var Transition = transition === true ? Fade : transition;\n  var alert = /*#__PURE__*/React.createElement(\"div\", _extends({\n    role: \"alert\"\n  }, Transition ? props : undefined, {\n    ref: ref,\n    className: classNames(className, prefix, variant && prefix + \"-\" + variant, dismissible && prefix + \"-dismissible\")\n  }), dismissible && /*#__PURE__*/React.createElement(CloseButton, {\n    onClick: handleClose,\n    label: closeLabel\n  }), children);\n  if (!Transition) return show ? alert : null;\n  return /*#__PURE__*/React.createElement(Transition, _extends({\n    unmountOnExit: true\n  }, props, {\n    ref: undefined,\n    in: show\n  }), alert);\n});\nAlert.displayName = 'Alert';\nAlert.defaultProps = defaultProps;\nAlert.Link = AlertLink;\nAlert.Heading = AlertHeading;\nexport default Alert;","// The minimum length of the national significant number.\nexport var MIN_LENGTH_FOR_NSN = 2; // The ITU says the maximum length should be 15,\n// but one can find longer numbers in Germany.\n\nexport var MAX_LENGTH_FOR_NSN = 17; // The maximum length of the country calling code.\n\nexport var MAX_LENGTH_COUNTRY_CODE = 3; // Digits accepted in phone numbers\n// (ascii, fullwidth, arabic-indic, and eastern arabic digits).\n\nexport var VALID_DIGITS = \"0-9\\uFF10-\\uFF19\\u0660-\\u0669\\u06F0-\\u06F9\"; // `DASHES` will be right after the opening square bracket of the \"character class\"\n\nvar DASHES = \"-\\u2010-\\u2015\\u2212\\u30FC\\uFF0D\";\nvar SLASHES = \"\\uFF0F/\";\nvar DOTS = \"\\uFF0E.\";\nexport var WHITESPACE = \" \\xA0\\xAD\\u200B\\u2060\\u3000\";\nvar BRACKETS = \"()\\uFF08\\uFF09\\uFF3B\\uFF3D\\\\[\\\\]\"; // export const OPENING_BRACKETS = '(\\uFF08\\uFF3B\\\\\\['\n\nvar TILDES = \"~\\u2053\\u223C\\uFF5E\"; // Regular expression of acceptable punctuation found in phone numbers. This\n// excludes punctuation found as a leading character only. This consists of dash\n// characters, white space characters, full stops, slashes, square brackets,\n// parentheses and tildes. Full-width variants are also present.\n\nexport var VALID_PUNCTUATION = \"\".concat(DASHES).concat(SLASHES).concat(DOTS).concat(WHITESPACE).concat(BRACKETS).concat(TILDES);\nexport var PLUS_CHARS = \"+\\uFF0B\"; // const LEADING_PLUS_CHARS_PATTERN = new RegExp('^[' + PLUS_CHARS + ']+')","/**\r\n * Checks whether the entire input sequence can be matched\r\n * against the regular expression.\r\n * @return {boolean}\r\n */\nexport function matchesEntirely(text, regular_expression) {\n  // If assigning the `''` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  text = text || '';\n  return new RegExp('^(?:' + regular_expression + ')$').test(text);\n}\n/**\r\n * Merges two arrays.\r\n * @param  {*} a\r\n * @param  {*} b\r\n * @return {*}\r\n */\n\nexport function mergeArrays(a, b) {\n  var merged = a.slice();\n\n  for (var _iterator = b, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var element = _ref;\n\n    if (a.indexOf(element) < 0) {\n      merged.push(element);\n    }\n  }\n\n  return merged.sort(function (a, b) {\n    return a - b;\n  }); // ES6 version, requires Set polyfill.\n  // let merged = new Set(a)\n  // for (const element of b)\n  // {\n  // \tmerged.add(i)\n  // }\n  // return Array.from(merged).sort((a, b) => a - b)\n}","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n} // https://stackoverflow.com/a/46971044/970769\n\n\nvar ParseError = function ParseError(code) {\n  _classCallCheck(this, ParseError);\n\n  this.name = this.constructor.name;\n  this.message = code;\n  this.stack = new Error(code).stack;\n};\n\nexport { ParseError as default };\nParseError.prototype = Object.create(Error.prototype);\nParseError.prototype.constructor = ParseError;","// Copy-pasted from:\n// https://github.com/substack/semver-compare/blob/master/index.js\n//\n// Inlining this function because some users reported issues with\n// importing from `semver-compare` in a browser with ES6 \"native\" modules.\n//\n// Fixes `semver-compare` not being able to compare versions with alpha/beta/etc \"tags\".\n// https://github.com/catamphetamine/libphonenumber-js/issues/381\nexport default function (a, b) {\n  a = a.split('-');\n  b = b.split('-');\n  var pa = a[0].split('.');\n  var pb = b[0].split('.');\n\n  for (var i = 0; i < 3; i++) {\n    var na = Number(pa[i]);\n    var nb = Number(pb[i]);\n    if (na > nb) return 1;\n    if (nb > na) return -1;\n    if (!isNaN(na) && isNaN(nb)) return 1;\n    if (isNaN(na) && !isNaN(nb)) return -1;\n  }\n\n  if (a[1] && b[1]) {\n    return a[1] > b[1] ? 1 : a[1] < b[1] ? -1 : 0;\n  }\n\n  return !a[1] && b[1] ? 1 : a[1] && !b[1] ? -1 : 0;\n}","function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nimport compare from './tools/semver-compare'; // Added \"possibleLengths\" and renamed\n// \"country_phone_code_to_countries\" to \"country_calling_codes\".\n\nvar V2 = '1.0.18'; // Added \"idd_prefix\" and \"default_idd_prefix\".\n\nvar V3 = '1.2.0'; // Moved `001` country code to \"nonGeographic\" section of metadata.\n\nvar V4 = '1.7.35';\nvar DEFAULT_EXT_PREFIX = ' ext. ';\n/**\r\n * See: https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md\r\n */\n\nvar Metadata = /*#__PURE__*/function () {\n  function Metadata(metadata) {\n    _classCallCheck(this, Metadata);\n\n    validateMetadata(metadata);\n    this.metadata = metadata;\n    setVersion.call(this, metadata);\n  }\n\n  _createClass(Metadata, [{\n    key: \"getCountries\",\n    value: function getCountries() {\n      return Object.keys(this.metadata.countries).filter(function (_) {\n        return _ !== '001';\n      });\n    }\n  }, {\n    key: \"getCountryMetadata\",\n    value: function getCountryMetadata(countryCode) {\n      return this.metadata.countries[countryCode];\n    }\n  }, {\n    key: \"nonGeographic\",\n    value: function nonGeographic() {\n      if (this.v1 || this.v2 || this.v3) return; // `nonGeographical` was a typo.\n      // It's present in metadata generated from `1.7.35` to `1.7.37`.\n\n      return this.metadata.nonGeographic || this.metadata.nonGeographical;\n    }\n  }, {\n    key: \"hasCountry\",\n    value: function hasCountry(country) {\n      return this.getCountryMetadata(country) !== undefined;\n    }\n  }, {\n    key: \"hasCallingCode\",\n    value: function hasCallingCode(callingCode) {\n      if (this.getCountryCodesForCallingCode(callingCode)) {\n        return true;\n      }\n\n      if (this.nonGeographic()) {\n        if (this.nonGeographic()[callingCode]) {\n          return true;\n        }\n      } else {\n        // A hacky workaround for old custom metadata (generated before V4).\n        var countryCodes = this.countryCallingCodes()[callingCode];\n\n        if (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\n          return true;\n        }\n      }\n    }\n  }, {\n    key: \"isNonGeographicCallingCode\",\n    value: function isNonGeographicCallingCode(callingCode) {\n      if (this.nonGeographic()) {\n        return this.nonGeographic()[callingCode] ? true : false;\n      } else {\n        return this.getCountryCodesForCallingCode(callingCode) ? false : true;\n      }\n    } // Deprecated.\n\n  }, {\n    key: \"country\",\n    value: function country(countryCode) {\n      return this.selectNumberingPlan(countryCode);\n    }\n  }, {\n    key: \"selectNumberingPlan\",\n    value: function selectNumberingPlan(countryCode, callingCode) {\n      if (countryCode && countryCode !== '001') {\n        if (!this.hasCountry(countryCode)) {\n          throw new Error(\"Unknown country: \".concat(countryCode));\n        }\n\n        this.numberingPlan = new NumberingPlan(this.getCountryMetadata(countryCode), this);\n      } else if (callingCode) {\n        if (!this.hasCallingCode(callingCode)) {\n          throw new Error(\"Unknown calling code: \".concat(callingCode));\n        }\n\n        this.numberingPlan = new NumberingPlan(this.getNumberingPlanMetadata(callingCode), this);\n      } else {\n        this.numberingPlan = undefined;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"getCountryCodesForCallingCode\",\n    value: function getCountryCodesForCallingCode(callingCode) {\n      var countryCodes = this.countryCallingCodes()[callingCode];\n\n      if (countryCodes) {\n        // Metadata before V4 included \"non-geographic entity\" calling codes\n        // inside `country_calling_codes` (for example, `\"881\":[\"001\"]`).\n        // Now the semantics of `country_calling_codes` has changed:\n        // it's specifically for \"countries\" now.\n        // Older versions of custom metadata will simply skip parsing\n        // \"non-geographic entity\" phone numbers with new versions\n        // of this library: it's not considered a bug,\n        // because such numbers are extremely rare,\n        // and developers extremely rarely use custom metadata.\n        if (countryCodes.length === 1 && countryCodes[0].length === 3) {\n          return;\n        }\n\n        return countryCodes;\n      }\n    }\n  }, {\n    key: \"getCountryCodeForCallingCode\",\n    value: function getCountryCodeForCallingCode(callingCode) {\n      var countryCodes = this.getCountryCodesForCallingCode(callingCode);\n\n      if (countryCodes) {\n        return countryCodes[0];\n      }\n    }\n  }, {\n    key: \"getNumberingPlanMetadata\",\n    value: function getNumberingPlanMetadata(callingCode) {\n      var countryCode = this.getCountryCodeForCallingCode(callingCode);\n\n      if (countryCode) {\n        return this.getCountryMetadata(countryCode);\n      }\n\n      if (this.nonGeographic()) {\n        var metadata = this.nonGeographic()[callingCode];\n\n        if (metadata) {\n          return metadata;\n        }\n      } else {\n        // A hacky workaround for old custom metadata (generated before V4).\n        var countryCodes = this.countryCallingCodes()[callingCode];\n\n        if (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\n          return this.metadata.countries['001'];\n        }\n      }\n    } // Deprecated.\n\n  }, {\n    key: \"countryCallingCode\",\n    value: function countryCallingCode() {\n      return this.numberingPlan.callingCode();\n    } // Deprecated.\n\n  }, {\n    key: \"IDDPrefix\",\n    value: function IDDPrefix() {\n      return this.numberingPlan.IDDPrefix();\n    } // Deprecated.\n\n  }, {\n    key: \"defaultIDDPrefix\",\n    value: function defaultIDDPrefix() {\n      return this.numberingPlan.defaultIDDPrefix();\n    } // Deprecated.\n\n  }, {\n    key: \"nationalNumberPattern\",\n    value: function nationalNumberPattern() {\n      return this.numberingPlan.nationalNumberPattern();\n    } // Deprecated.\n\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      return this.numberingPlan.possibleLengths();\n    } // Deprecated.\n\n  }, {\n    key: \"formats\",\n    value: function formats() {\n      return this.numberingPlan.formats();\n    } // Deprecated.\n\n  }, {\n    key: \"nationalPrefixForParsing\",\n    value: function nationalPrefixForParsing() {\n      return this.numberingPlan.nationalPrefixForParsing();\n    } // Deprecated.\n\n  }, {\n    key: \"nationalPrefixTransformRule\",\n    value: function nationalPrefixTransformRule() {\n      return this.numberingPlan.nationalPrefixTransformRule();\n    } // Deprecated.\n\n  }, {\n    key: \"leadingDigits\",\n    value: function leadingDigits() {\n      return this.numberingPlan.leadingDigits();\n    } // Deprecated.\n\n  }, {\n    key: \"hasTypes\",\n    value: function hasTypes() {\n      return this.numberingPlan.hasTypes();\n    } // Deprecated.\n\n  }, {\n    key: \"type\",\n    value: function type(_type) {\n      return this.numberingPlan.type(_type);\n    } // Deprecated.\n\n  }, {\n    key: \"ext\",\n    value: function ext() {\n      return this.numberingPlan.ext();\n    }\n  }, {\n    key: \"countryCallingCodes\",\n    value: function countryCallingCodes() {\n      if (this.v1) return this.metadata.country_phone_code_to_countries;\n      return this.metadata.country_calling_codes;\n    } // Deprecated.\n\n  }, {\n    key: \"chooseCountryByCountryCallingCode\",\n    value: function chooseCountryByCountryCallingCode(callingCode) {\n      this.selectNumberingPlan(null, callingCode);\n    }\n  }, {\n    key: \"hasSelectedNumberingPlan\",\n    value: function hasSelectedNumberingPlan() {\n      return this.numberingPlan !== undefined;\n    }\n  }]);\n\n  return Metadata;\n}();\n\nexport { Metadata as default };\n\nvar NumberingPlan = /*#__PURE__*/function () {\n  function NumberingPlan(metadata, globalMetadataObject) {\n    _classCallCheck(this, NumberingPlan);\n\n    this.globalMetadataObject = globalMetadataObject;\n    this.metadata = metadata;\n    setVersion.call(this, globalMetadataObject.metadata);\n  }\n\n  _createClass(NumberingPlan, [{\n    key: \"callingCode\",\n    value: function callingCode() {\n      return this.metadata[0];\n    } // Formatting information for regions which share\n    // a country calling code is contained by only one region\n    // for performance reasons. For example, for NANPA region\n    // (\"North American Numbering Plan Administration\",\n    //  which includes USA, Canada, Cayman Islands, Bahamas, etc)\n    // it will be contained in the metadata for `US`.\n\n  }, {\n    key: \"getDefaultCountryMetadataForRegion\",\n    value: function getDefaultCountryMetadataForRegion() {\n      return this.globalMetadataObject.getNumberingPlanMetadata(this.callingCode());\n    }\n  }, {\n    key: \"IDDPrefix\",\n    value: function IDDPrefix() {\n      if (this.v1 || this.v2) return;\n      return this.metadata[1];\n    }\n  }, {\n    key: \"defaultIDDPrefix\",\n    value: function defaultIDDPrefix() {\n      if (this.v1 || this.v2) return;\n      return this.metadata[12];\n    }\n  }, {\n    key: \"nationalNumberPattern\",\n    value: function nationalNumberPattern() {\n      if (this.v1 || this.v2) return this.metadata[1];\n      return this.metadata[2];\n    }\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      if (this.v1) return;\n      return this.metadata[this.v2 ? 2 : 3];\n    }\n  }, {\n    key: \"_getFormats\",\n    value: function _getFormats(metadata) {\n      return metadata[this.v1 ? 2 : this.v2 ? 3 : 4];\n    } // For countries of the same region (e.g. NANPA)\n    // formats are all stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: \"formats\",\n    value: function formats() {\n      var _this = this;\n\n      var formats = this._getFormats(this.metadata) || this._getFormats(this.getDefaultCountryMetadataForRegion()) || [];\n      return formats.map(function (_) {\n        return new Format(_, _this);\n      });\n    }\n  }, {\n    key: \"nationalPrefix\",\n    value: function nationalPrefix() {\n      return this.metadata[this.v1 ? 3 : this.v2 ? 4 : 5];\n    }\n  }, {\n    key: \"_getNationalPrefixFormattingRule\",\n    value: function _getNationalPrefixFormattingRule(metadata) {\n      return metadata[this.v1 ? 4 : this.v2 ? 5 : 6];\n    } // For countries of the same region (e.g. NANPA)\n    // national prefix formatting rule is stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: \"nationalPrefixFormattingRule\",\n    value: function nationalPrefixFormattingRule() {\n      return this._getNationalPrefixFormattingRule(this.metadata) || this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion());\n    }\n  }, {\n    key: \"_nationalPrefixForParsing\",\n    value: function _nationalPrefixForParsing() {\n      return this.metadata[this.v1 ? 5 : this.v2 ? 6 : 7];\n    }\n  }, {\n    key: \"nationalPrefixForParsing\",\n    value: function nationalPrefixForParsing() {\n      // If `national_prefix_for_parsing` is not set explicitly,\n      // then infer it from `national_prefix` (if any)\n      return this._nationalPrefixForParsing() || this.nationalPrefix();\n    }\n  }, {\n    key: \"nationalPrefixTransformRule\",\n    value: function nationalPrefixTransformRule() {\n      return this.metadata[this.v1 ? 6 : this.v2 ? 7 : 8];\n    }\n  }, {\n    key: \"_getNationalPrefixIsOptionalWhenFormatting\",\n    value: function _getNationalPrefixIsOptionalWhenFormatting() {\n      return !!this.metadata[this.v1 ? 7 : this.v2 ? 8 : 9];\n    } // For countries of the same region (e.g. NANPA)\n    // \"national prefix is optional when formatting\" flag is\n    // stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: \"nationalPrefixIsOptionalWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsOptionalWhenFormattingInNationalFormat() {\n      return this._getNationalPrefixIsOptionalWhenFormatting(this.metadata) || this._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion());\n    }\n  }, {\n    key: \"leadingDigits\",\n    value: function leadingDigits() {\n      return this.metadata[this.v1 ? 8 : this.v2 ? 9 : 10];\n    }\n  }, {\n    key: \"types\",\n    value: function types() {\n      return this.metadata[this.v1 ? 9 : this.v2 ? 10 : 11];\n    }\n  }, {\n    key: \"hasTypes\",\n    value: function hasTypes() {\n      // Versions 1.2.0 - 1.2.4: can be `[]`.\n\n      /* istanbul ignore next */\n      if (this.types() && this.types().length === 0) {\n        return false;\n      } // Versions <= 1.2.4: can be `undefined`.\n      // Version >= 1.2.5: can be `0`.\n\n\n      return !!this.types();\n    }\n  }, {\n    key: \"type\",\n    value: function type(_type2) {\n      if (this.hasTypes() && getType(this.types(), _type2)) {\n        return new Type(getType(this.types(), _type2), this);\n      }\n    }\n  }, {\n    key: \"ext\",\n    value: function ext() {\n      if (this.v1 || this.v2) return DEFAULT_EXT_PREFIX;\n      return this.metadata[13] || DEFAULT_EXT_PREFIX;\n    }\n  }]);\n\n  return NumberingPlan;\n}();\n\nvar Format = /*#__PURE__*/function () {\n  function Format(format, metadata) {\n    _classCallCheck(this, Format);\n\n    this._format = format;\n    this.metadata = metadata;\n  }\n\n  _createClass(Format, [{\n    key: \"pattern\",\n    value: function pattern() {\n      return this._format[0];\n    }\n  }, {\n    key: \"format\",\n    value: function format() {\n      return this._format[1];\n    }\n  }, {\n    key: \"leadingDigitsPatterns\",\n    value: function leadingDigitsPatterns() {\n      return this._format[2] || [];\n    }\n  }, {\n    key: \"nationalPrefixFormattingRule\",\n    value: function nationalPrefixFormattingRule() {\n      return this._format[3] || this.metadata.nationalPrefixFormattingRule();\n    }\n  }, {\n    key: \"nationalPrefixIsOptionalWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsOptionalWhenFormattingInNationalFormat() {\n      return !!this._format[4] || this.metadata.nationalPrefixIsOptionalWhenFormattingInNationalFormat();\n    }\n  }, {\n    key: \"nationalPrefixIsMandatoryWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsMandatoryWhenFormattingInNationalFormat() {\n      // National prefix is omitted if there's no national prefix formatting rule\n      // set for this country, or when the national prefix formatting rule\n      // contains no national prefix itself, or when this rule is set but\n      // national prefix is optional for this phone number format\n      // (and it is not enforced explicitly)\n      return this.usesNationalPrefix() && !this.nationalPrefixIsOptionalWhenFormattingInNationalFormat();\n    } // Checks whether national prefix formatting rule contains national prefix.\n\n  }, {\n    key: \"usesNationalPrefix\",\n    value: function usesNationalPrefix() {\n      return this.nationalPrefixFormattingRule() && // Check that national prefix formatting rule is not a \"dummy\" one.\n      !FIRST_GROUP_ONLY_PREFIX_PATTERN.test(this.nationalPrefixFormattingRule()); // Previously, `FIRST_GROUP_ONLY_PREFIX_PATTERN` check was instead done via:\n      // // Check that national prefix formatting rule is not a \"dummy\" one.\n      // this.nationalPrefixFormattingRule() !== '$1' &&\n      // // Check that national prefix formatting rule actually has national prefix digit(s).\n      // // Filters out cases like \"($1)\".\n      // // Is used in place of `libphonenumber`'s `FIRST_GROUP_ONLY_PREFIX_PATTERN_` regexp.\n      // /\\d/.test(this.nationalPrefixFormattingRule().replace('$1', ''))\n    }\n  }, {\n    key: \"internationalFormat\",\n    value: function internationalFormat() {\n      return this._format[5] || this.format();\n    }\n  }]);\n\n  return Format;\n}();\n/**\r\n * A pattern that is used to determine if the national prefix formatting rule\r\n * has the first group only, i.e., does not start with the national prefix.\r\n * Note that the pattern explicitly allows for unbalanced parentheses.\r\n */\n\n\nvar FIRST_GROUP_ONLY_PREFIX_PATTERN = /^\\(?\\$1\\)?$/;\n\nvar Type = /*#__PURE__*/function () {\n  function Type(type, metadata) {\n    _classCallCheck(this, Type);\n\n    this.type = type;\n    this.metadata = metadata;\n  }\n\n  _createClass(Type, [{\n    key: \"pattern\",\n    value: function pattern() {\n      if (this.metadata.v1) return this.type;\n      return this.type[0];\n    }\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      if (this.metadata.v1) return;\n      return this.type[1] || this.metadata.possibleLengths();\n    }\n  }]);\n\n  return Type;\n}();\n\nfunction getType(types, type) {\n  switch (type) {\n    case 'FIXED_LINE':\n      return types[0];\n\n    case 'MOBILE':\n      return types[1];\n\n    case 'TOLL_FREE':\n      return types[2];\n\n    case 'PREMIUM_RATE':\n      return types[3];\n\n    case 'PERSONAL_NUMBER':\n      return types[4];\n\n    case 'VOICEMAIL':\n      return types[5];\n\n    case 'UAN':\n      return types[6];\n\n    case 'PAGER':\n      return types[7];\n\n    case 'VOIP':\n      return types[8];\n\n    case 'SHARED_COST':\n      return types[9];\n  }\n}\n\nexport function validateMetadata(metadata) {\n  if (!metadata) {\n    throw new Error('[libphonenumber-js] `metadata` argument not passed. Check your arguments.');\n  } // `country_phone_code_to_countries` was renamed to\n  // `country_calling_codes` in `1.0.18`.\n\n\n  if (!is_object(metadata) || !is_object(metadata.countries)) {\n    throw new Error(\"[libphonenumber-js] `metadata` argument was passed but it's not a valid metadata. Must be an object having `.countries` child object property. Got \".concat(is_object(metadata) ? 'an object of shape: { ' + Object.keys(metadata).join(', ') + ' }' : 'a ' + type_of(metadata) + ': ' + metadata, \".\"));\n  }\n} // Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\nvar is_object = function is_object(_) {\n  return _typeof(_) === 'object';\n}; // Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\n\nvar type_of = function type_of(_) {\n  return _typeof(_);\n};\n/**\r\n * Returns extension prefix for a country.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string?}\r\n * @example\r\n * // Returns \" ext. \"\r\n * getExtPrefix(\"US\")\r\n */\n\n\nexport function getExtPrefix(country, metadata) {\n  metadata = new Metadata(metadata);\n\n  if (metadata.hasCountry(country)) {\n    return metadata.country(country).ext();\n  }\n\n  return DEFAULT_EXT_PREFIX;\n}\n/**\r\n * Returns \"country calling code\" for a country.\r\n * Throws an error if the country doesn't exist or isn't supported by this library.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string}\r\n * @example\r\n * // Returns \"44\"\r\n * getCountryCallingCode(\"GB\")\r\n */\n\nexport function getCountryCallingCode(country, metadata) {\n  metadata = new Metadata(metadata);\n\n  if (metadata.hasCountry(country)) {\n    return metadata.country(country).countryCallingCode();\n  }\n\n  throw new Error(\"Unknown country: \".concat(country));\n}\nexport function isSupportedCountry(country, metadata) {\n  // metadata = new Metadata(metadata)\n  // return metadata.hasCountry(country)\n  return metadata.countries[country] !== undefined;\n}\n\nfunction setVersion(metadata) {\n  this.v1 = !metadata.version;\n  this.v2 = metadata.version !== undefined && compare(metadata.version, V3) === -1;\n  this.v3 = metadata.version !== undefined && compare(metadata.version, V4) === -1;\n  this.v4 = metadata.version !== undefined; // && compare(metadata.version, V5) === -1\n} // const ISO_COUNTRY_CODE = /^[A-Z]{2}$/\n// function isCountryCode(countryCode) {\n// \treturn ISO_COUNTRY_CODE.test(countryCodeOrCountryCallingCode)\n// }","import { VALID_DIGITS } from './constants'; // The RFC 3966 format for extensions.\n\nvar RFC3966_EXTN_PREFIX = ';ext='; // Pattern to capture digits used in an extension.\n// Places a maximum length of '7' for an extension.\n\nvar CAPTURING_EXTN_DIGITS = '([' + VALID_DIGITS + ']{1,7})';\n/**\r\n * Regexp of all possible ways to write extensions, for use when parsing. This\r\n * will be run as a case-insensitive regexp match. Wide character versions are\r\n * also provided after each ASCII version. There are three regular expressions\r\n * here. The first covers RFC 3966 format, where the extension is added using\r\n * ';ext='. The second more generic one starts with optional white space and\r\n * ends with an optional full stop (.), followed by zero or more spaces/tabs\r\n * /commas and then the numbers themselves. The other one covers the special\r\n * case of American numbers where the extension is written with a hash at the\r\n * end, such as '- 503#'. Note that the only capturing groups should be around\r\n * the digits that you want to capture as part of the extension, or else parsing\r\n * will fail! We allow two options for representing the accented o - the\r\n * character itself, and one in the unicode decomposed form with the combining\r\n * acute accent.\r\n */\n\nfunction create_extension_pattern(purpose) {\n  // One-character symbols that can be used to indicate an extension.\n  var single_extension_characters = \"x\\uFF58#\\uFF03~\\uFF5E\";\n\n  switch (purpose) {\n    // For parsing, we are slightly more lenient in our interpretation than for matching. Here we\n    // allow \"comma\" and \"semicolon\" as possible extension indicators. When matching, these are\n    case 'parsing':\n      single_extension_characters = ',;' + single_extension_characters;\n  }\n\n  return RFC3966_EXTN_PREFIX + CAPTURING_EXTN_DIGITS + '|' + \"[ \\xA0\\\\t,]*\" + \"(?:e?xt(?:ensi(?:o\\u0301?|\\xF3))?n?|\\uFF45?\\uFF58\\uFF54\\uFF4E?|\" + // \"доб.\"\n  \"\\u0434\\u043E\\u0431|\" + '[' + single_extension_characters + \"]|int|anexo|\\uFF49\\uFF4E\\uFF54)\" + \"[:\\\\.\\uFF0E]?[ \\xA0\\\\t,-]*\" + CAPTURING_EXTN_DIGITS + '#?|' + '[- ]+([' + VALID_DIGITS + ']{1,5})#';\n}\n/**\r\n * Regexp of all possible ways to write extensions, for use when parsing. This\r\n * will be run as a case-insensitive regexp match. Wide character versions are\r\n * also provided after each ASCII version. There are three regular expressions\r\n * here. The first covers RFC 3966 format, where the extension is added using\r\n * ';ext='. The second more generic one starts with optional white space and\r\n * ends with an optional full stop (.), followed by zero or more spaces/tabs\r\n * /commas and then the numbers themselves. The other one covers the special\r\n * case of American numbers where the extension is written with a hash at the\r\n * end, such as '- 503#'. Note that the only capturing groups should be around\r\n * the digits that you want to capture as part of the extension, or else parsing\r\n * will fail! We allow two options for representing the accented o - the\r\n * character itself, and one in the unicode decomposed form with the combining\r\n * acute accent.\r\n */\n\n\nexport var EXTN_PATTERNS_FOR_PARSING = create_extension_pattern('parsing');\nexport var EXTN_PATTERNS_FOR_MATCHING = create_extension_pattern('matching'); // Regexp of all known extension prefixes used by different regions followed by\n// 1 or more valid digits, for use when parsing.\n\nvar EXTN_PATTERN = new RegExp('(?:' + EXTN_PATTERNS_FOR_PARSING + ')$', 'i'); // Strips any extension (as in, the part of the number dialled after the call is\n// connected, usually indicated with extn, ext, x or similar) from the end of\n// the number, and returns it.\n\nexport function extractExtension(number) {\n  var start = number.search(EXTN_PATTERN);\n\n  if (start < 0) {\n    return {};\n  } // If we find a potential extension, and the number preceding this is a viable\n  // number, we assume it is an extension.\n\n\n  var number_without_extension = number.slice(0, start);\n  var matches = number.match(EXTN_PATTERN);\n  var i = 1;\n\n  while (i < matches.length) {\n    if (matches[i] != null && matches[i].length > 0) {\n      return {\n        number: number_without_extension,\n        ext: matches[i]\n      };\n    }\n\n    i++;\n  }\n}","import { MIN_LENGTH_FOR_NSN, VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS } from './constants';\nimport { EXTN_PATTERNS_FOR_PARSING } from './extension'; //  Regular expression of viable phone numbers. This is location independent.\n//  Checks we have at least three leading digits, and only valid punctuation,\n//  alpha characters and digits in the phone number. Does not include extension\n//  data. The symbol 'x' is allowed here as valid punctuation since it is often\n//  used as a placeholder for carrier codes, for example in Brazilian phone\n//  numbers. We also allow multiple '+' characters at the start.\n//\n//  Corresponds to the following:\n//  [digits]{minLengthNsn}|\n//  plus_sign*\n//  (([punctuation]|[star])*[digits]){3,}([punctuation]|[star]|[digits]|[alpha])*\n//\n//  The first reg-ex is to allow short numbers (two digits long) to be parsed if\n//  they are entered as \"15\" etc, but only if there is no punctuation in them.\n//  The second expression restricts the number of digits to three or more, but\n//  then allows them to be in international form, and to have alpha-characters\n//  and punctuation. We split up the two reg-exes here and combine them when\n//  creating the reg-ex VALID_PHONE_NUMBER_PATTERN itself so we can prefix it\n//  with ^ and append $ to each branch.\n//\n//  \"Note VALID_PUNCTUATION starts with a -,\n//   so must be the first in the range\" (c) Google devs.\n//  (wtf did they mean by saying that; probably nothing)\n//\n\nvar MIN_LENGTH_PHONE_NUMBER_PATTERN = '[' + VALID_DIGITS + ']{' + MIN_LENGTH_FOR_NSN + '}'; //\n// And this is the second reg-exp:\n// (see MIN_LENGTH_PHONE_NUMBER_PATTERN for a full description of this reg-exp)\n//\n\nvar VALID_PHONE_NUMBER = '[' + PLUS_CHARS + ']{0,1}' + '(?:' + '[' + VALID_PUNCTUATION + ']*' + '[' + VALID_DIGITS + ']' + '){3,}' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']*'; // The combined regular expression for valid phone numbers:\n//\n\nvar VALID_PHONE_NUMBER_PATTERN = new RegExp( // Either a short two-digit-only phone number\n'^' + MIN_LENGTH_PHONE_NUMBER_PATTERN + '$' + '|' + // Or a longer fully parsed phone number (min 3 characters)\n'^' + VALID_PHONE_NUMBER + // Phone number extensions\n'(?:' + EXTN_PATTERNS_FOR_PARSING + ')?' + '$', 'i'); // Checks to see if the string of characters could possibly be a phone number at\n// all. At the moment, checks to see that the string begins with at least 2\n// digits, ignoring any punctuation commonly found in phone numbers. This method\n// does not require the number to be normalized in advance - but does assume\n// that leading non-number symbols have been removed, such as by the method\n// `extract_possible_number`.\n//\n\nexport default function isViablePhoneNumber(number) {\n  return number.length >= MIN_LENGTH_FOR_NSN && VALID_PHONE_NUMBER_PATTERN.test(number);\n}","// These mappings map a character (key) to a specific digit that should\n// replace it for normalization purposes. Non-European digits that\n// may be used in phone numbers are mapped to a European equivalent.\n//\n// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\n//\nexport var DIGITS = {\n  '0': '0',\n  '1': '1',\n  '2': '2',\n  '3': '3',\n  '4': '4',\n  '5': '5',\n  '6': '6',\n  '7': '7',\n  '8': '8',\n  '9': '9',\n  \"\\uFF10\": '0',\n  // Fullwidth digit 0\n  \"\\uFF11\": '1',\n  // Fullwidth digit 1\n  \"\\uFF12\": '2',\n  // Fullwidth digit 2\n  \"\\uFF13\": '3',\n  // Fullwidth digit 3\n  \"\\uFF14\": '4',\n  // Fullwidth digit 4\n  \"\\uFF15\": '5',\n  // Fullwidth digit 5\n  \"\\uFF16\": '6',\n  // Fullwidth digit 6\n  \"\\uFF17\": '7',\n  // Fullwidth digit 7\n  \"\\uFF18\": '8',\n  // Fullwidth digit 8\n  \"\\uFF19\": '9',\n  // Fullwidth digit 9\n  \"\\u0660\": '0',\n  // Arabic-indic digit 0\n  \"\\u0661\": '1',\n  // Arabic-indic digit 1\n  \"\\u0662\": '2',\n  // Arabic-indic digit 2\n  \"\\u0663\": '3',\n  // Arabic-indic digit 3\n  \"\\u0664\": '4',\n  // Arabic-indic digit 4\n  \"\\u0665\": '5',\n  // Arabic-indic digit 5\n  \"\\u0666\": '6',\n  // Arabic-indic digit 6\n  \"\\u0667\": '7',\n  // Arabic-indic digit 7\n  \"\\u0668\": '8',\n  // Arabic-indic digit 8\n  \"\\u0669\": '9',\n  // Arabic-indic digit 9\n  \"\\u06F0\": '0',\n  // Eastern-Arabic digit 0\n  \"\\u06F1\": '1',\n  // Eastern-Arabic digit 1\n  \"\\u06F2\": '2',\n  // Eastern-Arabic digit 2\n  \"\\u06F3\": '3',\n  // Eastern-Arabic digit 3\n  \"\\u06F4\": '4',\n  // Eastern-Arabic digit 4\n  \"\\u06F5\": '5',\n  // Eastern-Arabic digit 5\n  \"\\u06F6\": '6',\n  // Eastern-Arabic digit 6\n  \"\\u06F7\": '7',\n  // Eastern-Arabic digit 7\n  \"\\u06F8\": '8',\n  // Eastern-Arabic digit 8\n  \"\\u06F9\": '9' // Eastern-Arabic digit 9\n\n};\nexport function parseDigit(character) {\n  return DIGITS[character];\n}\n/**\r\n * Parses phone number digits from a string.\r\n * Drops all punctuation leaving only digits.\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseDigits('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * ```\r\n */\n\nexport default function parseDigits(string) {\n  var result = ''; // Using `.split('')` here instead of normal `for ... of`\n  // because the importing application doesn't neccessarily include an ES6 polyfill.\n  // The `.split('')` approach discards \"exotic\" UTF-8 characters\n  // (the ones consisting of four bytes) but digits\n  // (including non-European ones) don't fall into that range\n  // so such \"exotic\" characters would be discarded anyway.\n\n  for (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var character = _ref;\n    var digit = parseDigit(character);\n\n    if (digit) {\n      result += digit;\n    }\n  }\n\n  return result;\n}","import { parseDigit } from './parseDigits';\n/**\r\n * Parses phone number characters from a string.\r\n * Drops all punctuation leaving only digits and the leading `+` sign (if any).\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * // Outputs '8800555'.\r\n * parseIncompletePhoneNumber('8 (800) 555')\r\n * // Outputs '+7800555'.\r\n * parseIncompletePhoneNumber('+7 800 555')\r\n * ```\r\n */\n\nexport default function parseIncompletePhoneNumber(string) {\n  var result = ''; // Using `.split('')` here instead of normal `for ... of`\n  // because the importing application doesn't neccessarily include an ES6 polyfill.\n  // The `.split('')` approach discards \"exotic\" UTF-8 characters\n  // (the ones consisting of four bytes) but digits\n  // (including non-European ones) don't fall into that range\n  // so such \"exotic\" characters would be discarded anyway.\n\n  for (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var character = _ref;\n    result += parsePhoneNumberCharacter(character, result) || '';\n  }\n\n  return result;\n}\n/**\r\n * `input-format` `parse()` function.\r\n * https://gitlab.com/catamphetamine/input-format\r\n * @param  {string} character - Yet another character from raw input string.\r\n * @param  {string} value - The value parsed so far.\r\n * @param  {object} meta - Optional custom use-case-specific metadata.\r\n * @return {string?} The parsed character.\r\n */\n\nexport function parsePhoneNumberCharacter(character, value) {\n  // Only allow a leading `+`.\n  if (character === '+') {\n    // If this `+` is not the first parsed character\n    // then discard it.\n    if (value) {\n      return;\n    }\n\n    return '+';\n  } // Allow digits.\n\n\n  return parseDigit(character);\n}","import Metadata from './metadata';\nimport { matchesEntirely, mergeArrays } from './util';\nvar NON_FIXED_LINE_PHONE_TYPES = ['MOBILE', 'PREMIUM_RATE', 'TOLL_FREE', 'SHARED_COST', 'VOIP', 'PERSONAL_NUMBER', 'PAGER', 'UAN', 'VOICEMAIL']; // Finds out national phone number type (fixed line, mobile, etc)\n\nexport default function getNumberType(input, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {}; // When `parse()` returned `{}`\n  // meaning that the phone number is not a valid one.\n\n  if (!input.country) {\n    return;\n  }\n\n  metadata = new Metadata(metadata);\n  metadata.selectNumberingPlan(input.country, input.countryCallingCode);\n  var nationalNumber = options.v2 ? input.nationalNumber : input.phone; // The following is copy-pasted from the original function:\n  // https://github.com/googlei18n/libphonenumber/blob/3ea547d4fbaa2d0b67588904dfa5d3f2557c27ff/javascript/i18n/phonenumbers/phonenumberutil.js#L2835\n  // Is this national number even valid for this country\n\n  if (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern())) {\n    return;\n  } // Is it fixed line number\n\n\n  if (is_of_type(nationalNumber, 'FIXED_LINE', metadata)) {\n    // Because duplicate regular expressions are removed\n    // to reduce metadata size, if \"mobile\" pattern is \"\"\n    // then it means it was removed due to being a duplicate of the fixed-line pattern.\n    //\n    if (metadata.type('MOBILE') && metadata.type('MOBILE').pattern() === '') {\n      return 'FIXED_LINE_OR_MOBILE';\n    } // v1 metadata.\n    // Legacy.\n    // Deprecated.\n\n\n    if (!metadata.type('MOBILE')) {\n      return 'FIXED_LINE_OR_MOBILE';\n    } // Check if the number happens to qualify as both fixed line and mobile.\n    // (no such country in the minimal metadata set)\n\n    /* istanbul ignore if */\n\n\n    if (is_of_type(nationalNumber, 'MOBILE', metadata)) {\n      return 'FIXED_LINE_OR_MOBILE';\n    }\n\n    return 'FIXED_LINE';\n  }\n\n  for (var _i = 0, _NON_FIXED_LINE_PHONE = NON_FIXED_LINE_PHONE_TYPES; _i < _NON_FIXED_LINE_PHONE.length; _i++) {\n    var _type = _NON_FIXED_LINE_PHONE[_i];\n\n    if (is_of_type(nationalNumber, _type, metadata)) {\n      return _type;\n    }\n  }\n}\nexport function is_of_type(nationalNumber, type, metadata) {\n  type = metadata.type(type);\n\n  if (!type || !type.pattern()) {\n    return false;\n  } // Check if any possible number lengths are present;\n  // if so, we use them to avoid checking\n  // the validation pattern if they don't match.\n  // If they are absent, this means they match\n  // the general description, which we have\n  // already checked before a specific number type.\n\n\n  if (type.possibleLengths() && type.possibleLengths().indexOf(nationalNumber.length) < 0) {\n    return false;\n  }\n\n  return matchesEntirely(nationalNumber, type.pattern());\n} // Should only be called for the \"new\" metadata which has \"possible lengths\".\n\nexport function checkNumberLengthForType(nationalNumber, type, metadata) {\n  var type_info = metadata.type(type); // There should always be \"<possiblePengths/>\" set for every type element.\n  // This is declared in the XML schema.\n  // For size efficiency, where a sub-description (e.g. fixed-line)\n  // has the same \"<possiblePengths/>\" as the \"general description\", this is missing,\n  // so we fall back to the \"general description\". Where no numbers of the type\n  // exist at all, there is one possible length (-1) which is guaranteed\n  // not to match the length of any real phone number.\n\n  var possible_lengths = type_info && type_info.possibleLengths() || metadata.possibleLengths(); // let local_lengths    = type_info && type.possibleLengthsLocal() || metadata.possibleLengthsLocal()\n  // Metadata before version `1.0.18` didn't contain `possible_lengths`.\n\n  if (!possible_lengths) {\n    return 'IS_POSSIBLE';\n  }\n\n  if (type === 'FIXED_LINE_OR_MOBILE') {\n    // No such country in metadata.\n\n    /* istanbul ignore next */\n    if (!metadata.type('FIXED_LINE')) {\n      // The rare case has been encountered where no fixedLine data is available\n      // (true for some non-geographic entities), so we just check mobile.\n      return checkNumberLengthForType(nationalNumber, 'MOBILE', metadata);\n    }\n\n    var mobile_type = metadata.type('MOBILE');\n\n    if (mobile_type) {\n      // Merge the mobile data in if there was any. \"Concat\" creates a new\n      // array, it doesn't edit possible_lengths in place, so we don't need a copy.\n      // Note that when adding the possible lengths from mobile, we have\n      // to again check they aren't empty since if they are this indicates\n      // they are the same as the general desc and should be obtained from there.\n      possible_lengths = mergeArrays(possible_lengths, mobile_type.possibleLengths()); // The current list is sorted; we need to merge in the new list and\n      // re-sort (duplicates are okay). Sorting isn't so expensive because\n      // the lists are very small.\n      // if (local_lengths)\n      // {\n      // \tlocal_lengths = mergeArrays(local_lengths, mobile_type.possibleLengthsLocal())\n      // }\n      // else\n      // {\n      // \tlocal_lengths = mobile_type.possibleLengthsLocal()\n      // }\n    }\n  } // If the type doesn't exist then return 'INVALID_LENGTH'.\n  else if (type && !type_info) {\n      return 'INVALID_LENGTH';\n    }\n\n  var actual_length = nationalNumber.length; // In `libphonenumber-js` all \"local-only\" formats are dropped for simplicity.\n  // // This is safe because there is never an overlap beween the possible lengths\n  // // and the local-only lengths; this is checked at build time.\n  // if (local_lengths && local_lengths.indexOf(nationalNumber.length) >= 0)\n  // {\n  // \treturn 'IS_POSSIBLE_LOCAL_ONLY'\n  // }\n\n  var minimum_length = possible_lengths[0];\n\n  if (minimum_length === actual_length) {\n    return 'IS_POSSIBLE';\n  }\n\n  if (minimum_length > actual_length) {\n    return 'TOO_SHORT';\n  }\n\n  if (possible_lengths[possible_lengths.length - 1] < actual_length) {\n    return 'TOO_LONG';\n  } // We skip the first element since we've already checked it.\n\n\n  return possible_lengths.indexOf(actual_length, 1) >= 0 ? 'IS_POSSIBLE' : 'INVALID_LENGTH';\n}","import Metadata from './metadata';\nimport { checkNumberLengthForType } from './getNumberType_';\nexport default function isPossiblePhoneNumber(input, options, metadata) {\n  /* istanbul ignore if */\n  if (options === undefined) {\n    options = {};\n  }\n\n  metadata = new Metadata(metadata);\n\n  if (options.v2) {\n    if (!input.countryCallingCode) {\n      throw new Error('Invalid phone number object passed');\n    }\n\n    metadata.chooseCountryByCountryCallingCode(input.countryCallingCode);\n  } else {\n    if (!input.phone) {\n      return false;\n    }\n\n    if (input.country) {\n      if (!metadata.hasCountry(input.country)) {\n        throw new Error(\"Unknown country: \".concat(input.country));\n      }\n\n      metadata.country(input.country);\n    } else {\n      if (!input.countryCallingCode) {\n        throw new Error('Invalid phone number object passed');\n      }\n\n      metadata.chooseCountryByCountryCallingCode(input.countryCallingCode);\n    }\n  }\n\n  if (metadata.possibleLengths()) {\n    return isPossibleNumber(input.phone || input.nationalNumber, undefined, metadata);\n  } else {\n    // There was a bug between `1.7.35` and `1.7.37` where \"possible_lengths\"\n    // were missing for \"non-geographical\" numbering plans.\n    // Just assume the number is possible in such cases:\n    // it's unlikely that anyone generated their custom metadata\n    // in that short period of time (one day).\n    // This code can be removed in some future major version update.\n    if (input.countryCallingCode && metadata.isNonGeographicCallingCode(input.countryCallingCode)) {\n      // \"Non-geographic entities\" did't have `possibleLengths`\n      // due to a bug in metadata generation process.\n      return true;\n    } else {\n      throw new Error('Missing \"possibleLengths\" in metadata. Perhaps the metadata has been generated before v1.0.18.');\n    }\n  }\n}\nexport function isPossibleNumber(nationalNumber, isInternational, metadata) {\n  switch (checkNumberLengthForType(nationalNumber, undefined, metadata)) {\n    case 'IS_POSSIBLE':\n      return true;\n    // case 'IS_POSSIBLE_LOCAL_ONLY':\n    // \treturn !isInternational\n\n    default:\n      return false;\n  }\n}","import Metadata from './metadata';\nimport { VALID_DIGITS } from './constants';\nvar CAPTURING_DIGIT_PATTERN = new RegExp('([' + VALID_DIGITS + '])');\n/**\r\n * Pattern that makes it easy to distinguish whether a region has a single\r\n * international dialing prefix or not. If a region has a single international\r\n * prefix (e.g. 011 in USA), it will be represented as a string that contains\r\n * a sequence of ASCII digits, and possibly a tilde, which signals waiting for\r\n * the tone. If there are multiple available international prefixes in a\r\n * region, they will be represented as a regex string that always contains one\r\n * or more characters that are not ASCII digits or a tilde.\r\n */\n\nvar SINGLE_IDD_PREFIX = /^[\\d]+(?:[~\\u2053\\u223C\\uFF5E][\\d]+)?$/; // For regions that have multiple IDD prefixes\n// a preferred IDD prefix is returned.\n\nexport function getIDDPrefix(country, callingCode, metadata) {\n  var countryMetadata = new Metadata(metadata);\n  countryMetadata.selectNumberingPlan(country, callingCode);\n\n  if (SINGLE_IDD_PREFIX.test(countryMetadata.IDDPrefix())) {\n    return countryMetadata.IDDPrefix();\n  }\n\n  return countryMetadata.defaultIDDPrefix();\n}\nexport function stripIDDPrefix(number, country, callingCode, metadata) {\n  if (!country) {\n    return;\n  } // Check if the number is IDD-prefixed.\n\n\n  var countryMetadata = new Metadata(metadata);\n  countryMetadata.selectNumberingPlan(country, callingCode);\n  var IDDPrefixPattern = new RegExp(countryMetadata.IDDPrefix());\n\n  if (number.search(IDDPrefixPattern) !== 0) {\n    return;\n  } // Strip IDD prefix.\n\n\n  number = number.slice(number.match(IDDPrefixPattern)[0].length); // Some kind of a weird edge case.\n  // No explanation from Google given.\n\n  var matchedGroups = number.match(CAPTURING_DIGIT_PATTERN);\n  /* istanbul ignore next */\n\n  if (matchedGroups && matchedGroups[1] != null && matchedGroups[1].length > 0) {\n    if (matchedGroups[1] === '0') {\n      return;\n    }\n  }\n\n  return number;\n}","function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nimport isViablePhoneNumber from './isViablePhoneNumber'; // https://www.ietf.org/rfc/rfc3966.txt\n\n/**\r\n * @param  {string} text - Phone URI (RFC 3966).\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\n\nexport function parseRFC3966(text) {\n  var number;\n  var ext; // Replace \"tel:\" with \"tel=\" for parsing convenience.\n\n  text = text.replace(/^tel:/, 'tel=');\n\n  for (var _iterator = text.split(';'), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var part = _ref;\n\n    var _part$split = part.split('='),\n        _part$split2 = _slicedToArray(_part$split, 2),\n        name = _part$split2[0],\n        value = _part$split2[1];\n\n    switch (name) {\n      case 'tel':\n        number = value;\n        break;\n\n      case 'ext':\n        ext = value;\n        break;\n\n      case 'phone-context':\n        // Only \"country contexts\" are supported.\n        // \"Domain contexts\" are ignored.\n        if (value[0] === '+') {\n          number = value + number;\n        }\n\n        break;\n    }\n  } // If the phone number is not viable, then abort.\n\n\n  if (!isViablePhoneNumber(number)) {\n    return {};\n  }\n\n  var result = {\n    number: number\n  };\n\n  if (ext) {\n    result.ext = ext;\n  }\n\n  return result;\n}\n/**\r\n * @param  {object} - `{ ?number, ?extension }`.\r\n * @return {string} Phone URI (RFC 3966).\r\n */\n\nexport function formatRFC3966(_ref2) {\n  var number = _ref2.number,\n      ext = _ref2.ext;\n\n  if (!number) {\n    return '';\n  }\n\n  if (number[0] !== '+') {\n    throw new Error(\"\\\"formatRFC3966()\\\" expects \\\"number\\\" to be in E.164 format.\");\n  }\n\n  return \"tel:\".concat(number).concat(ext ? ';ext=' + ext : '');\n}","function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n} // This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\n\n\nimport { VALID_PUNCTUATION } from './constants';\nimport { matchesEntirely } from './util';\nimport Metadata from './metadata';\nimport { getIDDPrefix } from './IDD';\nimport { formatRFC3966 } from './RFC3966';\nvar DEFAULT_OPTIONS = {\n  formatExtension: function formatExtension(formattedNumber, extension, metadata) {\n    return \"\".concat(formattedNumber).concat(metadata.ext()).concat(extension);\n  } // Formats a phone number\n  //\n  // Example use cases:\n  //\n  // ```js\n  // formatNumber('8005553535', 'RU', 'INTERNATIONAL')\n  // formatNumber('8005553535', 'RU', 'INTERNATIONAL', metadata)\n  // formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL')\n  // formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL', metadata)\n  // formatNumber('+78005553535', 'NATIONAL')\n  // formatNumber('+78005553535', 'NATIONAL', metadata)\n  // ```\n  //\n\n};\nexport default function formatNumber(input, format, options, metadata) {\n  // Apply default options.\n  if (options) {\n    options = _objectSpread({}, DEFAULT_OPTIONS, options);\n  } else {\n    options = DEFAULT_OPTIONS;\n  }\n\n  metadata = new Metadata(metadata);\n\n  if (input.country && input.country !== '001') {\n    // Validate `input.country`.\n    if (!metadata.hasCountry(input.country)) {\n      throw new Error(\"Unknown country: \".concat(input.country));\n    }\n\n    metadata.country(input.country);\n  } else if (input.countryCallingCode) {\n    metadata.chooseCountryByCountryCallingCode(input.countryCallingCode);\n  } else return input.phone || '';\n\n  var countryCallingCode = metadata.countryCallingCode();\n  var nationalNumber = options.v2 ? input.nationalNumber : input.phone; // This variable should have been declared inside `case`s\n  // but Babel has a bug and it says \"duplicate variable declaration\".\n\n  var number;\n\n  switch (format) {\n    case 'NATIONAL':\n      // Legacy argument support.\n      // (`{ country: ..., phone: '' }`)\n      if (!nationalNumber) {\n        return '';\n      }\n\n      number = formatNationalNumber(nationalNumber, 'NATIONAL', metadata, options);\n      return addExtension(number, input.ext, metadata, options.formatExtension);\n\n    case 'INTERNATIONAL':\n      // Legacy argument support.\n      // (`{ country: ..., phone: '' }`)\n      if (!nationalNumber) {\n        return \"+\".concat(countryCallingCode);\n      }\n\n      number = formatNationalNumber(nationalNumber, 'INTERNATIONAL', metadata, options);\n      number = \"+\".concat(countryCallingCode, \" \").concat(number);\n      return addExtension(number, input.ext, metadata, options.formatExtension);\n\n    case 'E.164':\n      // `E.164` doesn't define \"phone number extensions\".\n      return \"+\".concat(countryCallingCode).concat(nationalNumber);\n\n    case 'RFC3966':\n      return formatRFC3966({\n        number: \"+\".concat(countryCallingCode).concat(nationalNumber),\n        ext: input.ext\n      });\n\n    case 'IDD':\n      if (!options.fromCountry) {\n        return; // throw new Error('`fromCountry` option not passed for IDD-prefixed formatting.')\n      }\n\n      var IDDPrefix = getIDDPrefix(options.fromCountry, undefined, metadata.metadata);\n\n      if (!IDDPrefix) {\n        return;\n      }\n\n      if (options.humanReadable) {\n        var formattedForSameCountryCallingCode = countryCallingCode && formatIDDSameCountryCallingCodeNumber(nationalNumber, metadata.countryCallingCode(), options.fromCountry, metadata, options);\n\n        if (formattedForSameCountryCallingCode) {\n          number = formattedForSameCountryCallingCode;\n        } else {\n          number = \"\".concat(IDDPrefix, \" \").concat(countryCallingCode, \" \").concat(formatNationalNumber(nationalNumber, 'INTERNATIONAL', metadata, options));\n        }\n\n        return addExtension(number, input.ext, metadata, options.formatExtension);\n      }\n\n      return \"\".concat(IDDPrefix).concat(countryCallingCode).concat(nationalNumber);\n\n    default:\n      throw new Error(\"Unknown \\\"format\\\" argument passed to \\\"formatNumber()\\\": \\\"\".concat(format, \"\\\"\"));\n  }\n} // This was originally set to $1 but there are some countries for which the\n// first group is not used in the national pattern (e.g. Argentina) so the $1\n// group does not match correctly.  Therefore, we use \\d, so that the first\n// group actually used in the pattern will be matched.\n\nexport var FIRST_GROUP_PATTERN = /(\\$\\d)/;\nexport function formatNationalNumberUsingFormat(number, format, useInternationalSeparator, useNationalPrefixFormattingRule, metadata) {\n  var formattedNumber = number.replace(new RegExp(format.pattern()), useInternationalSeparator ? format.internationalFormat() : useNationalPrefixFormattingRule && format.nationalPrefixFormattingRule() ? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule()) : format.format());\n\n  if (useInternationalSeparator) {\n    return applyInternationalSeparatorStyle(formattedNumber);\n  }\n\n  return formattedNumber;\n}\n\nfunction formatNationalNumber(number, formatAs, metadata, options) {\n  var format = chooseFormatForNumber(metadata.formats(), number);\n\n  if (!format) {\n    return number;\n  }\n\n  return formatNationalNumberUsingFormat(number, format, formatAs === 'INTERNATIONAL', format.nationalPrefixIsOptionalWhenFormattingInNationalFormat() && options.nationalPrefix === false ? false : true, metadata);\n}\n\nfunction chooseFormatForNumber(availableFormats, nationalNnumber) {\n  for (var _iterator = availableFormats, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var format = _ref; // Validate leading digits\n\n    if (format.leadingDigitsPatterns().length > 0) {\n      // The last leading_digits_pattern is used here, as it is the most detailed\n      var lastLeadingDigitsPattern = format.leadingDigitsPatterns()[format.leadingDigitsPatterns().length - 1]; // If leading digits don't match then move on to the next phone number format\n\n      if (nationalNnumber.search(lastLeadingDigitsPattern) !== 0) {\n        continue;\n      }\n    } // Check that the national number matches the phone number format regular expression\n\n\n    if (matchesEntirely(nationalNnumber, format.pattern())) {\n      return format;\n    }\n  }\n} // Removes brackets and replaces dashes with spaces.\n//\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\n//\n// For some reason Google's metadata contains `<intlFormat/>`s with brackets and dashes.\n// Meanwhile, there's no single opinion about using punctuation in international phone numbers.\n//\n// For example, Google's `<intlFormat/>` for USA is `+1 213-373-4253`.\n// And here's a quote from WikiPedia's \"North American Numbering Plan\" page:\n// https://en.wikipedia.org/wiki/North_American_Numbering_Plan\n//\n// \"The country calling code for all countries participating in the NANP is 1.\n// In international format, an NANP number should be listed as +1 301 555 01 00,\n// where 301 is an area code (Maryland).\"\n//\n// I personally prefer the international format without any punctuation.\n// For example, brackets are remnants of the old age, meaning that the\n// phone number part in brackets (so called \"area code\") can be omitted\n// if dialing within the same \"area\".\n// And hyphens were clearly introduced for splitting local numbers into memorizable groups.\n// For example, remembering \"5553535\" is difficult but \"555-35-35\" is much simpler.\n// Imagine a man taking a bus from home to work and seeing an ad with a phone number.\n// He has a couple of seconds to memorize that number until it passes by.\n// If it were spaces instead of hyphens the man wouldn't necessarily get it,\n// but with hyphens instead of spaces the grouping is more explicit.\n// I personally think that hyphens introduce visual clutter,\n// so I prefer replacing them with spaces in international numbers.\n// In the modern age all output is done on displays where spaces are clearly distinguishable\n// so hyphens can be safely replaced with spaces without losing any legibility.\n//\n\n\nexport function applyInternationalSeparatorStyle(local) {\n  return local.replace(new RegExp(\"[\".concat(VALID_PUNCTUATION, \"]+\"), 'g'), ' ').trim();\n}\n\nfunction addExtension(formattedNumber, ext, metadata, formatExtension) {\n  return ext ? formatExtension(formattedNumber, ext, metadata) : formattedNumber;\n}\n\nfunction formatIDDSameCountryCallingCodeNumber(number, toCountryCallingCode, fromCountry, toCountryMetadata, options) {\n  var fromCountryMetadata = new Metadata(toCountryMetadata.metadata);\n  fromCountryMetadata.country(fromCountry); // If calling within the same country calling code.\n\n  if (toCountryCallingCode === fromCountryMetadata.countryCallingCode()) {\n    // For NANPA regions, return the national format for these regions\n    // but prefix it with the country calling code.\n    if (toCountryCallingCode === '1') {\n      return toCountryCallingCode + ' ' + formatNationalNumber(number, 'NATIONAL', toCountryMetadata, options);\n    } // If regions share a country calling code, the country calling code need\n    // not be dialled. This also applies when dialling within a region, so this\n    // if clause covers both these cases. Technically this is the case for\n    // dialling from La Reunion to other overseas departments of France (French\n    // Guiana, Martinique, Guadeloupe), but not vice versa - so we don't cover\n    // this edge case for now and for those cases return the version including\n    // country calling code. Details here:\n    // http://www.petitfute.com/voyage/225-info-pratiques-reunion\n    //\n\n\n    return formatNationalNumber(number, 'NATIONAL', toCountryMetadata, options);\n  }\n}","function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nimport Metadata from './metadata';\nimport isPossibleNumber from './isPossibleNumber_';\nimport isValidNumber from './validate_';\nimport isValidNumberForRegion from './isValidNumberForRegion_';\nimport getNumberType from './getNumberType_';\nimport formatNumber from './format_';\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;\n\nvar PhoneNumber = /*#__PURE__*/function () {\n  function PhoneNumber(countryCallingCode, nationalNumber, metadata) {\n    _classCallCheck(this, PhoneNumber);\n\n    if (!countryCallingCode) {\n      throw new TypeError('`country` or `countryCallingCode` not passed');\n    }\n\n    if (!nationalNumber) {\n      throw new TypeError('`nationalNumber` not passed');\n    }\n\n    var _metadata = new Metadata(metadata); // If country code is passed then derive `countryCallingCode` from it.\n    // Also store the country code as `.country`.\n\n\n    if (isCountryCode(countryCallingCode)) {\n      this.country = countryCallingCode;\n\n      _metadata.country(countryCallingCode);\n\n      countryCallingCode = _metadata.countryCallingCode();\n    } else {\n      /* istanbul ignore if */\n      if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n        if (_metadata.isNonGeographicCallingCode(countryCallingCode)) {\n          this.country = '001';\n        }\n      }\n    }\n\n    this.countryCallingCode = countryCallingCode;\n    this.nationalNumber = nationalNumber;\n    this.number = '+' + this.countryCallingCode + this.nationalNumber;\n    this.metadata = metadata;\n  }\n\n  _createClass(PhoneNumber, [{\n    key: \"isPossible\",\n    value: function isPossible() {\n      return isPossibleNumber(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid() {\n      return isValidNumber(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"isNonGeographic\",\n    value: function isNonGeographic() {\n      var metadata = new Metadata(this.metadata);\n      return metadata.isNonGeographicCallingCode(this.countryCallingCode);\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(phoneNumber) {\n      return this.number === phoneNumber.number && this.ext === phoneNumber.ext;\n    } // // Is just an alias for `this.isValid() && this.country === country`.\n    // // https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\n    // isValidForRegion(country) {\n    // \treturn isValidNumberForRegion(this, country, { v2: true }, this.metadata)\n    // }\n\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      return getNumberType(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"format\",\n    value: function format(_format, options) {\n      return formatNumber(this, _format, options ? _objectSpread({}, options, {\n        v2: true\n      }) : {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"formatNational\",\n    value: function formatNational(options) {\n      return this.format('NATIONAL', options);\n    }\n  }, {\n    key: \"formatInternational\",\n    value: function formatInternational(options) {\n      return this.format('INTERNATIONAL', options);\n    }\n  }, {\n    key: \"getURI\",\n    value: function getURI(options) {\n      return this.format('RFC3966', options);\n    }\n  }]);\n\n  return PhoneNumber;\n}();\n\nexport { PhoneNumber as default };\n\nvar isCountryCode = function isCountryCode(value) {\n  return /^[A-Z]{2}$/.test(value);\n};","import Metadata from './metadata';\nimport { matchesEntirely } from './util';\nimport getNumberType from './getNumberType_';\n/**\r\n * Checks if a given phone number is valid.\r\n *\r\n * If the `number` is a string, it will be parsed to an object,\r\n * but only if it contains only valid phone number characters (including punctuation).\r\n * If the `number` is an object, it is used as is.\r\n *\r\n * The optional `defaultCountry` argument is the default country.\r\n * I.e. it does not restrict to just that country,\r\n * e.g. in those cases where several countries share\r\n * the same phone numbering rules (NANPA, Britain, etc).\r\n * For example, even though the number `07624 369230`\r\n * belongs to the Isle of Man (\"IM\" country code)\r\n * calling `isValidNumber('07624369230', 'GB', metadata)`\r\n * still returns `true` because the country is not restricted to `GB`,\r\n * it's just that `GB` is the default one for the phone numbering rules.\r\n * For restricting the country see `isValidNumberForRegion()`\r\n * though restricting a country might not be a good idea.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * isValidNumber('+78005553535', metadata)\r\n * isValidNumber('8005553535', 'RU', metadata)\r\n * isValidNumber('88005553535', 'RU', metadata)\r\n * isValidNumber({ phone: '8005553535', country: 'RU' }, metadata)\r\n * ```\r\n */\n\nexport default function isValidNumber(input, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {};\n  metadata = new Metadata(metadata); // This is just to support `isValidNumber({})`\n  // for cases when `parseNumber()` returns `{}`.\n\n  if (!input.country) {\n    return false;\n  }\n\n  metadata.selectNumberingPlan(input.country, input.countryCallingCode); // By default, countries only have type regexps when it's required for\n  // distinguishing different countries having the same `countryCallingCode`.\n\n  if (metadata.hasTypes()) {\n    return getNumberType(input, options, metadata.metadata) !== undefined;\n  } // If there are no type regexps for this country in metadata then use\n  // `nationalNumberPattern` as a \"better than nothing\" replacement.\n\n\n  var national_number = options.v2 ? input.nationalNumber : input.phone;\n  return matchesEntirely(national_number, metadata.nationalNumberPattern());\n}","// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\nimport { VALID_DIGITS, PLUS_CHARS, MIN_LENGTH_FOR_NSN, MAX_LENGTH_FOR_NSN, MAX_LENGTH_COUNTRY_CODE } from './constants';\nimport { matchesEntirely } from './util';\nimport ParseError from './ParseError';\nimport Metadata from './metadata';\nimport isViablePhoneNumber from './isViablePhoneNumber';\nimport { extractExtension } from './extension';\nimport parseIncompletePhoneNumber from './parseIncompletePhoneNumber';\nimport getCountryCallingCode from './getCountryCallingCode';\nimport getNumberType, { checkNumberLengthForType } from './getNumberType_';\nimport { isPossibleNumber } from './isPossibleNumber_';\nimport { stripIDDPrefix } from './IDD';\nimport { parseRFC3966 } from './RFC3966';\nimport PhoneNumber from './PhoneNumber'; // We don't allow input strings for parsing to be longer than 250 chars.\n// This prevents malicious input from consuming CPU.\n\nvar MAX_INPUT_STRING_LENGTH = 250; // This consists of the plus symbol, digits, and arabic-indic digits.\n\nvar PHONE_NUMBER_START_PATTERN = new RegExp('[' + PLUS_CHARS + VALID_DIGITS + ']'); // Regular expression of trailing characters that we want to remove.\n\nvar AFTER_PHONE_NUMBER_END_PATTERN = new RegExp('[^' + VALID_DIGITS + ']+$');\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false; // `options`:\n//  {\n//    country:\n//    {\n//      restrict - (a two-letter country code)\n//                 the phone number must be in this country\n//\n//      default - (a two-letter country code)\n//                default country to use for phone number parsing and validation\n//                (if no country code could be derived from the phone number)\n//    }\n//  }\n//\n// Returns `{ country, number }`\n//\n// Example use cases:\n//\n// ```js\n// parse('8 (800) 555-35-35', 'RU')\n// parse('8 (800) 555-35-35', 'RU', metadata)\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } })\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } }, metadata)\n// parse('+7 800 555 35 35')\n// parse('+7 800 555 35 35', metadata)\n// ```\n//\n\nexport default function parse(text, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {};\n  metadata = new Metadata(metadata); // Validate `defaultCountry`.\n\n  if (options.defaultCountry && !metadata.hasCountry(options.defaultCountry)) {\n    if (options.v2) {\n      throw new ParseError('INVALID_COUNTRY');\n    }\n\n    throw new Error(\"Unknown country: \".concat(options.defaultCountry));\n  } // Parse the phone number.\n\n\n  var _parseInput = parseInput(text, options.v2),\n      formattedPhoneNumber = _parseInput.number,\n      ext = _parseInput.ext; // If the phone number is not viable then return nothing.\n\n\n  if (!formattedPhoneNumber) {\n    if (options.v2) {\n      throw new ParseError('NOT_A_NUMBER');\n    }\n\n    return {};\n  }\n\n  var _parsePhoneNumber = parsePhoneNumber(formattedPhoneNumber, options.defaultCountry, options.defaultCallingCode, metadata),\n      country = _parsePhoneNumber.country,\n      nationalNumber = _parsePhoneNumber.nationalNumber,\n      countryCallingCode = _parsePhoneNumber.countryCallingCode,\n      carrierCode = _parsePhoneNumber.carrierCode;\n\n  if (!metadata.hasSelectedNumberingPlan()) {\n    if (options.v2) {\n      throw new ParseError('INVALID_COUNTRY');\n    }\n\n    return {};\n  } // Validate national (significant) number length.\n\n\n  if (!nationalNumber || nationalNumber.length < MIN_LENGTH_FOR_NSN) {\n    // Won't throw here because the regexp already demands length > 1.\n\n    /* istanbul ignore if */\n    if (options.v2) {\n      throw new ParseError('TOO_SHORT');\n    } // Google's demo just throws an error in this case.\n\n\n    return {};\n  } // Validate national (significant) number length.\n  //\n  // A sidenote:\n  //\n  // They say that sometimes national (significant) numbers\n  // can be longer than `MAX_LENGTH_FOR_NSN` (e.g. in Germany).\n  // https://github.com/googlei18n/libphonenumber/blob/7e1748645552da39c4e1ba731e47969d97bdb539/resources/phonenumber.proto#L36\n  // Such numbers will just be discarded.\n  //\n\n\n  if (nationalNumber.length > MAX_LENGTH_FOR_NSN) {\n    if (options.v2) {\n      throw new ParseError('TOO_LONG');\n    } // Google's demo just throws an error in this case.\n\n\n    return {};\n  }\n\n  if (options.v2) {\n    var phoneNumber = new PhoneNumber(countryCallingCode, nationalNumber, metadata.metadata);\n\n    if (country) {\n      phoneNumber.country = country;\n    }\n\n    if (carrierCode) {\n      phoneNumber.carrierCode = carrierCode;\n    }\n\n    if (ext) {\n      phoneNumber.ext = ext;\n    }\n\n    return phoneNumber;\n  } // Check if national phone number pattern matches the number.\n  // National number pattern is different for each country,\n  // even for those ones which are part of the \"NANPA\" group.\n\n\n  var valid = (options.extended ? metadata.hasSelectedNumberingPlan() : country) ? matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) : false;\n\n  if (!options.extended) {\n    return valid ? result(country, nationalNumber, ext) : {};\n  }\n\n  return {\n    country: country,\n    countryCallingCode: countryCallingCode,\n    carrierCode: carrierCode,\n    valid: valid,\n    possible: valid ? true : options.extended === true && metadata.possibleLengths() && isPossibleNumber(nationalNumber, countryCallingCode !== undefined, metadata) ? true : false,\n    phone: nationalNumber,\n    ext: ext\n  };\n}\n/**\r\n * Extracts a formatted phone number from text.\r\n * Doesn't guarantee that the extracted phone number\r\n * is a valid phone number (for example, doesn't validate its length).\r\n * @param  {string} text\r\n * @param  {boolean} throwOnError — By default, it won't throw if the text is too long.\r\n * @return {string}\r\n * @example\r\n * // Returns \"(213) 373-4253\".\r\n * extractFormattedPhoneNumber(\"Call (213) 373-4253 for assistance.\")\r\n */\n\nexport function extractFormattedPhoneNumber(text, throwOnError) {\n  if (!text) {\n    return;\n  }\n\n  if (text.length > MAX_INPUT_STRING_LENGTH) {\n    if (throwOnError) {\n      throw new ParseError('TOO_LONG');\n    }\n\n    return;\n  } // Attempt to extract a possible number from the string passed in\n\n\n  var startsAt = text.search(PHONE_NUMBER_START_PATTERN);\n\n  if (startsAt < 0) {\n    return;\n  }\n\n  return text // Trim everything to the left of the phone number\n  .slice(startsAt) // Remove trailing non-numerical characters\n  .replace(AFTER_PHONE_NUMBER_END_PATTERN, '');\n}\n/**\r\n * Strips any national prefix (such as 0, 1) present in a\r\n * (possibly incomplete) number provided.\r\n * \"Carrier codes\" are only used  in Colombia and Brazil,\r\n * and only when dialing within those countries from a mobile phone to a fixed line number.\r\n * Sometimes it won't actually strip national prefix\r\n * and will instead prepend some digits to the `number`:\r\n * for example, when number `2345678` is passed with `VI` country selected,\r\n * it will return `{ number: \"3402345678\" }`, because `340` area code is prepended.\r\n * @param {string} number — National number digits.\r\n * @param {object} metadata — Metadata with country selected.\r\n * @return {object} `{ nationalNumber: string, carrierCode: string? }`.\r\n */\n\nexport function stripNationalPrefixAndCarrierCode(number, metadata) {\n  if (number && metadata.nationalPrefixForParsing()) {\n    // See METADATA.md for the description of\n    // `national_prefix_for_parsing` and `national_prefix_transform_rule`.\n    // Attempt to parse the first digits as a national prefix.\n    var prefixPattern = new RegExp('^(?:' + metadata.nationalPrefixForParsing() + ')');\n    var prefixMatch = prefixPattern.exec(number);\n\n    if (prefixMatch) {\n      var nationalNumber;\n      var carrierCode; // If a \"capturing group\" didn't match\n      // then its element in `prefixMatch[]` array will be `undefined`.\n\n      var capturedGroupsCount = prefixMatch.length - 1;\n\n      if (metadata.nationalPrefixTransformRule() && capturedGroupsCount > 0 && prefixMatch[capturedGroupsCount]) {\n        nationalNumber = number.replace(prefixPattern, metadata.nationalPrefixTransformRule()); // Carrier code is the last captured group,\n        // but only when there's more than one captured group.\n\n        if (capturedGroupsCount > 1 && prefixMatch[capturedGroupsCount]) {\n          carrierCode = prefixMatch[1];\n        }\n      } // If it's a simple-enough case then just\n      // strip the national prefix from the number.\n      else {\n          // National prefix is the whole substring matched by\n          // the `national_prefix_for_parsing` regexp.\n          var nationalPrefix = prefixMatch[0];\n          nationalNumber = number.slice(nationalPrefix.length); // Carrier code is the last captured group.\n\n          if (capturedGroupsCount > 0) {\n            carrierCode = prefixMatch[1];\n          }\n        } // We require that the national (significant) number remaining after\n      // stripping the national prefix and carrier code be long enough\n      // to be a possible length for the region. Otherwise, we don't do\n      // the stripping, since the original number could be a valid number.\n      // For example, in some countries (Russia, Belarus) the same digit\n      // could be both a national prefix and a leading digit of a valid\n      // national phone number, like `8` is the national prefix for Russia\n      // and `800 555 35 35` is a valid national (significant) number.\n\n\n      if (matchesEntirely(number, metadata.nationalNumberPattern()) && !matchesEntirely(nationalNumber, metadata.nationalNumberPattern())) {// Don't strip national prefix or carrier code.\n      } else {\n        return {\n          nationalNumber: nationalNumber,\n          carrierCode: carrierCode\n        };\n      }\n    }\n  }\n\n  return {\n    nationalNumber: number\n  };\n}\nexport function findCountryCode(callingCode, nationalPhoneNumber, metadata) {\n  /* istanbul ignore if */\n  if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n    if (metadata.isNonGeographicCallingCode(callingCode)) {\n      return '001';\n    }\n  } // Is always non-empty, because `callingCode` is always valid\n\n\n  var possibleCountries = metadata.getCountryCodesForCallingCode(callingCode);\n\n  if (!possibleCountries) {\n    return;\n  } // If there's just one country corresponding to the country code,\n  // then just return it, without further phone number digits validation.\n\n\n  if (possibleCountries.length === 1) {\n    return possibleCountries[0];\n  }\n\n  return _findCountryCode(possibleCountries, nationalPhoneNumber, metadata.metadata);\n} // Changes `metadata` `country`.\n\nfunction _findCountryCode(possibleCountries, nationalPhoneNumber, metadata) {\n  metadata = new Metadata(metadata);\n\n  for (var _iterator = possibleCountries, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var country = _ref;\n    metadata.country(country); // Leading digits check would be the simplest one\n\n    if (metadata.leadingDigits()) {\n      if (nationalPhoneNumber && nationalPhoneNumber.search(metadata.leadingDigits()) === 0) {\n        return country;\n      }\n    } // Else perform full validation with all of those\n    // fixed-line/mobile/etc regular expressions.\n    else if (getNumberType({\n        phone: nationalPhoneNumber,\n        country: country\n      }, undefined, metadata.metadata)) {\n        return country;\n      }\n  }\n}\n/**\r\n * @param  {string} text - Input.\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\n\n\nfunction parseInput(text, v2) {\n  // Parse RFC 3966 phone number URI.\n  if (text && text.indexOf('tel:') === 0) {\n    return parseRFC3966(text);\n  }\n\n  var number = extractFormattedPhoneNumber(text, v2); // If the phone number is not viable, then abort.\n\n  if (!number || !isViablePhoneNumber(number)) {\n    return {};\n  } // Attempt to parse extension first, since it doesn't require region-specific\n  // data and we want to have the non-normalised number here.\n\n\n  var withExtensionStripped = extractExtension(number);\n\n  if (withExtensionStripped.ext) {\n    return withExtensionStripped;\n  }\n\n  return {\n    number: number\n  };\n}\n/**\r\n * Creates `parse()` result object.\r\n */\n\n\nfunction result(country, nationalNumber, ext) {\n  var result = {\n    country: country,\n    phone: nationalNumber\n  };\n\n  if (ext) {\n    result.ext = ext;\n  }\n\n  return result;\n}\n/**\r\n * Parses a viable phone number.\r\n * @param {string} formattedPhoneNumber — Example: \"(213) 373-4253\".\r\n * @param {string} [defaultCountry]\r\n * @param {string} [defaultCallingCode]\r\n * @param {Metadata} metadata\r\n * @return {object} Returns `{ country: string?, countryCallingCode: string?, nationalNumber: string? }`.\r\n */\n\n\nfunction parsePhoneNumber(formattedPhoneNumber, defaultCountry, defaultCallingCode, metadata) {\n  // Extract calling code from phone number.\n  var _extractCountryCallin = extractCountryCallingCode(parseIncompletePhoneNumber(formattedPhoneNumber), defaultCountry, defaultCallingCode, metadata.metadata),\n      countryCallingCode = _extractCountryCallin.countryCallingCode,\n      number = _extractCountryCallin.number; // Choose a country by `countryCallingCode`.\n\n\n  var country;\n\n  if (countryCallingCode) {\n    metadata.chooseCountryByCountryCallingCode(countryCallingCode);\n  } // If `formattedPhoneNumber` is in \"national\" format\n  // then `number` is defined and `countryCallingCode` isn't.\n  else if (number && (defaultCountry || defaultCallingCode)) {\n      metadata.selectNumberingPlan(defaultCountry, defaultCallingCode);\n\n      if (defaultCountry) {\n        country = defaultCountry;\n      } else {\n        /* istanbul ignore if */\n        if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n          if (metadata.isNonGeographicCallingCode(defaultCallingCode)) {\n            country = '001';\n          }\n        }\n      }\n\n      countryCallingCode = defaultCallingCode || getCountryCallingCode(defaultCountry, metadata.metadata);\n    } else return {};\n\n  if (!number) {\n    return {\n      countryCallingCode: countryCallingCode\n    };\n  }\n\n  var _stripNationalPrefixA = stripNationalPrefixAndCarrierCodeFromCompleteNumber(parseIncompletePhoneNumber(number), metadata),\n      nationalNumber = _stripNationalPrefixA.nationalNumber,\n      carrierCode = _stripNationalPrefixA.carrierCode; // Sometimes there are several countries\n  // corresponding to the same country phone code\n  // (e.g. NANPA countries all having `1` country phone code).\n  // Therefore, to reliably determine the exact country,\n  // national (significant) number should have been parsed first.\n  //\n  // When `metadata.json` is generated, all \"ambiguous\" country phone codes\n  // get their countries populated with the full set of\n  // \"phone number type\" regular expressions.\n  //\n\n\n  var exactCountry = findCountryCode(countryCallingCode, nationalNumber, metadata);\n\n  if (exactCountry) {\n    country = exactCountry;\n    /* istanbul ignore if */\n\n    if (exactCountry === '001') {// Can't happen with `USE_NON_GEOGRAPHIC_COUNTRY_CODE` being `false`.\n      // If `USE_NON_GEOGRAPHIC_COUNTRY_CODE` is set to `true` for some reason,\n      // then remove the \"istanbul ignore if\".\n    } else {\n      metadata.country(country);\n    }\n  }\n\n  return {\n    country: country,\n    countryCallingCode: countryCallingCode,\n    nationalNumber: nationalNumber,\n    carrierCode: carrierCode\n  };\n}\n/**\r\n * Strips national prefix and carrier code from a complete phone number.\r\n * The difference from the non-\"FromCompleteNumber\" function is that\r\n * it won't extract national prefix if the resultant number is too short\r\n * to be a complete number for the selected phone numbering plan.\r\n * @param  {string} number — Complete phone number digits.\r\n * @param  {Metadata} metadata — Metadata with a phone numbering plan selected.\r\n * @return {object} `{ nationalNumber: string, carrierCode: string? }`.\r\n */\n\n\nexport function stripNationalPrefixAndCarrierCodeFromCompleteNumber(number, metadata) {\n  // Parsing national prefixes and carrier codes\n  // is only required for local phone numbers\n  // but some people don't understand that\n  // and sometimes write international phone numbers\n  // with national prefixes (or maybe even carrier codes).\n  // http://ucken.blogspot.ru/2016/03/trunk-prefixes-in-skype4b.html\n  // Google's original library forgives such mistakes\n  // and so does this library, because it has been requested:\n  // https://github.com/catamphetamine/libphonenumber-js/issues/127\n  var _stripNationalPrefixA2 = stripNationalPrefixAndCarrierCode(parseIncompletePhoneNumber(number), metadata),\n      nationalNumber = _stripNationalPrefixA2.nationalNumber,\n      carrierCode = _stripNationalPrefixA2.carrierCode; // If a national prefix has been extracted, check to see\n  // if the resultant number isn't too short.\n\n\n  if (nationalNumber.length !== number.length + (carrierCode ? carrierCode.length : 0)) {\n    // If not using legacy generated metadata (before version `1.0.18`)\n    // then it has \"possible lengths\", so use those to validate the number length.\n    if (metadata.possibleLengths()) {\n      // \"We require that the NSN remaining after stripping the national prefix and\n      // carrier code be long enough to be a possible length for the region.\n      // Otherwise, we don't do the stripping, since the original number could be\n      // a valid short number.\"\n      // https://github.com/google/libphonenumber/blob/876268eb1ad6cdc1b7b5bef17fc5e43052702d57/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L3236-L3250\n      switch (checkNumberLengthForType(nationalNumber, undefined, metadata)) {\n        case 'TOO_SHORT':\n        case 'INVALID_LENGTH':\n          // case 'IS_POSSIBLE_LOCAL_ONLY':\n          // Don't strip the national prefix.\n          return {\n            nationalNumber: number\n          };\n      }\n    }\n  }\n\n  return {\n    nationalNumber: nationalNumber,\n    carrierCode: carrierCode\n  };\n}\n/**\r\n * Converts a phone number digits (possibly with a `+`)\r\n * into a calling code and the rest phone number digits.\r\n * The \"rest phone number digits\" could include\r\n * a national prefix, carrier code, and national\r\n * (significant) number.\r\n * @param  {string} number — Phone number digits (possibly with a `+`).\r\n * @param  {string} [country] — Default country.\r\n * @param  {string} [callingCode] — Default calling code (some phone numbering plans are non-geographic).\r\n * @param  {object} metadata\r\n * @return {object} `{ countryCallingCode: string?, number: string }`\r\n * @example\r\n * // Returns `{ countryCallingCode: \"1\", number: \"2133734253\" }`.\r\n * extractCountryCallingCode('2133734253', 'US', null, metadata)\r\n * extractCountryCallingCode('2133734253', null, '1', metadata)\r\n * extractCountryCallingCode('+12133734253', null, null, metadata)\r\n * extractCountryCallingCode('+12133734253', 'RU', null, metadata)\r\n */\n\nexport function extractCountryCallingCode(number, country, callingCode, metadata) {\n  if (!number) {\n    return {};\n  } // If this is not an international phone number,\n  // then either extract an \"IDD\" prefix, or extract a\n  // country calling code from a number by autocorrecting it\n  // by prepending a leading `+` in cases when it starts\n  // with the country calling code.\n  // https://wikitravel.org/en/International_dialling_prefix\n  // https://github.com/catamphetamine/libphonenumber-js/issues/376\n\n\n  if (number[0] !== '+') {\n    // Convert an \"out-of-country\" dialing phone number\n    // to a proper international phone number.\n    var numberWithoutIDD = stripIDDPrefix(number, country, callingCode, metadata); // If an IDD prefix was stripped then\n    // convert the number to international one\n    // for subsequent parsing.\n\n    if (numberWithoutIDD && numberWithoutIDD !== number) {\n      number = '+' + numberWithoutIDD;\n    } else {\n      // Check to see if the number starts with the country calling code\n      // for the default country. If so, we remove the country calling code,\n      // and do some checks on the validity of the number before and after.\n      // https://github.com/catamphetamine/libphonenumber-js/issues/376\n      if (country || callingCode) {\n        var _extractCountryCallin2 = extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(number, country, callingCode, metadata),\n            countryCallingCode = _extractCountryCallin2.countryCallingCode,\n            shorterNumber = _extractCountryCallin2.number;\n\n        if (countryCallingCode) {\n          return {\n            countryCallingCode: countryCallingCode,\n            number: shorterNumber\n          };\n        }\n      }\n\n      return {\n        number: number\n      };\n    }\n  } // Fast abortion: country codes do not begin with a '0'\n\n\n  if (number[1] === '0') {\n    return {};\n  }\n\n  metadata = new Metadata(metadata); // The thing with country phone codes\n  // is that they are orthogonal to each other\n  // i.e. there's no such country phone code A\n  // for which country phone code B exists\n  // where B starts with A.\n  // Therefore, while scanning digits,\n  // if a valid country code is found,\n  // that means that it is the country code.\n  //\n\n  var i = 2;\n\n  while (i - 1 <= MAX_LENGTH_COUNTRY_CODE && i <= number.length) {\n    var _countryCallingCode = number.slice(1, i);\n\n    if (metadata.hasCallingCode(_countryCallingCode)) {\n      metadata.selectNumberingPlan(undefined, _countryCallingCode);\n      return {\n        countryCallingCode: _countryCallingCode,\n        number: number.slice(i)\n      };\n    }\n\n    i++;\n  }\n\n  return {};\n}\n/**\r\n * Sometimes some people incorrectly input international phone numbers\r\n * without the leading `+`. This function corrects such input.\r\n * @param  {string} number — Phone number digits.\r\n * @param  {string?} country\r\n * @param  {string?} callingCode\r\n * @param  {object} metadata\r\n * @return {object} `{ countryCallingCode: string?, number: string }`.\r\n */\n\nexport function extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(number, country, callingCode, metadata) {\n  var countryCallingCode = country ? getCountryCallingCode(country, metadata) : callingCode;\n\n  if (number.indexOf(countryCallingCode) === 0) {\n    metadata = new Metadata(metadata);\n    metadata.selectNumberingPlan(country, callingCode);\n    var possibleShorterNumber = number.slice(countryCallingCode.length);\n\n    var _stripNationalPrefixA3 = stripNationalPrefixAndCarrierCode(possibleShorterNumber, metadata),\n        possibleShorterNationalNumber = _stripNationalPrefixA3.nationalNumber;\n\n    var _stripNationalPrefixA4 = stripNationalPrefixAndCarrierCode(number, metadata),\n        nationalNumber = _stripNationalPrefixA4.nationalNumber; // If the number was not valid before but is valid now,\n    // or if it was too long before, we consider the number\n    // with the country calling code stripped to be a better result\n    // and keep that instead.\n    // For example, in Germany (+49), `49` is a valid area code,\n    // so if a number starts with `49`, it could be both a valid\n    // national German number or an international number without\n    // a leading `+`.\n\n\n    if (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) && matchesEntirely(possibleShorterNationalNumber, metadata.nationalNumberPattern()) || checkNumberLengthForType(nationalNumber, undefined, metadata) === 'TOO_LONG') {\n      return {\n        countryCallingCode: countryCallingCode,\n        number: possibleShorterNumber\n      };\n    }\n  }\n\n  return {\n    number: number\n  };\n}","function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport parseNumber from './parse_';\nexport default function parsePhoneNumber(text, options, metadata) {\n  return parseNumber(text, _objectSpread({}, options, {\n    v2: true\n  }), metadata);\n}","function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nimport parsePhoneNumber_ from './parsePhoneNumber_';\nexport default function parsePhoneNumber() {\n  var _normalizeArguments = normalizeArguments(arguments),\n      text = _normalizeArguments.text,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  return parsePhoneNumber_(text, options, metadata);\n}\nexport function normalizeArguments(args) {\n  var _Array$prototype$slic = Array.prototype.slice.call(args),\n      _Array$prototype$slic2 = _slicedToArray(_Array$prototype$slic, 4),\n      arg_1 = _Array$prototype$slic2[0],\n      arg_2 = _Array$prototype$slic2[1],\n      arg_3 = _Array$prototype$slic2[2],\n      arg_4 = _Array$prototype$slic2[3];\n\n  var text;\n  var options;\n  var metadata; // If the phone number is passed as a string.\n  // `parsePhoneNumber('88005553535', ...)`.\n\n  if (typeof arg_1 === 'string') {\n    text = arg_1;\n  } else throw new TypeError('A text for parsing must be a string.'); // If \"default country\" argument is being passed then move it to `options`.\n  // `parsePhoneNumber('88005553535', 'RU', [options], metadata)`.\n\n\n  if (!arg_2 || typeof arg_2 === 'string') {\n    if (arg_4) {\n      options = arg_3;\n      metadata = arg_4;\n    } else {\n      options = undefined;\n      metadata = arg_3;\n    }\n\n    if (arg_2) {\n      options = _objectSpread({\n        defaultCountry: arg_2\n      }, options);\n    }\n  } // `defaultCountry` is not passed.\n  // Example: `parsePhoneNumber('+78005553535', [options], metadata)`.\n  else if (isObject(arg_2)) {\n      if (arg_3) {\n        options = arg_2;\n        metadata = arg_3;\n      } else {\n        metadata = arg_2;\n      }\n    } else throw new Error(\"Invalid second argument: \".concat(arg_2));\n\n  return {\n    text: text,\n    options: options,\n    metadata: metadata\n  };\n} // Otherwise istanbul would show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\nvar isObject = function isObject(_) {\n  return _typeof(_) === 'object';\n};","function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport parsePhoneNumber from './parsePhoneNumber_';\nimport ParseError from './ParseError';\nimport { isSupportedCountry } from './metadata';\nexport default function parsePhoneNumberFromString(text, options, metadata) {\n  // Validate `defaultCountry`.\n  if (options && options.defaultCountry && !isSupportedCountry(options.defaultCountry, metadata)) {\n    options = _objectSpread({}, options, {\n      defaultCountry: undefined\n    });\n  } // Parse phone number.\n\n\n  try {\n    return parsePhoneNumber(text, options, metadata);\n  } catch (error) {\n    /* istanbul ignore else */\n    if (error instanceof ParseError) {//\n    } else {\n      throw error;\n    }\n  }\n}","import { normalizeArguments } from './parsePhoneNumber';\nimport parsePhoneNumberFromString_ from './parsePhoneNumberFromString_';\nexport default function parsePhoneNumberFromString() {\n  var _normalizeArguments = normalizeArguments(arguments),\n      text = _normalizeArguments.text,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  return parsePhoneNumberFromString_(text, options, metadata);\n}","import { parsePhoneNumberFromString } from 'libphonenumber-js/core';\nexport default function isValidPhoneNumber(value, metadata) {\n  if (!value) {\n    return false;\n  }\n\n  var phoneNumber = parsePhoneNumberFromString(value, metadata);\n\n  if (!phoneNumber) {\n    return false;\n  }\n\n  return phoneNumber.isValid();\n}","import Metadata from './metadata';\nexport default function getCountries(metadata) {\n  return new Metadata(metadata).getCountries();\n}","// Counts all occurences of a symbol in a string\nexport function count_occurences(symbol, string) {\n  var count = 0; // Using `.split('')` here instead of normal `for ... of`\n  // because the importing application doesn't neccessarily include an ES6 polyfill.\n  // The `.split('')` approach discards \"exotic\" UTF-8 characters\n  // (the ones consisting of four bytes)\n  // but template placeholder characters don't fall into that range\n  // so skipping such miscellaneous \"exotic\" characters\n  // won't matter here for just counting placeholder character occurrences.\n\n  for (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var character = _ref;\n\n    if (character === symbol) {\n      count++;\n    }\n  }\n\n  return count;\n}","import { count_occurences } from './helpers';\nexport default function close_braces(retained_template, template) {\n  var placeholder = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'x';\n  var empty_placeholder = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ' ';\n  var cut_before = retained_template.length;\n  var opening_braces = count_occurences('(', retained_template);\n  var closing_braces = count_occurences(')', retained_template);\n  var dangling_braces = opening_braces - closing_braces;\n\n  while (dangling_braces > 0 && cut_before < template.length) {\n    retained_template += template[cut_before].replace(placeholder, empty_placeholder);\n\n    if (template[cut_before] === ')') {\n      dangling_braces--;\n    }\n\n    cut_before++;\n  }\n\n  return retained_template;\n} //# sourceMappingURL=close braces.js.map","import template_formatter from './template formatter'; // Formats `value` value preserving `caret` at the same character.\n//\n// `{ value, caret }` attribute is the result of `parse()` function call.\n//\n// Returns `{ text, caret }` where the new `caret` is the caret position\n// inside `text` text corresponding to the original `caret` position inside `value`.\n//\n// `formatter(value)` is a function returning `{ text, template }`.\n//\n// `text` is the `value` value formatted using `template`.\n// It may either cut off the non-filled right part of the `template`\n// or it may fill the non-filled character placeholders\n// in the right part of the `template` with `spacer`\n// which is a space (' ') character by default.\n//\n// `template` is the template used to format the `value`.\n// It can be either a full-length template or a partial template.\n//\n// `formatter` can also be a string — a `template`\n// where character placeholders are denoted by 'x'es.\n// In this case `formatter` function is automatically created.\n//\n// Example:\n//\n// `value` is '880',\n// `caret` is `2` (before the first `0`)\n//\n// `formatter` is `'880' =>\n//   { text: '8 (80 )', template: 'x (xxx) xxx-xx-xx' }`\n//\n// The result is `{ text: '8 (80 )', caret: 4 }`.\n//\n\nexport default function format(value, caret, formatter) {\n  if (typeof formatter === 'string') {\n    formatter = template_formatter(formatter);\n  }\n\n  var _ref = formatter(value) || {},\n      text = _ref.text,\n      template = _ref.template;\n\n  if (text === undefined) {\n    text = value;\n  }\n\n  if (template) {\n    if (caret === undefined) {\n      caret = text.length;\n    } else {\n      var index = 0;\n      var found = false;\n      var possibly_last_input_character_index = -1;\n\n      while (index < text.length && index < template.length) {\n        // Character placeholder found\n        if (text[index] !== template[index]) {\n          if (caret === 0) {\n            found = true;\n            caret = index;\n            break;\n          }\n\n          possibly_last_input_character_index = index;\n          caret--;\n        }\n\n        index++;\n      } // If the caret was positioned after last input character,\n      // then the text caret index is just after the last input character.\n\n\n      if (!found) {\n        caret = possibly_last_input_character_index + 1;\n      }\n    }\n  }\n\n  return {\n    text: text,\n    caret: caret\n  };\n}","import { count_occurences } from './helpers';\nimport close_braces from './close braces'; // Takes a `template` where character placeholders\n// are denoted by 'x'es (e.g. 'x (xxx) xxx-xx-xx').\n//\n// Returns a function which takes `value` characters\n// and returns the `template` filled with those characters.\n// If the `template` can only be partially filled\n// then it is cut off.\n//\n// If `should_close_braces` is `true`,\n// then it will also make sure all dangling braces are closed,\n// e.g. \"8 (8\" -> \"8 (8  )\" (iPhone style phone number input).\n//\n\nexport default function (template) {\n  var placeholder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'x';\n  var should_close_braces = arguments.length > 2 ? arguments[2] : undefined;\n\n  if (!template) {\n    return function (value) {\n      return {\n        text: value\n      };\n    };\n  }\n\n  var characters_in_template = count_occurences(placeholder, template);\n  return function (value) {\n    if (!value) {\n      return {\n        text: '',\n        template: template\n      };\n    }\n\n    var value_character_index = 0;\n    var filled_in_template = ''; // Using `.split('')` here instead of normal `for ... of`\n    // because the importing application doesn't neccessarily include an ES6 polyfill.\n    // The `.split('')` approach discards \"exotic\" UTF-8 characters\n    // (the ones consisting of four bytes)\n    // but template placeholder characters don't fall into that range\n    // and appending UTF-8 characters to a string in parts still works.\n\n    for (var _iterator = template.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var character = _ref;\n\n      if (character !== placeholder) {\n        filled_in_template += character;\n        continue;\n      }\n\n      filled_in_template += value[value_character_index];\n      value_character_index++; // If the last available value character has been filled in,\n      // then return the filled in template\n      // (either trim the right part or retain it,\n      //  if no more character placeholders in there)\n\n      if (value_character_index === value.length) {\n        // If there are more character placeholders\n        // in the right part of the template\n        // then simply trim it.\n        if (value.length < characters_in_template) {\n          break;\n        }\n      }\n    }\n\n    if (should_close_braces) {\n      filled_in_template = close_braces(filled_in_template, template);\n    }\n\n    return {\n      text: filled_in_template,\n      template: template\n    };\n  };\n} //# sourceMappingURL=template formatter.js.map","// Gets <input/> selection bounds\nexport function getSelection(element) {\n  // If no selection, return nothing\n  if (element.selectionStart === element.selectionEnd) {\n    return;\n  }\n\n  return {\n    start: element.selectionStart,\n    end: element.selectionEnd\n  };\n} // Key codes\n\nexport var Keys = {\n  Backspace: 8,\n  Delete: 46\n}; // Finds out the operation to be intercepted and performed\n// based on the key down event `keyCode`.\n\nexport function getOperation(event) {\n  switch (event.keyCode) {\n    case Keys.Backspace:\n      return 'Backspace';\n\n    case Keys.Delete:\n      return 'Delete';\n  }\n} // Gets <input/> caret position\n\nexport function getCaretPosition(element) {\n  return element.selectionStart;\n} // Sets <input/> caret position\n\nexport function setCaretPosition(element, caret_position) {\n  // Sanity check\n  if (caret_position === undefined) {\n    return;\n  } // Set caret position.\n  // There has been an issue with caret positioning on Android devices.\n  // https://github.com/catamphetamine/input-format/issues/2\n  // I was revisiting this issue and looked for similar issues in other libraries.\n  // For example, there's [`text-mask`](https://github.com/text-mask/text-mask) library.\n  // They've had exactly the same issue when the caret seemingly refused to be repositioned programmatically.\n  // The symptoms were the same: whenever the caret passed through a non-digit character of a mask (a whitespace, a bracket, a dash, etc), it looked as if it placed itself one character before its correct position.\n  // https://github.com/text-mask/text-mask/issues/300\n  // They seem to have found a basic fix for it: calling `input.setSelectionRange()` in a timeout rather than instantly for Android devices.\n  // https://github.com/text-mask/text-mask/pull/400/files\n  // I've implemented the same workaround here.\n\n\n  if (isAndroid()) {\n    setTimeout(function () {\n      return element.setSelectionRange(caret_position, caret_position);\n    }, 0);\n  } else {\n    element.setSelectionRange(caret_position, caret_position);\n  }\n}\n\nfunction isAndroid() {\n  // `navigator` is not defined when running mocha tests.\n  if (typeof navigator !== 'undefined') {\n    return ANDROID_USER_AGENT_REG_EXP.test(navigator.userAgent);\n  }\n}\n\nvar ANDROID_USER_AGENT_REG_EXP = /Android/i;","import edit from './edit';\nimport parse from './parse';\nimport format from './format';\nimport { getOperation, getSelection, getCaretPosition, setCaretPosition } from './dom';\nexport function onCut(event, input, _parse, _format, on_change) {\n  // The actual cut hasn't happened just yet hence the timeout.\n  setTimeout(function () {\n    return format_input_text(input, _parse, _format, undefined, on_change);\n  }, 0);\n}\nexport function onPaste(event, input, _parse, _format, on_change) {\n  var selection = getSelection(input); // If selection is made,\n  // just erase the selected text\n  // prior to pasting\n\n  if (selection) {\n    erase_selection(input, selection);\n  }\n\n  format_input_text(input, _parse, _format, undefined, on_change);\n}\nexport function onChange(event, input, _parse, _format, on_change) {\n  format_input_text(input, _parse, _format, undefined, on_change);\n} // Intercepts \"Delete\" and \"Backspace\" keys.\n// (hitting \"Delete\" or \"Backspace\" at any caret\n//  position should always result in rasing a digit)\n\nexport function onKeyDown(event, input, _parse, _format, on_change) {\n  var operation = getOperation(event);\n\n  switch (operation) {\n    case 'Delete':\n    case 'Backspace':\n      // Intercept this operation and perform it manually.\n      event.preventDefault();\n      var selection = getSelection(input); // If selection is made,\n      // just erase the selected text,\n      // and don't apply any more operations to it.\n\n      if (selection) {\n        erase_selection(input, selection);\n        return format_input_text(input, _parse, _format, undefined, on_change);\n      } // Else, perform the (character erasing) operation manually\n\n\n      return format_input_text(input, _parse, _format, operation, on_change);\n\n    default: // Will be handled when `onChange` fires.\n\n  }\n}\n/**\r\n * Erases the selected text inside an `<input/>`.\r\n * @param  {DOMElement} input\r\n * @param  {Selection} selection\r\n */\n\nfunction erase_selection(input, selection) {\n  var text = input.value;\n  text = text.slice(0, selection.start) + text.slice(selection.end);\n  input.value = text;\n  setCaretPosition(input, selection.start);\n}\n/**\r\n * Parses and re-formats `<input/>` textual value.\r\n * E.g. when a user enters something into the `<input/>`\r\n * that raw input must first be parsed and the re-formatted properly.\r\n * Is called either after some user input (e.g. entered a character, pasted something)\r\n * or after the user performed an `operation` (e.g. \"Backspace\", \"Delete\").\r\n * @param  {DOMElement} input\r\n * @param  {Function} parse\r\n * @param  {Function} format\r\n * @param  {string} [operation] - The operation that triggered `<input/>` textual value change. E.g. \"Backspace\", \"Delete\".\r\n * @param  {Function} onChange\r\n */\n\n\nfunction format_input_text(input, _parse, _format, operation, on_change) {\n  // Parse `<input/>` textual value.\n  // Get `value` and `caret` position.\n  var _parse2 = parse(input.value, getCaretPosition(input), _parse),\n      value = _parse2.value,\n      caret = _parse2.caret; // If a user performed an operation (e.g. \"Backspace\", \"Delete\")\n  // then apply that operation and get new `value` and `caret` position.\n\n\n  if (operation) {\n    var operation_applied = edit(value, caret, operation);\n    value = operation_applied.value;\n    caret = operation_applied.caret;\n  } // Format the `value`.\n  // (and reposition the caret accordingly)\n\n\n  var formatted = format(value, caret, _format);\n  var text = formatted.text;\n  caret = formatted.caret; // Set `<input/>` textual value manually\n  // to prevent React from resetting the caret position\n  // later inside subsequent `render()`.\n  // Doesn't work for custom `inputComponent`s for some reason.\n\n  input.value = text; // Position the caret properly.\n\n  setCaretPosition(input, caret); // `<input/>` textual value may have changed,\n  // so the parsed `value` may have changed too.\n  // The `value` didn't neccessarily change\n  // but it might have.\n\n  on_change(value);\n} //# sourceMappingURL=input control.js.map","// Parses the `text`.\n//\n// Returns `{ value, caret }` where `caret` is\n// the caret position inside `value`\n// corresponding to the `caret_position` inside `text`.\n//\n// The `text` is parsed by feeding each character sequentially to\n// `parse_character(character, value)` function\n// and appending the result (if it's not `undefined`) to `value`.\n//\n// Example:\n//\n// `text` is `8 (800) 555-35-35`,\n// `caret_position` is `4` (before the first `0`).\n// `parse_character` is `(character, value) =>\n//   if (character >= '0' && character <= '9') { return character }`.\n//\n// then `parse()` outputs `{ value: '88005553535', caret: 2 }`.\n//\nexport default function parse(text, caret_position, parse_character) {\n  var value = '';\n  var focused_input_character_index = 0;\n  var index = 0;\n\n  while (index < text.length) {\n    var character = parse_character(text[index], value);\n\n    if (character !== undefined) {\n      value += character;\n\n      if (caret_position !== undefined) {\n        if (caret_position === index) {\n          focused_input_character_index = value.length - 1;\n        } else if (caret_position > index) {\n          focused_input_character_index = value.length;\n        }\n      }\n    }\n\n    index++;\n  } // If caret position wasn't specified\n\n\n  if (caret_position === undefined) {\n    // Then set caret position to \"after the last input character\"\n    focused_input_character_index = value.length;\n  }\n\n  var result = {\n    value: value,\n    caret: focused_input_character_index\n  };\n  return result;\n}","// Edits text `value` (if `operation` is passed) and repositions the `caret` if needed.\n//\n// Example:\n//\n// value - '88005553535'\n// caret - 2 // starting from 0; is positioned before the first zero\n// operation - 'Backspace'\n//\n// Returns\n// {\n// \tvalue: '8005553535'\n// \tcaret: 1\n// }\n//\n// Currently supports just 'Delete' and 'Backspace' operations\n//\nexport default function edit(value, caret, operation) {\n  switch (operation) {\n    case 'Backspace':\n      // If there exists the previous character,\n      // then erase it and reposition the caret.\n      if (caret > 0) {\n        // Remove the previous character\n        value = value.slice(0, caret - 1) + value.slice(caret); // Position the caret where the previous (erased) character was\n\n        caret--;\n      }\n\n      break;\n\n    case 'Delete':\n      // Remove current digit (if any)\n      value = value.slice(0, caret) + value.slice(caret + 1);\n      break;\n  }\n\n  return {\n    value: value,\n    caret: caret\n  };\n}","function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n} // This is just `./ReactInput.js` rewritten in Hooks.\n\n\nimport React, { useCallback, useRef } from 'react';\nimport { onChange as onInputChange, onCut as onInputCut, onPaste as onInputPaste, onKeyDown as onInputKeyDown } from '../input control'; // Usage:\n//\n// <ReactInput\n// \tvalue={this.state.phone}\n// \tonChange={phone => this.setState({ phone })}\n// \tparse={character => character}\n// \tformat={value => ({ text: value, template: 'xxxxxxxx' })}/>\n//\n\nfunction Input(_ref, ref) {\n  var value = _ref.value,\n      parse = _ref.parse,\n      format = _ref.format,\n      InputComponent = _ref.inputComponent,\n      onChange = _ref.onChange,\n      onCut = _ref.onCut,\n      onPaste = _ref.onPaste,\n      onKeyDown = _ref.onKeyDown,\n      rest = _objectWithoutProperties(_ref, [\"value\", \"parse\", \"format\", \"inputComponent\", \"onChange\", \"onCut\", \"onPaste\", \"onKeyDown\"]);\n\n  var ownRef = useRef();\n  ref = ref || ownRef;\n\n  var _onChange = useCallback(function (event) {\n    return onInputChange(event, ref.current, parse, format, onChange);\n  }, [ref, parse, format, onChange]);\n\n  var _onPaste = useCallback(function (event) {\n    if (onPaste) {\n      onPaste(event);\n    }\n\n    return onInputPaste(event, ref.current, parse, format, onChange);\n  }, [ref, parse, format, onChange, onPaste]);\n\n  var _onCut = useCallback(function (event) {\n    if (onCut) {\n      onCut(event);\n    }\n\n    return onInputCut(event, ref.current, parse, format, onChange);\n  }, [ref, parse, format, onChange, onCut]);\n\n  var _onKeyDown = useCallback(function (event) {\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n\n    return onInputKeyDown(event, ref.current, parse, format, onChange);\n  }, [ref, parse, format, onChange, onKeyDown]);\n\n  return React.createElement(InputComponent, _extends({}, rest, {\n    ref: ref,\n    value: format(isEmptyValue(value) ? '' : value).text,\n    onKeyDown: _onKeyDown,\n    onChange: _onChange,\n    onPaste: _onPaste,\n    onCut: _onCut\n  }));\n}\n\nInput = React.forwardRef(Input);\nInput.defaultProps = {\n  // Renders `<input/>` by default.\n  inputComponent: 'input',\n  // `<input/>` `type` attribute.\n  type: 'text'\n};\nexport default Input;\n\nfunction isEmptyValue(value) {\n  return value === undefined || value === null;\n}","function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n} // This is an enhanced port of Google Android `libphonenumber`'s\n// `asyoutypeformatter.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/blob/8d21a365061de2ba0675c878a710a7b24f74d2ae/javascript/i18n/phonenumbers/asyoutypeformatter.js\n//\n// Simplified: does not differentiate between \"local-only\" numbers\n// and \"internationally dialable\" numbers.\n// For example, doesn't include changes like this:\n// https://github.com/googlei18n/libphonenumber/commit/865da605da12b01053c4f053310bac7c5fbb7935\n\n\nimport Metadata from './metadata';\nimport PhoneNumber from './PhoneNumber';\nimport { VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS } from './constants';\nimport { matchesEntirely } from './util';\nimport { extractCountryCallingCode as _extractCountryCallingCode, findCountryCode, stripNationalPrefixAndCarrierCode, stripNationalPrefixAndCarrierCodeFromCompleteNumber, extractCountryCallingCodeFromInternationalNumberWithoutPlusSign } from './parse_';\nimport { FIRST_GROUP_PATTERN, formatNationalNumberUsingFormat, applyInternationalSeparatorStyle } from './format_';\nimport { stripIDDPrefix } from './IDD';\nimport { checkNumberLengthForType } from './getNumberType_';\nimport parseDigits from './parseDigits'; // Used in phone number format template creation.\n// Could be any digit, I guess.\n\nvar DUMMY_DIGIT = '9'; // I don't know why is it exactly `15`\n\nvar LONGEST_NATIONAL_PHONE_NUMBER_LENGTH = 15; // Create a phone number consisting only of the digit 9 that matches the\n// `number_pattern` by applying the pattern to the \"longest phone number\" string.\n\nvar LONGEST_DUMMY_PHONE_NUMBER = repeat(DUMMY_DIGIT, LONGEST_NATIONAL_PHONE_NUMBER_LENGTH); // The digits that have not been entered yet will be represented by a \\u2008,\n// the punctuation space.\n\nexport var DIGIT_PLACEHOLDER = 'x'; // '\\u2008' (punctuation space)\n\nvar DIGIT_PLACEHOLDER_MATCHER = new RegExp(DIGIT_PLACEHOLDER); // A set of characters that, if found in a national prefix formatting rules, are an indicator to\n// us that we should separate the national prefix from the number when formatting.\n\nvar NATIONAL_PREFIX_SEPARATORS_PATTERN = /[- ]/; // Deprecated: Google has removed some formatting pattern related code from their repo.\n// https://github.com/googlei18n/libphonenumber/commit/a395b4fef3caf57c4bc5f082e1152a4d2bd0ba4c\n// \"We no longer have numbers in formatting matching patterns, only \\d.\"\n// Because this library supports generating custom metadata\n// some users may still be using old metadata so the relevant\n// code seems to stay until some next major version update.\n\nvar SUPPORT_LEGACY_FORMATTING_PATTERNS = true; // A pattern that is used to match character classes in regular expressions.\n// An example of a character class is \"[1-4]\".\n\nvar CREATE_CHARACTER_CLASS_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && function () {\n  return /\\[([^\\[\\]])*\\]/g;\n}; // Any digit in a regular expression that actually denotes a digit. For\n// example, in the regular expression \"80[0-2]\\d{6,10}\", the first 2 digits\n// (8 and 0) are standalone digits, but the rest are not.\n// Two look-aheads are needed because the number following \\\\d could be a\n// two-digit number, since the phone number can be as long as 15 digits.\n\n\nvar CREATE_STANDALONE_DIGIT_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && function () {\n  return /\\d(?=[^,}][^,}])/g;\n}; // A pattern that is used to determine if a `format` is eligible\n// to be used by the \"as you type formatter\".\n// It is eligible when the `format` contains groups of the dollar sign\n// followed by a single digit, separated by valid phone number punctuation.\n// This prevents invalid punctuation (such as the star sign in Israeli star numbers)\n// getting into the output of the \"as you type formatter\".\n\n\nvar ELIGIBLE_FORMAT_PATTERN = new RegExp('^' + '[' + VALID_PUNCTUATION + ']*' + '(\\\\$\\\\d[' + VALID_PUNCTUATION + ']*)+' + '$'); // This is the minimum length of the leading digits of a phone number\n// to guarantee the first \"leading digits pattern\" for a phone number format\n// to be preemptive.\n\nvar MIN_LEADING_DIGITS_LENGTH = 3;\nvar VALID_FORMATTED_PHONE_NUMBER_PART = '[' + VALID_PUNCTUATION + VALID_DIGITS + ']+';\nvar VALID_FORMATTED_PHONE_NUMBER_PART_PATTERN = new RegExp('^' + VALID_FORMATTED_PHONE_NUMBER_PART + '$', 'i');\nvar VALID_PHONE_NUMBER = '(?:' + '[' + PLUS_CHARS + ']' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']*' + '|' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']+' + ')';\nvar AFTER_PHONE_NUMBER_DIGITS_END_PATTERN = new RegExp('[^' + VALID_PUNCTUATION + VALID_DIGITS + ']+' + '.*' + '$');\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;\n\nvar AsYouType = /*#__PURE__*/function () {\n  // Not setting `options` to a constructor argument\n  // not to break backwards compatibility\n  // for older versions of the library.\n\n  /**\r\n   * @param {(string|object)?} [optionsOrDefaultCountry] - The default country used for parsing non-international phone numbers. Can also be an `options` object.\r\n   * @param {Object} metadata\r\n   */\n  function AsYouType(optionsOrDefaultCountry, metadata) {\n    _classCallCheck(this, AsYouType);\n\n    _defineProperty(this, \"options\", {});\n\n    this.metadata = new Metadata(metadata); // Set `defaultCountry` and `defaultCallingCode` options.\n\n    var defaultCountry;\n    var defaultCallingCode; // Turns out `null` also has type \"object\". Weird.\n\n    if (optionsOrDefaultCountry) {\n      if (_typeof(optionsOrDefaultCountry) === 'object') {\n        defaultCountry = optionsOrDefaultCountry.defaultCountry;\n        defaultCallingCode = optionsOrDefaultCountry.defaultCallingCode;\n      } else {\n        defaultCountry = optionsOrDefaultCountry;\n      }\n    }\n\n    if (defaultCountry && this.metadata.hasCountry(defaultCountry)) {\n      this.defaultCountry = defaultCountry;\n    }\n\n    if (defaultCallingCode) {\n      /* istanbul ignore if */\n      if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n        if (this.metadata.isNonGeographicCallingCode(defaultCallingCode)) {\n          this.defaultCountry = '001';\n        }\n      }\n\n      this.defaultCallingCode = defaultCallingCode;\n    } // Reset.\n\n\n    this.reset();\n  }\n\n  _createClass(AsYouType, [{\n    key: \"reset\",\n    value: function reset() {\n      this.formattedOutput = '';\n      this.international = false;\n      this.internationalPrefix = undefined;\n      this.countryCallingCode = undefined;\n      this.digits = '';\n      this.nationalNumberDigits = '';\n      this.nationalPrefix = '';\n      this.carrierCode = '';\n      this.setCountry(this.defaultCountry, this.defaultCallingCode);\n      return this;\n    }\n  }, {\n    key: \"resetFormat\",\n    value: function resetFormat() {\n      this.chosenFormat = undefined;\n      this.template = undefined;\n      this.populatedNationalNumberTemplate = undefined;\n      this.populatedNationalNumberTemplatePosition = -1;\n    }\n    /**\r\n     * Returns `true` if the phone number is being input in international format.\r\n     * In other words, returns `true` if and only if the parsed phone number starts with a `\"+\"`.\r\n     * @return {boolean}\r\n     */\n\n  }, {\n    key: \"isInternational\",\n    value: function isInternational() {\n      return this.international;\n    }\n    /**\r\n     * Returns the \"country calling code\" part of the phone number.\r\n     * Returns `undefined` if the number is not being input in international format.\r\n     * Returns \"country calling code\" for \"non-geographic\" phone numbering plans too.\r\n     * @return {string} [countryCallingCode]\r\n     */\n\n  }, {\n    key: \"getCountryCallingCode\",\n    value: function getCountryCallingCode() {\n      return this.countryCallingCode;\n    }\n    /**\r\n     * Returns a two-letter country code of the phone number.\r\n     * Returns `undefined` for \"non-geographic\" phone numbering plans.\r\n     * Returns `undefined` if no phone number has been input yet.\r\n     * @return {string} [country]\r\n     */\n\n  }, {\n    key: \"getCountry\",\n    value: function getCountry() {\n      // If no digits have been input yet,\n      // then `this.country` is the `defaultCountry`.\n      // Won't return the `defaultCountry` in such case.\n      if (!this.digits) {\n        return;\n      }\n\n      var countryCode = this.country;\n      /* istanbul ignore if */\n\n      if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n        if (this.country === '001') {\n          countryCode = undefined;\n        }\n      }\n\n      return countryCode;\n    }\n  }, {\n    key: \"setCountry\",\n    value: function setCountry(country, callingCode) {\n      this.country = country;\n      this.metadata.selectNumberingPlan(country, callingCode);\n\n      if (this.metadata.hasSelectedNumberingPlan()) {\n        this.initializePhoneNumberFormatsForCountry();\n      } else {\n        this.matchingFormats = [];\n      }\n\n      this.resetFormat();\n    }\n    /**\r\n     * Inputs \"next\" phone number characters.\r\n     * @param  {string} text\r\n     * @return {string} Formatted phone number characters that have been input so far.\r\n     */\n\n  }, {\n    key: \"input\",\n    value: function input(text) {\n      var formattedDigits = this.extractFormattedDigits(text); // If the extracted phone number part\n      // can possibly be a part of some valid phone number\n      // then parse phone number characters from a formatted phone number.\n\n      if (VALID_FORMATTED_PHONE_NUMBER_PART_PATTERN.test(formattedDigits)) {\n        this.formattedOutput = this.getFullNumber(this.inputDigits(parseDigits(formattedDigits)) || this.getNonFormattedNationalNumber());\n      }\n\n      return this.formattedOutput;\n    }\n    /**\r\n     * Extracts formatted phone number digits from text (if there're any).\r\n     * @param  {string} text\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"extractFormattedDigits\",\n    value: function extractFormattedDigits(text) {\n      // Extract a formatted phone number part from text.\n      var extractedNumber = extractFormattedPhoneNumber(text) || ''; // Trim a `+`.\n\n      if (extractedNumber[0] === '+') {\n        // Trim the `+`.\n        extractedNumber = extractedNumber.slice('+'.length);\n\n        if (this.digits) {// If an out of position `+` is detected\n          // (or a second `+`) then just ignore it.\n        } else {\n          this.formattedOutput = '+';\n          this.startInternationalNumber();\n        }\n      }\n\n      return extractedNumber;\n    }\n  }, {\n    key: \"startInternationalNumber\",\n    value: function startInternationalNumber() {\n      // Prepend the `+` to parsed input.\n      this.international = true; // If a default country was set then reset it\n      // because an explicitly international phone\n      // number is being entered.\n\n      this.setCountry();\n    }\n    /**\r\n     * Inputs \"next\" phone number digits.\r\n     * @param  {string} digits\r\n     * @return {string} [formattedNumber] Formatted national phone number (if it can be formatted at this stage). Returning `undefined` means \"don't format the national phone number at this stage\".\r\n     */\n\n  }, {\n    key: \"inputDigits\",\n    value: function inputDigits(nextDigits) {\n      // Some users input their phone number in \"out-of-country\"\n      // dialing format instead of using the leading `+`.\n      // https://github.com/catamphetamine/libphonenumber-js/issues/185\n      // Detect such numbers.\n      if (!this.digits) {\n        var numberWithoutIDD = stripIDDPrefix(nextDigits, this.defaultCountry, this.defaultCallingCode, this.metadata.metadata);\n\n        if (numberWithoutIDD && numberWithoutIDD !== nextDigits) {\n          // If an IDD prefix was stripped then\n          // convert the number to international one\n          // for subsequent parsing.\n          this.internationalPrefix = nextDigits.slice(0, nextDigits.length - numberWithoutIDD.length);\n          nextDigits = numberWithoutIDD;\n          this.startInternationalNumber();\n        }\n      } // Append phone number digits.\n\n\n      this.digits += nextDigits; // Try to format the parsed input\n\n      if (this.isInternational()) {\n        if (this.countryCallingCode) {\n          this.nationalNumberDigits += nextDigits; // `this.country` could be `undefined`, for example, when there is\n          // ambiguity in a form of several different countries,\n          // each corresponding to the same country phone code\n          // (e.g. NANPA: USA, Canada, etc), and there's not enough digits\n          // to reliably determine the country the phone number belongs to.\n          // Therefore, in cases of such ambiguity, each time something is input,\n          // try to determine the country (if it hasn't been determined yet).\n\n          if (!this.country || this.isCountryCallingCodeAmbiguous()) {\n            this.determineTheCountry();\n          }\n        } else {\n          // Extract country calling code from the digits entered so far.\n          // There must be some digits in order to extract anything from them.\n          //\n          // If one looks at country phone codes\n          // then they can notice that no one country phone code\n          // is ever a (leftmost) substring of another country phone code.\n          // So if a valid country code is extracted so far\n          // then it means that this is the country code.\n          //\n          // If no country phone code could be extracted so far,\n          // then don't format the phone number.\n          //\n          if (!this.extractCountryCallingCode()) {\n            // Don't format the phone number.\n            return;\n          } // Possibly extract a national prefix.\n          // Some people incorrectly input national prefix\n          // in an international phone number.\n          // For example, some people write British phone numbers as `+44(0)...`.\n          // Also, mobile phone numbers in Mexico are supposed to be dialled\n          // internationally using a `15` national prefix.\n          //\n          // https://www.mexperience.com/dialing-cell-phones-in-mexico/\n          //\n          // \"Dialing a Mexican cell phone from abroad\n          // When you are calling a cell phone number in Mexico from outside Mexico,\n          // it’s necessary to dial an additional “1” after Mexico’s country code\n          // (which is “52”) and before the area code.\n          // You also ignore the 045, and simply dial the area code and the\n          // cell phone’s number.\n          //\n          // If you don’t add the “1”, you’ll receive a recorded announcement\n          // asking you to redial using it.\n          //\n          // For example, if you are calling from the USA to a cell phone\n          // in Mexico City, you would dial +52 – 1 – 55 – 1234 5678.\n          // (Note that this is different to calling a land line in Mexico City\n          // from abroad, where the number dialed would be +52 – 55 – 1234 5678)\".\n          //\n\n\n          this.nationalNumberDigits = this.digits.slice(this.countryCallingCode.length); // this.extractNationalPrefix()\n          //\n          // Determine the country from country calling code and national number.\n\n          this.determineTheCountry();\n        }\n      } else {\n        this.nationalNumberDigits += nextDigits; // If `defaultCallingCode` is set,\n        // see if the `country` could be derived.\n\n        if (!this.country) {\n          this.determineTheCountry();\n        } // Some national prefixes are substrings of other national prefixes\n        // (for the same country), therefore try to extract national prefix each time\n        // because a longer national prefix might be available at some point in time.\n\n\n        var previousNationalPrefix = this.nationalPrefix;\n        this.nationalNumberDigits = this.nationalPrefix + this.nationalNumberDigits; // Re-extract national prefix.\n\n        this.extractNationalPrefix(); // If another national prefix has been extracted.\n\n        if (this.nationalPrefix !== previousNationalPrefix) {\n          // National number has changed\n          // (due to another national prefix been extracted)\n          // therefore national number has changed\n          // therefore reset all previous formatting data.\n          // (and leading digits matching state)\n          this.initializePhoneNumberFormatsForCountry();\n          this.resetFormat();\n        }\n      }\n\n      if (this.nationalNumberDigits) {\n        // Match the available formats by the currently available leading digits.\n        this.matchFormats(this.nationalNumberDigits);\n      } // Format the phone number (given the next digits)\n\n\n      return this.formatNationalNumberWithNextDigits(nextDigits);\n    }\n  }, {\n    key: \"formatNationalNumberWithNextDigits\",\n    value: function formatNationalNumberWithNextDigits(nextDigits) {\n      // See if the phone number digits can be formatted as a complete phone number.\n      // If not, use the results from `formatNextNationalNumberDigits()`,\n      // which formats based on the chosen formatting pattern.\n      // Attempting to format complete phone number first is how it's done\n      // in Google's `libphonenumber`.\n      var formattedNumber = this.attemptToFormatCompletePhoneNumber(); // Just because a phone number doesn't have a suitable format\n      // that doesn't mean that the phone number is invalid,\n      // because phone number formats only format phone numbers,\n      // they don't validate them and some (rare) phone numbers\n      // are meant to stay non-formatted.\n\n      if (formattedNumber) {\n        return formattedNumber;\n      } // Format the next phone number digits\n      // using the previously chosen phone number format.\n      //\n      // This is done here because if `attemptToFormatCompletePhoneNumber`\n      // was placed before this call then the `template`\n      // wouldn't reflect the situation correctly (and would therefore be inconsistent)\n      //\n\n\n      var previouslyChosenFormat = this.chosenFormat; // Choose a format from the list of matching ones.\n\n      var newlyChosenFormat = this.chooseFormat();\n\n      if (newlyChosenFormat) {\n        if (newlyChosenFormat === previouslyChosenFormat) {\n          // If could format the next (current) digit\n          // using the previously chosen phone number format\n          // then return the formatted number so far.\n          //\n          // If no new phone number format could be chosen,\n          // and couldn't format the supplied national number\n          // using the previously chosen phone number pattern,\n          // then return `undefined`.\n          //\n          return this.formatNextNationalNumberDigits(nextDigits);\n        } else {\n          // If a more appropriate phone number format\n          // has been chosen for these \"leading digits\",\n          // then format the national phone number (so far)\n          // using the newly selected format.\n          //\n          // Will return `undefined` if it couldn't format\n          // the supplied national number\n          // using the selected phone number pattern.\n          //\n          return this.reformatNationalNumber();\n        }\n      }\n    }\n  }, {\n    key: \"chooseFormat\",\n    value: function chooseFormat() {\n      // When there are multiple available formats, the formatter uses the first\n      // format where a formatting template could be created.\n      for (var _iterator = this.matchingFormats, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var format = _ref; // If this format is currently being used\n        // and is still possible, then stick to it.\n\n        if (this.chosenFormat === format) {\n          break;\n        }\n\n        if (!this.createFormattingTemplate(format)) {\n          continue;\n        }\n\n        this.chosenFormat = format; // With a new formatting template, the matched position\n        // using the old template needs to be reset.\n\n        this.populatedNationalNumberTemplatePosition = -1;\n        break;\n      }\n\n      if (!this.chosenFormat) {\n        // No format matches the national phone number entered.\n        this.resetFormat();\n      }\n\n      return this.chosenFormat;\n    } // Formats each digit of the national phone number (so far)\n    // using the selected format.\n\n  }, {\n    key: \"reformatNationalNumber\",\n    value: function reformatNationalNumber() {\n      return this.formatNextNationalNumberDigits(this.nationalPrefix + this.nationalNumberDigits);\n    }\n  }, {\n    key: \"initializePhoneNumberFormatsForCountry\",\n    value: function initializePhoneNumberFormatsForCountry() {\n      // Get all \"eligible\" phone number formats for this country\n      this.matchingFormats = this.metadata.formats().filter(function (format) {\n        // Compared to `libphonenumber`'s code, the two \"Discard a few formats\n        // that we know are not relevant based on the presence of the national prefix\"\n        // checks have changed: the first one has been moved to `.matchFormats()`,\n        // and the second one doesn't apply to this library because it doesn't deal with\n        // \"incomplete\" phone numbers (for example, phone numbers, entered without \"area code\").\n        return ELIGIBLE_FORMAT_PATTERN.test(format.internationalFormat());\n      });\n    }\n  }, {\n    key: \"matchFormats\",\n    value: function matchFormats(leadingDigits) {\n      var _this = this; // \"leading digits\" pattern list starts with a\n      // \"leading digits\" pattern fitting a maximum of 3 leading digits.\n      // So, after a user inputs 3 digits of a national (significant) phone number\n      // this national (significant) number can already be formatted.\n      // The next \"leading digits\" pattern is for 4 leading digits max,\n      // and the \"leading digits\" pattern after it is for 5 leading digits max, etc.\n      // This implementation is different from Google's\n      // in that it searches for a fitting format\n      // even if the user has entered less than\n      // `MIN_LEADING_DIGITS_LENGTH` digits of a national number.\n      // Because some leading digit patterns already match for a single first digit.\n\n\n      var leadingDigitsPatternIndex = leadingDigits.length - MIN_LEADING_DIGITS_LENGTH;\n\n      if (leadingDigitsPatternIndex < 0) {\n        leadingDigitsPatternIndex = 0;\n      }\n\n      this.matchingFormats = this.matchingFormats.filter(function (format) {\n        // If national prefix is mandatory for this phone number format\n        // and the user didn't input the national prefix\n        // then this phone number format isn't suitable.\n        if (!_this.isInternational() && !_this.nationalPrefix && format.nationalPrefixIsMandatoryWhenFormattingInNationalFormat()) {\n          return false;\n        }\n\n        var leadingDigitsPatternsCount = format.leadingDigitsPatterns().length; // If this format is not restricted to a certain\n        // leading digits pattern then it fits.\n\n        if (leadingDigitsPatternsCount === 0) {\n          return true;\n        } // Start excluding any non-matching formats only when the\n        // national number entered so far is at least 3 digits long,\n        // otherwise format matching would give false negatives.\n        // For example, when the digits entered so far are `2`\n        // and the leading digits pattern is `21` –\n        // it's quite obvious in this case that the format could be the one\n        // but due to the absence of further digits it would give false negative.\n\n\n        if (leadingDigits.length < MIN_LEADING_DIGITS_LENGTH) {\n          return true;\n        } // If at least `MIN_LEADING_DIGITS_LENGTH` digits of a national number are available\n        // then format matching starts narrowing down the list of possible formats\n        // (only previously matched formats are considered for next digits).\n\n\n        leadingDigitsPatternIndex = Math.min(leadingDigitsPatternIndex, leadingDigitsPatternsCount - 1);\n        var leadingDigitsPattern = format.leadingDigitsPatterns()[leadingDigitsPatternIndex]; // Brackets are required for `^` to be applied to\n        // all or-ed (`|`) parts, not just the first one.\n\n        return new RegExp(\"^(\".concat(leadingDigitsPattern, \")\")).test(leadingDigits);\n      }); // If there was a phone number format chosen\n      // and it no longer holds given the new leading digits then reset it.\n      // The test for this `if` condition is marked as:\n      // \"Reset a chosen format when it no longer holds given the new leading digits\".\n      // To construct a valid test case for this one can find a country\n      // in `PhoneNumberMetadata.xml` yielding one format for 3 `<leadingDigits>`\n      // and yielding another format for 4 `<leadingDigits>` (Australia in this case).\n\n      if (this.chosenFormat && this.matchingFormats.indexOf(this.chosenFormat) === -1) {\n        this.resetFormat();\n      }\n    }\n  }, {\n    key: \"getSeparatorAfterNationalPrefix\",\n    value: function getSeparatorAfterNationalPrefix(format) {\n      if (this.metadata.countryCallingCode() === '1') {\n        return ' ';\n      }\n\n      if (format && format.nationalPrefixFormattingRule() && NATIONAL_PREFIX_SEPARATORS_PATTERN.test(format.nationalPrefixFormattingRule())) {\n        return ' ';\n      }\n\n      return '';\n    } // This is in accordance to how Google's `libphonenumber` does it.\n    // \"Check to see if there is an exact pattern match for these digits.\n    // If so, we should use this instead of any other formatting template\n    // whose `leadingDigitsPattern` also matches the input.\"\n\n  }, {\n    key: \"attemptToFormatCompletePhoneNumber\",\n    value: function attemptToFormatCompletePhoneNumber() {\n      for (var _iterator2 = this.matchingFormats, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n        var _ref2;\n\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref2 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref2 = _i2.value;\n        }\n\n        var format = _ref2;\n        var matcher = new RegExp(\"^(?:\".concat(format.pattern(), \")$\"));\n\n        if (!matcher.test(this.nationalNumberDigits)) {\n          continue;\n        } // Here, national number is formatted without \"national prefix\n        // formatting rule\", because otherwise there'd be a bug\n        // when \"area code\" is \"duplicated\" during input:\n        // https://github.com/catamphetamine/libphonenumber-js/issues/318\n\n\n        var formattedNationalNumber = formatNationalNumberUsingFormat(this.nationalNumberDigits, format, this.isInternational(), false, // Don't prepend national prefix (it will be prepended manually).\n        this.metadata); // Check if this `format` preserves all digits.\n        // This is how it's done in Google's `libphonenumber`.\n        // Also, it fixes the bug when \"area code\" is \"duplicated\" during input:\n        // https://github.com/catamphetamine/libphonenumber-js/issues/318\n        //\n        // \"Check that we didn't remove nor add any extra digits when we matched\n        // this formatting pattern. This usually happens after we entered the last\n        // digit during AYTF. Eg: In case of MX, we swallow mobile token (1) when\n        // formatted but AYTF should retain all the number entered and not change\n        // in order to match a format (of same leading digits and length) display\n        // in that way.\"\n        // \"If it's the same (i.e entered number and format is same), then it's\n        // safe to return this in formatted number as nothing is lost / added.\"\n        // Otherwise, don't use this format.\n        // https://github.com/google/libphonenumber/commit/3e7c1f04f5e7200f87fb131e6f85c6e99d60f510#diff-9149457fa9f5d608a11bb975c6ef4bc5\n        // https://github.com/google/libphonenumber/commit/3ac88c7106e7dcb553bcc794b15f19185928a1c6#diff-2dcb77e833422ee304da348b905cde0b\n        //\n\n        if (parseDigits(formattedNationalNumber) !== this.nationalNumberDigits) {\n          continue;\n        } // Prepend national prefix (if any).\n\n\n        if (this.nationalPrefix) {\n          // Here, national number is formatted with \"national prefix\n          // formatting rule\". The reason is that \"national prefix\n          // formatting rule\" often adds parentheses, and while Google's\n          // `libphonenumber` dismisses those preferring simply prepending\n          // national prefix followed by a \" \" character, this library\n          // looks if the national prefix could be formatted better.\n          var formattedNationalNumberWithNationalPrefix = formatNationalNumberUsingFormat(this.nationalNumberDigits, format, this.isInternational(), true, // Prepend national prefix.\n          this.metadata);\n\n          if (parseDigits(formattedNationalNumberWithNationalPrefix) === this.nationalPrefix + this.nationalNumberDigits) {\n            formattedNationalNumber = formattedNationalNumberWithNationalPrefix;\n          } else {\n            formattedNationalNumber = this.nationalPrefix + this.getSeparatorAfterNationalPrefix(format) + formattedNationalNumber;\n          }\n        } // formats national number (probably) without national prefix.\n        // Formatting a national number with national prefix could result in\n        // bugs when \"area code\" is \"duplicated\" during input:\n        // https://github.com/catamphetamine/libphonenumber-js/issues/318\n        // The \"are all digits preserved\" check fixes that type of bug.\n        // To leave the formatter in a consistent state\n\n\n        this.resetFormat();\n        this.chosenFormat = format; // Set `this.template` and `this.populatedNationalNumberTemplate`.\n\n        /* istanbul ignore else */\n\n        if (this.createFormattingTemplate(format)) {\n          // Populate `this.populatedNationalNumberTemplate` with phone number digits.\n          this.reformatNationalNumber();\n        } else {\n          // If the formatting template couldn't be created for a format,\n          // create it manually from the formatted phone number.\n          // This case doesn't ever happen with the current metadata.\n          this.template = this.getFullNumber(formattedNationalNumber).replace(/[\\d\\+]/g, DIGIT_PLACEHOLDER);\n          this.populatedNationalNumberTemplate = formattedNationalNumber;\n          this.populatedNationalNumberTemplatePosition = this.populatedNationalNumberTemplate.length - 1;\n        }\n\n        return formattedNationalNumber;\n      }\n    }\n  }, {\n    key: \"getInternationalPrefix\",\n    value: function getInternationalPrefix(options) {\n      return this.internationalPrefix ? options && options.spacing === false ? this.internationalPrefix : this.internationalPrefix + ' ' : '+';\n    } // Prepends `+CountryCode ` in case of an international phone number\n\n  }, {\n    key: \"getFullNumber\",\n    value: function getFullNumber(formattedNationalNumber) {\n      if (this.isInternational()) {\n        var prefix = this.getInternationalPrefix();\n\n        if (!this.countryCallingCode) {\n          return \"\".concat(prefix).concat(this.digits);\n        }\n\n        if (!formattedNationalNumber) {\n          return \"\".concat(prefix).concat(this.countryCallingCode);\n        }\n\n        return \"\".concat(prefix).concat(this.countryCallingCode, \" \").concat(formattedNationalNumber);\n      }\n\n      return formattedNationalNumber;\n    }\n  }, {\n    key: \"getNonFormattedNationalNumber\",\n    value: function getNonFormattedNationalNumber() {\n      return this.nationalPrefix + (this.nationalPrefix && this.nationalNumberDigits && this.getSeparatorAfterNationalPrefix()) + this.nationalNumberDigits;\n    } // Extracts the country calling code from the beginning\n    // of the entered `national_number` (so far),\n    // and places the remaining input into the `national_number`.\n\n  }, {\n    key: \"extractCountryCallingCode\",\n    value: function extractCountryCallingCode() {\n      var _extractCountryCallin = _extractCountryCallingCode('+' + this.digits, this.defaultCountry, this.defaultCallingCode, this.metadata.metadata),\n          countryCallingCode = _extractCountryCallin.countryCallingCode,\n          number = _extractCountryCallin.number;\n\n      if (!countryCallingCode) {\n        return;\n      }\n\n      this.nationalNumberDigits = number;\n      this.countryCallingCode = countryCallingCode;\n      this.metadata.chooseCountryByCountryCallingCode(countryCallingCode);\n      this.initializePhoneNumberFormatsForCountry();\n      this.resetFormat();\n      return this.metadata.hasSelectedNumberingPlan();\n    }\n  }, {\n    key: \"extractNationalPrefix\",\n    value: function extractNationalPrefix() {\n      this.nationalPrefix = '';\n\n      if (!this.metadata.hasSelectedNumberingPlan()) {\n        return;\n      } // Only strip national prefixes for non-international phone numbers\n      // because national prefixes can't be present in international phone numbers.\n      // While `parseNumber()` is forgiving is such cases, `AsYouType` is not.\n\n\n      var _stripNationalPrefixA = stripNationalPrefixAndCarrierCode(this.nationalNumberDigits, this.metadata),\n          nationalNumber = _stripNationalPrefixA.nationalNumber,\n          carrierCode = _stripNationalPrefixA.carrierCode; // Sometimes `stripNationalPrefixAndCarrierCode()` won't actually\n      // strip national prefix and will instead prepend some digits to the `number`:\n      // for example, when number `2345678` is passed with `VI` country selected,\n      // it will return `{ number: \"3402345678\" }`, because `340` area code is prepended.\n      // So check if the `nationalNumber` is actually at the end of `this.nationalNumberDigits`.\n\n\n      if (nationalNumber) {\n        var index = this.nationalNumberDigits.indexOf(nationalNumber);\n\n        if (index < 0 || index !== this.nationalNumberDigits.length - nationalNumber.length) {\n          return;\n        }\n      }\n\n      if (carrierCode) {\n        this.carrierCode = carrierCode;\n      }\n\n      this.nationalPrefix = this.nationalNumberDigits.slice(0, this.nationalNumberDigits.length - nationalNumber.length);\n      this.nationalNumberDigits = nationalNumber;\n      return this.nationalPrefix;\n    } // isPossibleNumber(number) {\n    // \tswitch (checkNumberLengthForType(number, undefined, this.metadata)) {\n    // \t\tcase 'IS_POSSIBLE':\n    // \t\t\treturn true\n    // \t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\n    // \t\t// \treturn !this.isInternational()\n    // \t\tdefault:\n    // \t\t\treturn false\n    // \t}\n    // }\n\n  }, {\n    key: \"isCountryCallingCodeAmbiguous\",\n    value: function isCountryCallingCodeAmbiguous() {\n      var countryCodes = this.metadata.getCountryCodesForCallingCode(this.countryCallingCode);\n      return countryCodes && countryCodes.length > 1;\n    }\n  }, {\n    key: \"createFormattingTemplate\",\n    value: function createFormattingTemplate(format) {\n      // The formatter doesn't format numbers when numberPattern contains '|', e.g.\n      // (20|3)\\d{4}. In those cases we quickly return.\n      // (Though there's no such format in current metadata)\n\n      /* istanbul ignore if */\n      if (SUPPORT_LEGACY_FORMATTING_PATTERNS && format.pattern().indexOf('|') >= 0) {\n        return;\n      } // Get formatting template for this phone number format\n\n\n      var template = this.getTemplateForNumberFormatPattern(format, this.nationalPrefix); // If the national number entered is too long\n      // for any phone number format, then abort.\n\n      if (!template) {\n        return;\n      }\n\n      this.template = template;\n      this.populatedNationalNumberTemplate = template; // For convenience, the public `.template` property\n      // contains the whole international number\n      // if the phone number being input is international:\n      // 'x' for the '+' sign, 'x'es for the country phone code,\n      // a spacebar and then the template for the formatted national number.\n\n      if (this.isInternational()) {\n        this.template = this.getInternationalPrefix().replace(/[\\d\\+]/g, DIGIT_PLACEHOLDER) + repeat(DIGIT_PLACEHOLDER, this.countryCallingCode.length) + ' ' + template;\n      }\n\n      return this.template;\n    }\n    /**\r\n     * Generates formatting template for a national phone number,\r\n     * optionally containing a national prefix, for a format.\r\n     * @param  {Format} format\r\n     * @param  {string} nationalPrefix\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"getTemplateForNumberFormatPattern\",\n    value: function getTemplateForNumberFormatPattern(format, nationalPrefix) {\n      var pattern = format.pattern();\n      /* istanbul ignore else */\n\n      if (SUPPORT_LEGACY_FORMATTING_PATTERNS) {\n        pattern = pattern // Replace anything in the form of [..] with \\d\n        .replace(CREATE_CHARACTER_CLASS_PATTERN(), '\\\\d') // Replace any standalone digit (not the one in `{}`) with \\d\n        .replace(CREATE_STANDALONE_DIGIT_PATTERN(), '\\\\d');\n      } // Generate a dummy national number (consisting of `9`s)\n      // that fits this format's `pattern`.\n      //\n      // This match will always succeed,\n      // because the \"longest dummy phone number\"\n      // has enough length to accomodate any possible\n      // national phone number format pattern.\n      //\n\n\n      var digits = LONGEST_DUMMY_PHONE_NUMBER.match(pattern)[0]; // If the national number entered is too long\n      // for any phone number format, then abort.\n\n      if (this.nationalNumberDigits.length > digits.length) {\n        return;\n      } // Get a formatting template which can be used to efficiently format\n      // a partial number where digits are added one by one.\n      // Below `strictPattern` is used for the\n      // regular expression (with `^` and `$`).\n      // This wasn't originally in Google's `libphonenumber`\n      // and I guess they don't really need it\n      // because they're not using \"templates\" to format phone numbers\n      // but I added `strictPattern` after encountering\n      // South Korean phone number formatting bug.\n      //\n      // Non-strict regular expression bug demonstration:\n      //\n      // this.nationalNumberDigits : `111111111` (9 digits)\n      //\n      // pattern : (\\d{2})(\\d{3,4})(\\d{4})\n      // format : `$1 $2 $3`\n      // digits : `9999999999` (10 digits)\n      //\n      // '9999999999'.replace(new RegExp(/(\\d{2})(\\d{3,4})(\\d{4})/g), '$1 $2 $3') = \"99 9999 9999\"\n      //\n      // template : xx xxxx xxxx\n      //\n      // But the correct template in this case is `xx xxx xxxx`.\n      // The template was generated incorrectly because of the\n      // `{3,4}` variability in the `pattern`.\n      //\n      // The fix is, if `this.nationalNumberDigits` has already sufficient length\n      // to satisfy the `pattern` completely then `this.nationalNumberDigits`\n      // is used instead of `digits`.\n\n\n      var strictPattern = new RegExp('^' + pattern + '$');\n      var nationalNumberDummyDigits = this.nationalNumberDigits.replace(/\\d/g, DUMMY_DIGIT); // If `this.nationalNumberDigits` has already sufficient length\n      // to satisfy the `pattern` completely then use it\n      // instead of `digits`.\n\n      if (strictPattern.test(nationalNumberDummyDigits)) {\n        digits = nationalNumberDummyDigits;\n      }\n\n      var numberFormat = this.getFormatFormat(format);\n      var includesNationalPrefix;\n\n      if (nationalPrefix) {\n        if (format.nationalPrefixFormattingRule()) {\n          var numberFormatWithNationalPrefix = numberFormat.replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule());\n\n          if (parseDigits(numberFormatWithNationalPrefix) === nationalPrefix + parseDigits(numberFormat)) {\n            numberFormat = numberFormatWithNationalPrefix;\n            includesNationalPrefix = true;\n            var i = nationalPrefix.length;\n\n            while (i > 0) {\n              numberFormat = numberFormat.replace(/\\d/, DIGIT_PLACEHOLDER);\n              i--;\n            }\n          }\n        }\n      } // Generate formatting template for this phone number format.\n\n\n      var template = digits // Format the dummy phone number according to the format.\n      .replace(new RegExp(pattern), numberFormat) // Replace each dummy digit with a DIGIT_PLACEHOLDER.\n      .replace(new RegExp(DUMMY_DIGIT, 'g'), DIGIT_PLACEHOLDER);\n\n      if (nationalPrefix) {\n        if (!includesNationalPrefix) {\n          // Prepend national prefix to the template manually.\n          template = repeat(DIGIT_PLACEHOLDER, nationalPrefix.length) + this.getSeparatorAfterNationalPrefix(format) + template;\n        }\n      }\n\n      return template;\n    }\n  }, {\n    key: \"formatNextNationalNumberDigits\",\n    value: function formatNextNationalNumberDigits(digits) {\n      // Using `.split('')` to iterate through a string here\n      // to avoid requiring `Symbol.iterator` polyfill.\n      // `.split('')` is generally not safe for Unicode,\n      // but in this particular case for `digits` it is safe.\n      // for (const digit of digits)\n      for (var _iterator3 = digits.split(''), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n        var _ref3;\n\n        if (_isArray3) {\n          if (_i3 >= _iterator3.length) break;\n          _ref3 = _iterator3[_i3++];\n        } else {\n          _i3 = _iterator3.next();\n          if (_i3.done) break;\n          _ref3 = _i3.value;\n        }\n\n        var digit = _ref3; // If there is room for more digits in current `template`,\n        // then set the next digit in the `template`,\n        // and return the formatted digits so far.\n        // If more digits are entered than the current format could handle.\n\n        if (this.populatedNationalNumberTemplate.slice(this.populatedNationalNumberTemplatePosition + 1).search(DIGIT_PLACEHOLDER_MATCHER) < 0) {\n          // Reset the format.\n          this.resetFormat();\n          return;\n        }\n\n        this.populatedNationalNumberTemplatePosition = this.populatedNationalNumberTemplate.search(DIGIT_PLACEHOLDER_MATCHER);\n        this.populatedNationalNumberTemplate = this.populatedNationalNumberTemplate.replace(DIGIT_PLACEHOLDER_MATCHER, digit);\n      } // Return the formatted phone number so far.\n\n\n      return cutAndStripNonPairedParens(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition + 1); // The old way which was good for `input-format` but is not so good\n      // for `react-phone-number-input`'s default input (`InputBasic`).\n      // return closeNonPairedParens(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition + 1)\n      // \t.replace(new RegExp(DIGIT_PLACEHOLDER, 'g'), ' ')\n    }\n  }, {\n    key: \"getFormatFormat\",\n    value: function getFormatFormat(format) {\n      if (this.isInternational()) {\n        return applyInternationalSeparatorStyle(format.internationalFormat());\n      }\n\n      return format.format();\n    } // Determines the country of the phone number\n    // entered so far based on the country phone code\n    // and the national phone number.\n\n  }, {\n    key: \"determineTheCountry\",\n    value: function determineTheCountry() {\n      this.country = findCountryCode(this.isInternational() ? this.countryCallingCode : this.defaultCallingCode, this.nationalNumberDigits, this.metadata);\n    }\n    /**\r\n     * Returns an instance of `PhoneNumber` class.\r\n     * Will return `undefined` if no national (significant) number\r\n     * digits have been entered so far, or if no `defaultCountry` has been\r\n     * set and the user enters a phone number not in international format.\r\n     */\n\n  }, {\n    key: \"getNumber\",\n    value: function getNumber() {\n      if (this.isInternational()) {\n        if (!this.countryCallingCode) {\n          return;\n        }\n      } else {\n        if (!this.country && !this.defaultCallingCode) {\n          return;\n        }\n      }\n\n      if (!this.nationalNumberDigits) {\n        return undefined;\n      }\n\n      var countryCode = this.getCountry();\n      var callingCode = this.getCountryCallingCode() || this.defaultCallingCode;\n      var nationalNumber = this.nationalNumberDigits;\n      var carrierCode = this.carrierCode; // When an international number without a leading `+` has been autocorrected,\n      // extract country calling code, because normally it's only extracted\n      // for international numbers with a leading `+`.\n      // Could also just use `parsePhoneNumberFromString()` here\n      // instead of hacking around this single case.\n\n      if (!this.isInternational() && this.nationalNumberDigits === this.digits) {\n        var _extractCountryCallin2 = extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(this.digits, countryCode, callingCode, this.metadata.metadata),\n            countryCallingCode = _extractCountryCallin2.countryCallingCode,\n            number = _extractCountryCallin2.number;\n\n        if (countryCallingCode) {\n          var _stripNationalPrefixA2 = stripNationalPrefixAndCarrierCodeFromCompleteNumber(number, this.metadata),\n              shorterNationalNumber = _stripNationalPrefixA2.nationalNumber,\n              newCarrierCode = _stripNationalPrefixA2.carrierCode;\n\n          nationalNumber = shorterNationalNumber;\n          carrierCode = newCarrierCode;\n        }\n      }\n\n      var phoneNumber = new PhoneNumber(countryCode || callingCode, nationalNumber, this.metadata.metadata);\n\n      if (carrierCode) {\n        phoneNumber.carrierCode = carrierCode;\n      } // Phone number extensions are not supported by \"As You Type\" formatter.\n\n\n      return phoneNumber;\n    }\n    /**\r\n     * Returns `true` if the phone number is \"possible\".\r\n     * Is just a shortcut for `PhoneNumber.isPossible()`.\r\n     * @return {boolean}\r\n     */\n\n  }, {\n    key: \"isPossible\",\n    value: function isPossible() {\n      var phoneNumber = this.getNumber();\n\n      if (!phoneNumber) {\n        return false;\n      }\n\n      return phoneNumber.isPossible();\n    }\n    /**\r\n     * Returns `true` if the phone number is \"valid\".\r\n     * Is just a shortcut for `PhoneNumber.isValid()`.\r\n     * @return {boolean}\r\n     */\n\n  }, {\n    key: \"isValid\",\n    value: function isValid() {\n      var phoneNumber = this.getNumber();\n\n      if (!phoneNumber) {\n        return false;\n      }\n\n      return phoneNumber.isValid();\n    }\n    /**\r\n     * @deprecated\r\n     * This method is used in `react-phone-number-input/source/input-control.js`\r\n     * in versions before `3.0.16`.\r\n     */\n\n  }, {\n    key: \"getNationalNumber\",\n    value: function getNationalNumber() {\n      return this.nationalNumberDigits;\n    }\n  }, {\n    key: \"getNonFormattedTemplate\",\n    value: function getNonFormattedTemplate() {\n      return this.getFullNumber(this.getNonFormattedNationalNumber()).replace(/[\\+\\d]/g, DIGIT_PLACEHOLDER);\n    }\n    /**\r\n     * Returns formatted phone number template.\r\n     * @return {string} [template]\r\n     */\n\n  }, {\n    key: \"getTemplate\",\n    value: function getTemplate() {\n      if (!this.template) {\n        return this.getNonFormattedTemplate();\n      }\n\n      var index = -1;\n      var i = 0;\n\n      while (i < (this.isInternational() ? this.getInternationalPrefix({\n        spacing: false\n      }).length : 0) + this.digits.length) {\n        index = this.template.indexOf(DIGIT_PLACEHOLDER, index + 1);\n        i++;\n      }\n\n      return cutAndStripNonPairedParens(this.template, index + 1);\n    }\n  }]);\n\n  return AsYouType;\n}();\n\nexport { AsYouType as default };\nexport function stripNonPairedParens(string) {\n  var dangling_braces = [];\n  var i = 0;\n\n  while (i < string.length) {\n    if (string[i] === '(') {\n      dangling_braces.push(i);\n    } else if (string[i] === ')') {\n      dangling_braces.pop();\n    }\n\n    i++;\n  }\n\n  var start = 0;\n  var cleared_string = '';\n  dangling_braces.push(string.length);\n\n  for (var _i4 = 0, _dangling_braces = dangling_braces; _i4 < _dangling_braces.length; _i4++) {\n    var index = _dangling_braces[_i4];\n    cleared_string += string.slice(start, index);\n    start = index + 1;\n  }\n\n  return cleared_string;\n}\nexport function cutAndStripNonPairedParens(string, cutBeforeIndex) {\n  if (string[cutBeforeIndex] === ')') {\n    cutBeforeIndex++;\n  }\n\n  return stripNonPairedParens(string.slice(0, cutBeforeIndex));\n}\nexport function closeNonPairedParens(template, cut_before) {\n  var retained_template = template.slice(0, cut_before);\n  var opening_braces = countOccurences('(', retained_template);\n  var closing_braces = countOccurences(')', retained_template);\n  var dangling_braces = opening_braces - closing_braces;\n\n  while (dangling_braces > 0 && cut_before < template.length) {\n    if (template[cut_before] === ')') {\n      dangling_braces--;\n    }\n\n    cut_before++;\n  }\n\n  return template.slice(0, cut_before);\n} // Counts all occurences of a symbol in a string.\n// Unicode-unsafe (because using `.split()`).\n\nexport function countOccurences(symbol, string) {\n  var count = 0; // Using `.split('')` to iterate through a string here\n  // to avoid requiring `Symbol.iterator` polyfill.\n  // `.split('')` is generally not safe for Unicode,\n  // but in this particular case for counting brackets it is safe.\n  // for (const character of string)\n\n  for (var _iterator4 = string.split(''), _isArray4 = Array.isArray(_iterator4), _i5 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {\n    var _ref4;\n\n    if (_isArray4) {\n      if (_i5 >= _iterator4.length) break;\n      _ref4 = _iterator4[_i5++];\n    } else {\n      _i5 = _iterator4.next();\n      if (_i5.done) break;\n      _ref4 = _i5.value;\n    }\n\n    var character = _ref4;\n\n    if (character === symbol) {\n      count++;\n    }\n  }\n\n  return count;\n} // Repeats a string (or a symbol) N times.\n// http://stackoverflow.com/questions/202605/repeat-string-javascript\n\nexport function repeat(string, times) {\n  if (times < 1) {\n    return '';\n  }\n\n  var result = '';\n\n  while (times > 1) {\n    if (times & 1) {\n      result += string;\n    }\n\n    times >>= 1;\n    string += string;\n  }\n\n  return result + string;\n}\n/**\r\n * Extracts formatted phone number from text (if there's any).\r\n * @param  {string} text\r\n * @return {string} [formattedPhoneNumber]\r\n */\n\nfunction extractFormattedPhoneNumber(text) {\n  // Attempt to extract a possible number from the string passed in.\n  var startsAt = text.search(VALID_PHONE_NUMBER);\n\n  if (startsAt < 0) {\n    return;\n  } // Trim everything to the left of the phone number.\n\n\n  text = text.slice(startsAt); // Trim the `+`.\n\n  var hasPlus;\n\n  if (text[0] === '+') {\n    hasPlus = true;\n    text = text.slice('+'.length);\n  } // Trim everything to the right of the phone number.\n\n\n  text = text.replace(AFTER_PHONE_NUMBER_DIGITS_END_PATTERN, ''); // Re-add the previously trimmed `+`.\n\n  if (hasPlus) {\n    text = '+' + text;\n  }\n\n  return text;\n}","import { getCountryCallingCode } from 'libphonenumber-js/core';\nexport function getInputValuePrefix(country, international, metadata) {\n  return country && international ? \"+\".concat(getCountryCallingCode(country, metadata)) : '';\n}\nexport function removeInputValuePrefix(value, prefix) {\n  if (prefix) {\n    value = value.slice(prefix.length);\n\n    if (value[0] === ' ') {\n      value = value.slice(1);\n    }\n  }\n\n  return value;\n}","function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { useCallback } from 'react';\nimport Input from 'input-format/react';\nimport { AsYouType, parsePhoneNumberCharacter } from 'libphonenumber-js/core';\nimport { getInputValuePrefix, removeInputValuePrefix } from './inputValuePrefix';\n/**\r\n * This input uses `input-format` library\r\n * for \"smart\" caret positioning.\r\n */\n\nexport function createInput(defaultMetadata) {\n  function InputSmart(_ref, ref) {\n    var country = _ref.country,\n        international = _ref.international,\n        metadata = _ref.metadata,\n        rest = _objectWithoutProperties(_ref, [\"country\", \"international\", \"metadata\"]);\n\n    var format = useCallback(function (value) {\n      // \"As you type\" formatter.\n      var formatter = new AsYouType(country, metadata);\n      var prefix = getInputValuePrefix(country, international, metadata); // Format the number.\n\n      var text = formatter.input(prefix + value);\n      var template = formatter.getTemplate();\n\n      if (prefix) {\n        text = removeInputValuePrefix(text, prefix); // `AsYouType.getTemplate()` can be `undefined`.\n\n        if (template) {\n          template = removeInputValuePrefix(template, prefix);\n        }\n      }\n\n      return {\n        text: text,\n        template: template\n      };\n    }, [country, metadata]);\n    return React.createElement(Input, _extends({}, rest, {\n      ref: ref,\n      parse: parsePhoneNumberCharacter,\n      format: format\n    }));\n  }\n\n  InputSmart = React.forwardRef(InputSmart);\n  InputSmart.defaultProps = {\n    metadata: defaultMetadata\n  };\n  return InputSmart;\n}\nexport default createInput();","function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { useCallback } from 'react';\nimport { parseIncompletePhoneNumber, formatIncompletePhoneNumber } from 'libphonenumber-js/core';\nimport { getInputValuePrefix, removeInputValuePrefix } from './inputValuePrefix';\nexport function createInput(defaultMetadata) {\n  /**\r\n   * `InputBasic`'s caret is not as \"smart\" as the default `inputComponent`'s\r\n   * but still works good enough. When erasing or inserting digits in the middle\r\n   * of a phone number the caret usually jumps to the end: this is the expected\r\n   * behaviour and it's the workaround for the [Samsung Galaxy smart caret positioning bug](https://github.com/catamphetamine/react-phone-number-input/issues/75).\r\n   */\n  function InputBasic(_ref, ref) {\n    var value = _ref.value,\n        onChange = _ref.onChange,\n        country = _ref.country,\n        international = _ref.international,\n        metadata = _ref.metadata,\n        Input = _ref.inputComponent,\n        rest = _objectWithoutProperties(_ref, [\"value\", \"onChange\", \"country\", \"international\", \"metadata\", \"inputComponent\"]);\n\n    var prefix = getInputValuePrefix(country, international, metadata);\n\n    var _onChange = useCallback(function (event) {\n      var newValue = parseIncompletePhoneNumber(event.target.value); // By default, if a value is something like `\"(123)\"`\n      // then Backspace would only erase the rightmost brace\n      // becoming something like `\"(123\"`\n      // which would give the same `\"123\"` value\n      // which would then be formatted back to `\"(123)\"`\n      // and so a user wouldn't be able to erase the phone number.\n      // Working around this issue with this simple hack.\n\n      if (newValue === value) {\n        var newValueFormatted = format(prefix, newValue, country, metadata);\n\n        if (newValueFormatted.indexOf(event.target.value) === 0) {\n          // Trim the last digit (or plus sign).\n          newValue = newValue.slice(0, -1);\n        }\n      }\n\n      onChange(newValue);\n    }, [prefix, value, onChange, country, metadata]);\n\n    return React.createElement(Input, _extends({}, rest, {\n      ref: ref,\n      value: format(prefix, value, country, metadata),\n      onChange: _onChange\n    }));\n  }\n\n  InputBasic = React.forwardRef(InputBasic);\n  InputBasic.defaultProps = {\n    metadata: defaultMetadata,\n    inputComponent: 'input'\n  };\n  return InputBasic;\n}\nexport default createInput();\n\nfunction format(prefix, value, country, metadata) {\n  return removeInputValuePrefix(formatIncompletePhoneNumber(prefix + value, country, metadata), prefix);\n}","import AsYouType from './AsYouType';\n/**\r\n * Formats a (possibly incomplete) phone number.\r\n * The phone number can be either in E.164 format\r\n * or in a form of national number digits.\r\n * @param {string} value - A possibly incomplete phone number. Either in E.164 format or in a form of national number digits.\r\n * @param {string?} country - Two-letter (\"ISO 3166-1 alpha-2\") country code.\r\n * @return {string} Formatted (possibly incomplete) phone number.\r\n */\n\nexport default function formatIncompletePhoneNumber(value, country, metadata) {\n  if (!metadata) {\n    metadata = country;\n    country = undefined;\n  }\n\n  return new AsYouType(country, metadata).input(value);\n}","function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport classNames from 'classnames'; // Default country flag icon.\n// `<img/>` is wrapped in a `<div/>` to prevent SVGs from exploding in size in IE 11.\n// https://github.com/catamphetamine/react-phone-number-input/issues/111\n\nexport default function FlagComponent(_ref) {\n  var country = _ref.country,\n      countryName = _ref.countryName,\n      flags = _ref.flags,\n      flagUrl = _ref.flagUrl,\n      rest = _objectWithoutProperties(_ref, [\"country\", \"countryName\", \"flags\", \"flagUrl\"]);\n\n  if (flags && flags[country]) {\n    return flags[country]({\n      title: countryName\n    });\n  }\n\n  return React.createElement(\"img\", _extends({}, rest, {\n    alt: countryName,\n    role: \"presentation\",\n    src: flagUrl.replace('{XX}', country).replace('{xx}', country.toLowerCase())\n  }));\n}","function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nexport default function InternationalIcon(_ref) {\n  var aspectRatio = _ref.aspectRatio,\n      rest = _objectWithoutProperties(_ref, [\"aspectRatio\"]);\n\n  if (aspectRatio === 1) {\n    return React.createElement(InternationalIcon1x1, rest);\n  } else {\n    return React.createElement(InternationalIcon3x2, rest);\n  }\n}\n\n// 3x2.\n// Using `<title/>` in `<svg/>`s:\n// https://developer.mozilla.org/en-US/docs/Web/SVG/Element/title\nfunction InternationalIcon3x2(_ref2) {\n  var title = _ref2.title,\n      rest = _objectWithoutProperties(_ref2, [\"title\"]);\n\n  return React.createElement(\"svg\", _extends({}, rest, {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 75 50\"\n  }), React.createElement(\"title\", null, title), React.createElement(\"g\", {\n    className: \"PhoneInputInternationalIconGlobe\",\n    stroke: \"currentColor\",\n    fill: \"none\",\n    strokeWidth: \"2\",\n    strokeMiterlimit: \"10\"\n  }, React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    d: \"M47.2,36.1C48.1,36,49,36,50,36c7.4,0,14,1.7,18.5,4.3\"\n  }), React.createElement(\"path\", {\n    d: \"M68.6,9.6C64.2,12.3,57.5,14,50,14c-7.4,0-14-1.7-18.5-4.3\"\n  }), React.createElement(\"line\", {\n    x1: \"26\",\n    y1: \"25\",\n    x2: \"74\",\n    y2: \"25\"\n  }), React.createElement(\"line\", {\n    x1: \"50\",\n    y1: \"1\",\n    x2: \"50\",\n    y2: \"49\"\n  }), React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    d: \"M46.3,48.7c1.2,0.2,2.5,0.3,3.7,0.3c13.3,0,24-10.7,24-24S63.3,1,50,1S26,11.7,26,25c0,2,0.3,3.9,0.7,5.8\"\n  }), React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    d: \"M46.8,48.2c1,0.6,2.1,0.8,3.2,0.8c6.6,0,12-10.7,12-24S56.6,1,50,1S38,11.7,38,25c0,1.4,0.1,2.7,0.2,4c0,0.1,0,0.2,0,0.2\"\n  })), React.createElement(\"path\", {\n    className: \"PhoneInputInternationalIconPhone\",\n    stroke: \"none\",\n    fill: \"currentColor\",\n    d: \"M12.4,17.9c2.9-2.9,5.4-4.8,0.3-11.2S4.1,5.2,1.3,8.1C-2,11.4,1.1,23.5,13.1,35.6s24.3,15.2,27.5,11.9c2.8-2.8,7.8-6.3,1.4-11.5s-8.3-2.6-11.2,0.3c-2,2-7.2-2.2-11.7-6.7S10.4,19.9,12.4,17.9z\"\n  }));\n}\n\n// 1x1.\n// Using `<title/>` in `<svg/>`s:\n// https://developer.mozilla.org/en-US/docs/Web/SVG/Element/title\nfunction InternationalIcon1x1(_ref3) {\n  var title = _ref3.title,\n      rest = _objectWithoutProperties(_ref3, [\"title\"]);\n\n  return React.createElement(\"svg\", _extends({}, rest, {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 50 50\"\n  }), React.createElement(\"title\", null, title), React.createElement(\"g\", {\n    className: \"PhoneInputInternationalIconGlobe\",\n    stroke: \"currentColor\",\n    fill: \"none\",\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\"\n  }, React.createElement(\"path\", {\n    d: \"M8.45,13A21.44,21.44,0,1,1,37.08,41.56\"\n  }), React.createElement(\"path\", {\n    d: \"M19.36,35.47a36.9,36.9,0,0,1-2.28-13.24C17.08,10.39,21.88.85,27.8.85s10.72,9.54,10.72,21.38c0,6.48-1.44,12.28-3.71,16.21\"\n  }), React.createElement(\"path\", {\n    d: \"M17.41,33.4A39,39,0,0,1,27.8,32.06c6.62,0,12.55,1.5,16.48,3.86\"\n  }), React.createElement(\"path\", {\n    d: \"M44.29,8.53c-3.93,2.37-9.86,3.88-16.49,3.88S15.25,10.9,11.31,8.54\"\n  }), React.createElement(\"line\", {\n    x1: \"27.8\",\n    y1: \"0.85\",\n    x2: \"27.8\",\n    y2: \"34.61\"\n  }), React.createElement(\"line\", {\n    x1: \"15.2\",\n    y1: \"22.23\",\n    x2: \"49.15\",\n    y2: \"22.23\"\n  })), React.createElement(\"path\", {\n    className: \"PhoneInputInternationalIconPhone\",\n    stroke: \"transparent\",\n    fill: \"currentColor\",\n    d: \"M9.42,26.64c2.22-2.22,4.15-3.59.22-8.49S3.08,17,.93,19.17c-2.49,2.48-.13,11.74,9,20.89s18.41,11.5,20.89,9c2.15-2.15,5.91-4.77,1-8.71s-6.27-2-8.49.22c-1.55,1.55-5.48-1.69-8.86-5.08S7.87,28.19,9.42,26.64Z\"\n  }));\n}","import { isSupportedCountry } from 'libphonenumber-js/core';\nexport { getCountries } from 'libphonenumber-js/core';\n/**\r\n * Sorts country `<select/>` options.\r\n * Can move some country `<select/>` options\r\n * to the top of the list, for example.\r\n * @param  {object[]} countryOptions — Country `<select/>` options.\r\n * @param  {string[]} [countryOptionsOrder] — Country `<select/>` options order. Example: `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`.\r\n * @return {object[]}\r\n */\n\nexport function sortCountryOptions(options, order) {\n  if (!order) {\n    return options;\n  }\n\n  var optionsOnTop = [];\n  var optionsOnBottom = [];\n  var appendTo = optionsOnTop;\n\n  var _loop = function _loop() {\n    if (_isArray) {\n      if (_i >= _iterator.length) return \"break\";\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) return \"break\";\n      _ref = _i.value;\n    }\n\n    var element = _ref;\n\n    if (element === '|') {\n      appendTo.push({\n        divider: true\n      });\n    } else if (element === '...' || element === '…') {\n      appendTo = optionsOnBottom;\n    } else {\n      // Find the position of the option.\n      var index = options.indexOf(options.filter(function (option) {\n        return option.value === element;\n      })[0]); // Get the option.\n\n      var option = options[index]; // Remove the option from its default position.\n\n      options.splice(index, 1); // Add the option on top.\n\n      appendTo.push(option);\n    }\n  };\n\n  for (var _iterator = order, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    var _ret = _loop();\n\n    if (_ret === \"break\") break;\n  }\n\n  return optionsOnTop.concat(options).concat(optionsOnBottom);\n}\nexport function getSupportedCountryOptions(countryOptions, metadata) {\n  if (countryOptions) {\n    countryOptions = countryOptions.filter(function (option) {\n      switch (option) {\n        case '|':\n        case '...':\n        case '…':\n          return true;\n\n        default:\n          return isCountrySupportedWithError(option, metadata);\n      }\n    });\n\n    if (countryOptions.length > 0) {\n      return countryOptions;\n    }\n  }\n}\nexport function isCountrySupportedWithError(country, metadata) {\n  if (isSupportedCountry(country, metadata)) {\n    return true;\n  } else {\n    console.error(\"Country not found: \".concat(country));\n    return false;\n  }\n}\nexport function getSupportedCountries(countries, metadata) {\n  if (countries) {\n    countries = countries.filter(function (country) {\n      return isCountrySupportedWithError(country, metadata);\n    });\n\n    if (countries.length === 0) {\n      countries = undefined;\n    }\n  }\n\n  return countries;\n}","import React from 'react';\nimport classNames from 'classnames';\nimport DefaultInternationalIcon from './InternationalIcon';\nimport Flag from './Flag';\nexport function createCountryIconComponent(_ref) {\n  var flags = _ref.flags,\n      flagUrl = _ref.flagUrl,\n      FlagComponent = _ref.flagComponent,\n      InternationalIcon = _ref.internationalIcon;\n\n  function CountryIcon(_ref2) {\n    var country = _ref2.country,\n        label = _ref2.label,\n        aspectRatio = _ref2.aspectRatio; // `aspectRatio` is currently a hack for the default \"International\" icon\n    // to render it as a square when Unicode flag icons are used.\n    // So `aspectRatio` property is only used with the default \"International\" icon.\n\n    var _aspectRatio = InternationalIcon === DefaultInternationalIcon ? aspectRatio : undefined;\n\n    return React.createElement(\"div\", {\n      className: classNames('PhoneInputCountryIcon', {\n        'PhoneInputCountryIcon--square': _aspectRatio === 1,\n        'PhoneInputCountryIcon--border': country\n      })\n    }, country ? React.createElement(FlagComponent, {\n      country: country,\n      countryName: label,\n      flags: flags,\n      flagUrl: flagUrl,\n      className: \"PhoneInputCountryIconImg\"\n    }) : React.createElement(InternationalIcon, {\n      title: label,\n      aspectRatio: _aspectRatio,\n      className: \"PhoneInputCountryIconImg\"\n    }));\n  }\n\n  return CountryIcon;\n}\nexport default createCountryIconComponent({\n  // Must be equal to `defaultProps.flagUrl` in `./PhoneInputWithCountry.js`.\n  flagUrl: 'https://catamphetamine.gitlab.io/country-flag-icons/3x2/{XX}.svg',\n  flagComponent: Flag,\n  internationalIcon: DefaultInternationalIcon\n});","import { parsePhoneNumberFromString, getCountryCallingCode, AsYouType, Metadata } from 'libphonenumber-js/core';\n/**\r\n * Decides which country should be pre-selected\r\n * when the phone number input component is first mounted.\r\n * @param  {object?} phoneNumber - An instance of `PhoneNumber` class.\r\n * @param  {string?} country - Pre-defined country (two-letter code).\r\n * @param  {string[]?} countries - A list of countries available.\r\n * @param  {boolean} includeInternationalOption - Whether \"International\" country option is available.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {string?}\r\n */\n\nexport function getPreSelectedCountry(phoneNumber, country, countries, includeInternationalOption, metadata) {\n  // If can get country from E.164 phone number\n  // then it overrides the `country` passed (or not passed).\n  if (phoneNumber && phoneNumber.country) {\n    // `country` will be left `undefined` in case of non-detection.\n    country = phoneNumber.country;\n  } // Only pre-select a country if it's in the available `countries` list.\n\n\n  if (countries && countries.indexOf(country) < 0) {\n    country = undefined;\n  } // If there will be no \"International\" option\n  // then some `country` must be selected.\n  // It will still be the wrong country though.\n  // But still country `<select/>` can't be left in a broken state.\n\n\n  if (!country && !includeInternationalOption && countries && countries.length > 0) {\n    country = countries[0];\n  }\n\n  return country;\n}\n/**\r\n * Generates a sorted list of country `<select/>` options.\r\n * @param  {string[]} countries - A list of two-letter (\"ISO 3166-1 alpha-2\") country codes.\r\n * @param  {object} labels - Custom country labels. E.g. `{ RU: 'Россия', US: 'США', ... }`.\r\n * @param  {boolean} includeInternationalOption - Whether should include \"International\" option at the top of the list.\r\n * @return {object[]} A list of objects having shape `{ value : string, label : string }`.\r\n */\n\nexport function getCountrySelectOptions(countries, country_names, includeInternationalOption, locales) {\n  var compare_strings = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : compareStrings; // Generates a `<Select/>` option for each country.\n\n  var country_select_options = countries.map(function (country) {\n    return {\n      value: country,\n      // All `locale` country names included in this library\n      // include all countries (this is checked at build time).\n      // The only case when a country name might be missing\n      // is when a developer supplies their own `labels` property.\n      // To guard against such cases, a missing country name\n      // is substituted by country code.\n      label: country_names[country] || country\n    };\n  }); // Sort the list of countries alphabetically.\n\n  country_select_options.sort(function (a, b) {\n    return compare_strings(a.label, b.label, locales);\n  }); // Add the \"International\" option to the country list (if suitable)\n\n  if (includeInternationalOption) {\n    country_select_options.unshift({\n      label: country_names.ZZ\n    });\n  }\n\n  return country_select_options;\n}\n/**\r\n * Parses a E.164 phone number to an instance of `PhoneNumber` class.\r\n * @param {string?} value = E.164 phone number.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {object} Object having shape `{ country: string?, countryCallingCode: string, number: string }`. `PhoneNumber`: https://gitlab.com/catamphetamine/libphonenumber-js#phonenumber.\r\n * @example\r\n * parsePhoneNumber('+78005553535')\r\n */\n\nexport function parsePhoneNumber(value, metadata) {\n  return parsePhoneNumberFromString(value || '', metadata);\n}\n/**\r\n * Generates national number digits for a parsed phone.\r\n * May prepend national prefix.\r\n * The phone number must be a complete and valid phone number.\r\n * @param  {object} phoneNumber - An instance of `PhoneNumber` class.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {string}\r\n * @example\r\n * getNationalNumberDigits({ country: 'RU', phone: '8005553535' })\r\n * // returns '88005553535'\r\n */\n\nexport function generateNationalNumberDigits(phoneNumber) {\n  return phoneNumber.formatNational().replace(/\\D/g, '');\n}\n/**\r\n * Migrates parsed `<input/>` `value` for the newly selected `country`.\r\n * @param {string?} value - The `value` parsed from phone number `<input/>` (it's the `parsed_input` state property, not the `value` property).\r\n * @param {string?} previousCountry - Previously selected country.\r\n * @param {string?} newCountry - Newly selected country. Can't be same as previously selected country.\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @param {boolean} preferNationalFormat - whether should attempt to convert from international to national number for the new country.\r\n * @return {string?}\r\n */\n\nexport function migrateParsedInputForNewCountry(value, previous_country, new_country, metadata, preferNationalFormat) {\n  // If `parsed_input` is empty\n  // then no need to migrate anything.\n  if (!value) {\n    if (preferNationalFormat) {\n      return '';\n    } else {\n      // If `parsedInput` is empty then set `parsedInput` to\n      // `+{getCountryCallingCode(newCountry)}`.\n      return '+' + getCountryCallingCode(new_country, metadata);\n    }\n  } // If switching to some country.\n  // (from \"International\" or another country)\n  // If switching from \"International\" then `value` starts with a `+`.\n  // Otherwise it may or may not start with a `+`.\n\n\n  if (new_country) {\n    // If the phone number was entered in international format\n    // then migrate it to the newly selected country.\n    // The phone number may be incomplete.\n    // The phone number entered not necessarily starts with\n    // the previously selected country phone prefix.\n    if (value[0] === '+') {\n      // If the international phone number is for the new country\n      // then convert it to local if required.\n      if (preferNationalFormat) {\n        // // If a phone number is being input in international form\n        // // and the country can already be derived from it,\n        // // and if it is the new country, then format as a national number.\n        // const derived_country = get_country_from_possibly_incomplete_international_phone_number(value, metadata)\n        // if (derived_country === new_country)\n        // {\n        // \treturn strip_country_calling_code(value, derived_country, metadata)\n        // }\n        // Actually, the two countries don't necessarily need to match:\n        // the condition could be looser here, because several countries\n        // might share the same international phone number format\n        // (for example, \"NANPA\" countries like US, Canada, etc).\n        // The looser condition would be just \"same nternational phone number format\"\n        // which would mean \"same country calling code\" in the context of `libphonenumber-js`.\n        if (value.indexOf('+' + getCountryCallingCode(new_country, metadata)) === 0) {\n          return strip_country_calling_code(value, new_country, metadata);\n        } // Simply discard the previously entered international phone number,\n        // because otherwise any \"smart\" transformation like getting the\n        // \"national (significant) number\" part and then prepending the\n        // newly selected country's \"country calling code\" to it\n        // would just be confusing for a user without being actually useful.\n\n\n        return ''; // // Simply strip the leading `+` character\n        // // therefore simply converting all digits into a \"local\" phone number.\n        // // https://github.com/catamphetamine/react-phone-number-input/issues/287\n        // return value.slice(1)\n      }\n\n      if (previous_country) {\n        if (getCountryCallingCode(new_country, metadata) === getCountryCallingCode(previous_country, metadata)) {\n          return value;\n        } else {\n          return \"+\".concat(getCountryCallingCode(new_country, metadata));\n        }\n      } else {\n        var defaultValue = \"+\".concat(getCountryCallingCode(new_country, metadata)); // If `parsedInput`'s country calling code part is the same\n        // as for the new `country`, then leave `parsedInput` as is.\n\n        if (value.indexOf(defaultValue) === 0) {\n          return value;\n        } // If `parsedInput`'s country calling code part is not the same\n        // as for the new `country`, then set `parsedInput` to\n        // `+{getCountryCallingCode(newCountry)}`.\n\n\n        return defaultValue;\n      } // // If the international phone number already contains\n      // // any country calling code then trim the country calling code part.\n      // // (that could also be the newly selected country phone code prefix as well)\n      // // `value` doesn't neccessarily belong to `previous_country`.\n      // // (e.g. if a user enters an international number\n      // //  not belonging to any of the reduced `countries` list).\n      // value = strip_country_calling_code(value, previous_country, metadata)\n      // // Prepend country calling code prefix\n      // // for the newly selected country.\n      // return e164(value, new_country, metadata) || `+${getCountryCallingCode(new_country, metadata)}`\n\n    }\n  } // If switching to \"International\" from a country.\n  else {\n      // If the phone number was entered in national format.\n      if (value[0] !== '+') {\n        // Format the national phone number as an international one.\n        // The phone number entered not necessarily even starts with\n        // the previously selected country phone prefix.\n        // Even if the phone number belongs to whole another country\n        // it will still be parsed into some national phone number.\n        return e164(value, previous_country, metadata) || '';\n      }\n    }\n\n  return value;\n}\n/**\r\n * Converts phone number digits to a (possibly incomplete) E.164 phone number.\r\n * @param  {string?} number - A possibly incomplete phone number digits string. Can be a possibly incomplete E.164 phone number.\r\n * @param  {string?} country\r\n * @param  {[object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\n\nexport function e164(number, country, metadata) {\n  if (!number) {\n    return;\n  } // If the phone number is being input in international format.\n\n\n  if (number[0] === '+') {\n    // If it's just the `+` sign then return nothing.\n    if (number === '+') {\n      return;\n    } // If there are any digits then the `value` is returned as is.\n\n\n    return number;\n  } // For non-international phone numbers\n  // an accompanying country code is required.\n\n\n  if (!country) {\n    return;\n  }\n\n  var partial_national_significant_number = getNationalSignificantNumberDigits(number, country, metadata);\n\n  if (partial_national_significant_number) {\n    return \"+\".concat(getCountryCallingCode(country, metadata)).concat(partial_national_significant_number);\n  }\n}\n/**\r\n * Trims phone number digits if they exceed the maximum possible length\r\n * for a national (significant) number for the country.\r\n * @param  {string} number - A possibly incomplete phone number digits string. Can be a possibly incomplete E.164 phone number.\r\n * @param  {string} country\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string} Can be empty.\r\n */\n\nexport function trimNumber(number, country, metadata) {\n  var nationalSignificantNumberPart = getNationalSignificantNumberDigits(number, country, metadata);\n\n  if (nationalSignificantNumberPart) {\n    var overflowDigitsCount = nationalSignificantNumberPart.length - getMaxNumberLength(country, metadata);\n\n    if (overflowDigitsCount > 0) {\n      return number.slice(0, number.length - overflowDigitsCount);\n    }\n  }\n\n  return number;\n}\n\nfunction getMaxNumberLength(country, metadata) {\n  // Get \"possible lengths\" for a phone number of the country.\n  metadata = new Metadata(metadata);\n  metadata.country(country); // Return the last \"possible length\".\n\n  return metadata.possibleLengths()[metadata.possibleLengths().length - 1];\n} // If the phone number being input is an international one\n// then tries to derive the country from the phone number.\n// (regardless of whether there's any country currently selected)\n\n/**\r\n * @param {string} parsedInput - A possibly incomplete E.164 phone number.\r\n * @param {string?} country - Currently selected country.\r\n * @param {string[]?} countries - A list of available countries. If not passed then \"all countries\" are assumed.\r\n * @param {boolean} includeInternationalOption - Whether \"International\" country option is available.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\n\n\nexport function getCountryForPartialE164Number(partialE164Number, country, countries, includeInternationalOption, metadata) {\n  if (partialE164Number === '+') {\n    // Don't change the currently selected country yet.\n    return country;\n  }\n\n  var derived_country = get_country_from_possibly_incomplete_international_phone_number(partialE164Number, metadata); // If a phone number is being input in international form\n  // and the country can already be derived from it,\n  // then select that country.\n\n  if (derived_country && (!countries || countries.indexOf(derived_country) >= 0)) {\n    return derived_country;\n  } // If \"International\" country option has not been disabled\n  // and the international phone number entered doesn't correspond\n  // to the currently selected country then reset the currently selected country.\n  else if (country && includeInternationalOption && !could_number_belong_to_country(partialE164Number, country, metadata)) {\n      return undefined;\n    } // Don't change the currently selected country.\n\n\n  return country;\n}\n/**\r\n * Parses `<input/>` value. Derives `country` from `input`. Derives an E.164 `value`.\r\n * @param  {string?} input — Parsed `<input/>` value. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n * @param  {string?} prevInput — Previous parsed `<input/>` value. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n * @param  {string?} country - Currently selected country.\r\n * @param  {string[]?} countries - A list of available countries. If not passed then \"all countries\" are assumed.\r\n * @param  {boolean} includeInternationalOption - Whether \"International\" country option is available.\r\n * @param  {boolean} international - Set to `true` to force international phone number format (leading `+`).\r\n * @param  {boolean} limitMaxLength — Whether to enable limiting phone number max length.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {object} An object of shape `{ input, country, value }`.\r\n */\n\nexport function parseInput(input, prevInput, country, defaultCountry, countries, includeInternationalOption, international, limitMaxLength, metadata) {\n  // Trim the input to not exceed the maximum possible number length.\n  if (input && country && limitMaxLength) {\n    input = trimNumber(input, country, metadata);\n  } // If this `onChange()` event was triggered\n  // as a result of selecting \"International\" country\n  // then force-prepend a `+` sign if the phone number\n  // `<input/>` value isn't in international format.\n  // Also, force-prepend a `+` sign if international\n  // phone number input format is set.\n\n\n  if (input && input[0] !== '+' && (!country || international)) {\n    input = '+' + input;\n  } // If the previously entered phone number\n  // has been entered in international format\n  // and the user decides to erase it,\n  // then also reset the `country`\n  // because it was most likely automatically selected\n  // while the user was typing in the phone number\n  // in international format.\n  // This fixes the issue when a user is presented\n  // with a phone number input with no country selected\n  // and then types in their local phone number\n  // then discovers that the input's messed up\n  // (a `+` has been prepended at the start of their input\n  //  and a random country has been selected),\n  // decides to undo it all by erasing everything\n  // and then types in their local phone number again\n  // resulting in a seemingly correct phone number\n  // but in reality that phone number has incorrect country.\n  // https://github.com/catamphetamine/react-phone-number-input/issues/273\n\n\n  if (!input && prevInput && prevInput[0] === '+') {\n    if (international) {\n      country = undefined;\n    } else {\n      country = defaultCountry;\n    }\n  } // Also resets such \"randomly\" selected country\n  // as soon as the user erases the number\n  // digit-by-digit up to the leading `+` sign.\n\n\n  if (input === '+' && prevInput && prevInput[0] === '+' && prevInput.length > '+'.length) {\n    country = undefined;\n  } // Generate the new `value` property.\n\n\n  var value;\n\n  if (input) {\n    if (input[0] === '+') {\n      if (input !== '+') {\n        value = input;\n      }\n    } else {\n      value = e164(input, country, metadata);\n    }\n  } // Derive the country from the phone number.\n  // (regardless of whether there's any country currently selected)\n\n\n  if (value) {\n    country = getCountryForPartialE164Number(value, country, countries, includeInternationalOption, metadata);\n  }\n\n  return {\n    input: input,\n    country: country,\n    value: value\n  };\n}\n/**\r\n * Determines the country for a given (possibly incomplete) E.164 phone number.\r\n * @param  {string} number - A possibly incomplete E.164 phone number.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\n\nexport function get_country_from_possibly_incomplete_international_phone_number(number, metadata) {\n  var formatter = new AsYouType(null, metadata);\n  formatter.input(number); // // `001` is a special \"non-geograpical entity\" code\n  // // in Google's `libphonenumber` library.\n  // if (formatter.country === '001') {\n  // \treturn\n  // }\n\n  return formatter.country;\n}\n/**\r\n * Compares two strings.\r\n * A helper for `Array.sort()`.\r\n * @param {string} a — First string.\r\n * @param {string} b — Second string.\r\n * @param {(string[]|string)} [locales] — The `locales` argument of `String.localeCompare`.\r\n */\n\nexport function compareStrings(a, b, locales) {\n  // Use `String.localeCompare` if it's available.\n  // https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\n  // Which means everyone except IE <= 10 and Safari <= 10.\n  // `localeCompare()` is available in latest Node.js versions.\n\n  /* istanbul ignore else */\n  if (String.prototype.localeCompare) {\n    return a.localeCompare(b, locales);\n  }\n  /* istanbul ignore next */\n\n\n  return a < b ? -1 : a > b ? 1 : 0;\n}\n/**\r\n * Strips `+${countryCallingCode}` prefix from an E.164 phone number.\r\n * @param {string} number - (possibly incomplete) E.164 phone number.\r\n * @param {string?} country - A possible country for this phone number.\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string}\r\n */\n\nexport function strip_country_calling_code(number, country, metadata) {\n  // Just an optimization, so that it\n  // doesn't have to iterate through all country calling codes.\n  if (country) {\n    var country_calling_prefix = '+' + getCountryCallingCode(country, metadata); // If `country` fits the actual `number`.\n\n    if (number.length < country_calling_prefix.length) {\n      if (country_calling_prefix.indexOf(number) === 0) {\n        return '';\n      }\n    } else {\n      if (number.indexOf(country_calling_prefix) === 0) {\n        return number.slice(country_calling_prefix.length);\n      }\n    }\n  } // If `country` doesn't fit the actual `number`.\n  // Try all available country calling codes.\n\n\n  for (var _i = 0, _Object$keys = Object.keys(metadata.country_calling_codes); _i < _Object$keys.length; _i++) {\n    var country_calling_code = _Object$keys[_i];\n\n    if (number.indexOf(country_calling_code) === '+'.length) {\n      return number.slice('+'.length + country_calling_code.length);\n    }\n  }\n\n  return '';\n}\n/**\r\n * Parses a partially entered national phone number digits\r\n * (or a partially entered E.164 international phone number)\r\n * and returns the national significant number part.\r\n * National significant number returned doesn't come with a national prefix.\r\n * @param {string} number - National number digits. Or possibly incomplete E.164 phone number.\r\n * @param {string?} country\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string} [result]\r\n */\n\nexport function getNationalSignificantNumberDigits(number, country, metadata) {\n  // Create \"as you type\" formatter.\n  var formatter = new AsYouType(country, metadata); // Input partial national phone number.\n\n  formatter.input(number); // Return the parsed partial national phone number.\n\n  var phoneNumber = formatter.getNumber();\n  return phoneNumber && phoneNumber.nationalNumber;\n}\n/**\r\n * Checks if a partially entered E.164 phone number could belong to a country.\r\n * @param  {string} number\r\n * @param  {string} country\r\n * @return {boolean}\r\n */\n\nexport function could_number_belong_to_country(number, country, metadata) {\n  var country_calling_code = getCountryCallingCode(country, metadata);\n  var i = 0;\n\n  while (i + 1 < number.length && i < country_calling_code.length) {\n    if (number[i + 1] !== country_calling_code[i]) {\n      return false;\n    }\n\n    i++;\n  }\n\n  return true;\n}\nexport function getInitialParsedInput(value, country, international, metadata) {\n  // If `international` property is `true`,\n  // then always show country calling code in the input field.\n  if (!value && international && country) {\n    return \"+\".concat(getCountryCallingCode(country, metadata));\n  }\n\n  return value;\n}","function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport InputSmart from './InputSmart';\nimport InputBasic from './InputBasic';\nimport Flag from './Flag';\nimport InternationalIcon from './InternationalIcon';\nimport { sortCountryOptions, isCountrySupportedWithError, getSupportedCountries, getSupportedCountryOptions, getCountries } from './countries';\nimport { createCountryIconComponent } from './CountryIcon';\nimport { metadata as metadataPropType, labels as labelsPropType } from './PropTypes';\nimport { getPreSelectedCountry, getCountrySelectOptions, parsePhoneNumber, generateNationalNumberDigits, migrateParsedInputForNewCountry, getCountryForPartialE164Number, getInitialParsedInput, parseInput, e164 } from './phoneInputHelpers';\n\nvar PhoneNumberInput_ = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(PhoneNumberInput_, _React$PureComponent);\n\n  function PhoneNumberInput_(props) {\n    var _this;\n\n    _classCallCheck(this, PhoneNumberInput_);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PhoneNumberInput_).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"inputRef\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"isCountrySupportedWithError\", function (country) {\n      var metadata = _this.props.metadata;\n      return isCountrySupportedWithError(country, metadata);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCountryChange\", function (newCountry) {\n      var _this$props = _this.props,\n          international = _this$props.international,\n          metadata = _this$props.metadata,\n          onChange = _this$props.onChange;\n      var _this$state = _this.state,\n          prevParsedInput = _this$state.parsedInput,\n          prevCountry = _this$state.country; // After the new `country` has been selected,\n      // if the phone number `<input/>` holds any digits\n      // then migrate those digits for the new `country`.\n\n      var newParsedInput = migrateParsedInputForNewCountry(prevParsedInput, prevCountry, newCountry, metadata, // Convert the phone number to \"national\" format\n      // when the user changes the selected country by hand.\n      international ? false : true);\n      var newValue = e164(newParsedInput, newCountry, metadata); // Focus phone number `<input/>` upon country selection.\n\n      _this.getInputRef().current.focus(); // If the user has already manually selected a country\n      // then don't override that already selected country\n      // if the `defaultCountry` property changes.\n      // That's what `hasUserSelectedACountry` flag is for.\n\n\n      _this.setState({\n        country: newCountry,\n        hasUserSelectedACountry: true,\n        parsedInput: newParsedInput,\n        value: newValue\n      }, function () {\n        // Update the new `value` property.\n        // Doing it after the `state` has been updated\n        // because `onChange()` will trigger `getDerivedStateFromProps()`\n        // with the new `value` which will be compared to `state.value` there.\n        onChange(newValue);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onChange\", function (_input) {\n      var _this$props2 = _this.props,\n          defaultCountry = _this$props2.defaultCountry,\n          onChange = _this$props2.onChange,\n          addInternationalOption = _this$props2.addInternationalOption,\n          international = _this$props2.international,\n          limitMaxLength = _this$props2.limitMaxLength,\n          metadata = _this$props2.metadata;\n\n      var _parseInput = parseInput(_input, _this.state.parsedInput, _this.state.country, defaultCountry, _this.state.countries, addInternationalOption, international, limitMaxLength, metadata),\n          input = _parseInput.input,\n          country = _parseInput.country,\n          value = _parseInput.value;\n\n      _this.setState({\n        parsedInput: input,\n        value: value,\n        country: country\n      }, // Update the new `value` property.\n      // Doing it after the `state` has been updated\n      // because `onChange()` will trigger `getDerivedStateFromProps()`\n      // with the new `value` which will be compared to `state.value` there.\n      function () {\n        return onChange(value);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onFocus\", function () {\n      return _this.setState({\n        isFocused: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onBlur\", function () {\n      return _this.setState({\n        isFocused: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFocus\", function (event) {\n      _this._onFocus();\n\n      var onFocus = _this.props.onFocus;\n\n      if (onFocus) {\n        onFocus(event);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onBlur\", function (event) {\n      var onBlur = _this.props.onBlur;\n\n      _this._onBlur();\n\n      if (onBlur) {\n        onBlur(event);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCountryFocus\", function (event) {\n      _this._onFocus(); // this.setState({ countrySelectFocused: true })\n\n\n      var countrySelectProps = _this.props.countrySelectProps;\n\n      if (countrySelectProps) {\n        var onFocus = countrySelectProps.onFocus;\n\n        if (onFocus) {\n          onFocus(event);\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCountryBlur\", function (event) {\n      _this._onBlur(); // this.setState({ countrySelectFocused: false })\n\n\n      var countrySelectProps = _this.props.countrySelectProps;\n\n      if (countrySelectProps) {\n        var onBlur = countrySelectProps.onBlur;\n\n        if (onBlur) {\n          onBlur(event);\n        }\n      }\n    });\n\n    var _this$props3 = _this.props,\n        _value = _this$props3.value,\n        labels = _this$props3.labels,\n        _addInternationalOption = _this$props3.addInternationalOption,\n        _metadata = _this$props3.metadata,\n        countryOptionsOrder = _this$props3.countryOptionsOrder;\n    var _this$props4 = _this.props,\n        _defaultCountry = _this$props4.defaultCountry,\n        countries = _this$props4.countries; // Validate `defaultCountry`.\n\n    if (_defaultCountry) {\n      if (!_this.isCountrySupportedWithError(_defaultCountry)) {\n        _defaultCountry = undefined;\n      }\n    } // Validate `countries`.\n\n\n    countries = getSupportedCountries(countries, _metadata);\n    var phoneNumber = parsePhoneNumber(_value, _metadata);\n    _this.CountryIcon = createCountryIconComponent(_this.props);\n    _this.state = {\n      // Workaround for `this.props` inside `getDerivedStateFromProps()`.\n      props: _this.props,\n      // The country selected.\n      country: getPreSelectedCountry(phoneNumber, _defaultCountry, countries || getCountries(_metadata), _addInternationalOption, _metadata),\n      // `countries` are stored in `this.state` because they're filtered.\n      // For example, a developer might theoretically pass some unsupported\n      // countries as part of the `countries` property, and because of that\n      // the component uses `this.state.countries` (which are filtered)\n      // instead of `this.props.countries`\n      // (which could potentially contain unsupported countries).\n      countries: countries,\n      // `parsedInput` state property holds non-formatted user's input.\n      // The reason is that there's no way of finding out\n      // in which form should `value` be displayed: international or national.\n      // E.g. if `value` is `+78005553535` then it could be input\n      // by a user both as `8 (800) 555-35-35` and `+7 800 555 35 35`.\n      // Hence storing just `value`is not sufficient for correct formatting.\n      // E.g. if a user entered `8 (800) 555-35-35`\n      // then value is `+78005553535` and `parsedInput` is `88005553535`\n      // and if a user entered `+7 800 555 35 35`\n      // then value is `+78005553535` and `parsedInput` is `+78005553535`.\n      parsedInput: generateInitialParsedInput(_value, phoneNumber, _this.props),\n      // `value` property is duplicated in state.\n      // The reason is that `getDerivedStateFromProps()`\n      // needs this `value` to compare to the new `value` property\n      // to find out if `parsedInput` needs updating:\n      // If the `value` property was changed externally\n      // then it won't be equal to `state.value`\n      // in which case `parsedInput` and `country` should be updated.\n      value: _value\n    };\n    return _this;\n  }\n\n  _createClass(PhoneNumberInput_, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var onCountryChange = this.props.onCountryChange;\n      var defaultCountry = this.props.defaultCountry;\n      var selectedCountry = this.state.country;\n\n      if (onCountryChange) {\n        if (defaultCountry) {\n          if (!this.isCountrySupportedWithError(defaultCountry)) {\n            defaultCountry = undefined;\n          }\n        }\n\n        if (selectedCountry !== defaultCountry) {\n          onCountryChange(selectedCountry);\n        }\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var onCountryChange = this.props.onCountryChange;\n      var country = this.state.country; // Call `onCountryChange` when user selects another country.\n\n      if (onCountryChange && country !== prevState.country) {\n        onCountryChange(country);\n      }\n    } // A shorthand for not passing `metadata` as a second argument.\n\n  }, {\n    key: \"getInputRef\",\n    value: function getInputRef() {\n      var inputRef = this.props.inputRef;\n      return inputRef || this.inputRef;\n    } // `state` holds previous props as `props`, and also:\n    // * `country` — The currently selected country, e.g. `\"RU\"`.\n    // * `value` — The currently entered phone number (E.164), e.g. `+78005553535`.\n    // * `parsedInput` — The parsed `<input/>` value, e.g. `8005553535`.\n    // (and a couple of other less significant properties)\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props5 = this.props,\n          name = _this$props5.name,\n          disabled = _this$props5.disabled,\n          autoComplete = _this$props5.autoComplete,\n          style = _this$props5.style,\n          className = _this$props5.className,\n          inputRef = _this$props5.inputRef,\n          inputComponent = _this$props5.inputComponent,\n          numberInputProps = _this$props5.numberInputProps,\n          smartCaret = _this$props5.smartCaret,\n          CountrySelectComponent = _this$props5.countrySelectComponent,\n          countrySelectProps = _this$props5.countrySelectProps,\n          ContainerComponent = _this$props5.containerComponent,\n          defaultCountry = _this$props5.defaultCountry,\n          countries = _this$props5.countries,\n          countryOptionsOrder = _this$props5.countryOptionsOrder,\n          labels = _this$props5.labels,\n          flags = _this$props5.flags,\n          flagComponent = _this$props5.flagComponent,\n          flagUrl = _this$props5.flagUrl,\n          addInternationalOption = _this$props5.addInternationalOption,\n          internationalIcon = _this$props5.internationalIcon,\n          displayInitialValueAsLocalNumber = _this$props5.displayInitialValueAsLocalNumber,\n          onCountryChange = _this$props5.onCountryChange,\n          limitMaxLength = _this$props5.limitMaxLength,\n          reset = _this$props5.reset,\n          metadata = _this$props5.metadata,\n          international = _this$props5.international,\n          locales = _this$props5.locales,\n          rest = _objectWithoutProperties(_this$props5, [\"name\", \"disabled\", \"autoComplete\", \"style\", \"className\", \"inputRef\", \"inputComponent\", \"numberInputProps\", \"smartCaret\", \"countrySelectComponent\", \"countrySelectProps\", \"containerComponent\", \"defaultCountry\", \"countries\", \"countryOptionsOrder\", \"labels\", \"flags\", \"flagComponent\", \"flagUrl\", \"addInternationalOption\", \"internationalIcon\", \"displayInitialValueAsLocalNumber\", \"onCountryChange\", \"limitMaxLength\", \"reset\", \"metadata\", \"international\", \"locales\"]);\n\n      var _this$state2 = this.state,\n          country = _this$state2.country,\n          parsedInput = _this$state2.parsedInput,\n          isFocused = _this$state2.isFocused;\n      var InputComponent = smartCaret ? InputSmart : InputBasic;\n      var countrySelectOptions = useMemoCountrySelectOptions(function () {\n        return sortCountryOptions(getCountrySelectOptions(countries || getCountries(metadata), labels, addInternationalOption, locales // compareStrings\n        ), getSupportedCountryOptions(countryOptionsOrder, metadata));\n      }, [countries, countryOptionsOrder, addInternationalOption, labels, metadata]);\n      return React.createElement(ContainerComponent, {\n        style: style,\n        className: classNames(className, 'PhoneInput', {\n          'PhoneInput--focus': isFocused\n        })\n      }, React.createElement(CountrySelectComponent, _extends({\n        name: name ? \"\".concat(name, \"Country\") : undefined,\n        \"aria-label\": labels.country\n      }, countrySelectProps, {\n        value: country,\n        options: countrySelectOptions,\n        onChange: this.onCountryChange,\n        onFocus: this.onCountryFocus,\n        onBlur: this.onCountryBlur,\n        disabled: disabled || countrySelectProps && countrySelectProps.disabled,\n        iconComponent: this.CountryIcon\n      })), React.createElement(InputComponent, _extends({\n        ref: this.getInputRef(),\n        type: \"tel\",\n        autoComplete: autoComplete\n      }, numberInputProps, rest, {\n        name: name,\n        metadata: metadata,\n        country: country,\n        value: parsedInput || '',\n        onChange: this.onChange,\n        onFocus: this.onFocus,\n        onBlur: this.onBlur,\n        disabled: disabled,\n        inputComponent: inputComponent,\n        className: classNames('PhoneInputInput', numberInputProps && numberInputProps.className, rest.className)\n      })));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      var country = state.country,\n          hasUserSelectedACountry = state.hasUserSelectedACountry,\n          value = state.value,\n          _state$props = state.props,\n          prevDefaultCountry = _state$props.defaultCountry,\n          prevValue = _state$props.value,\n          prevReset = _state$props.reset;\n      var metadata = props.metadata,\n          countries = props.countries,\n          newDefaultCountry = props.defaultCountry,\n          newValue = props.value,\n          newReset = props.reset,\n          international = props.international;\n      var newState = {\n        // Emulate `prevProps` via `state.props`.\n        props: props,\n        // If the user has already manually selected a country\n        // then don't override that already selected country\n        // if the `defaultCountry` property changes.\n        // That's what `hasUserSelectedACountry` flag is for.\n        hasUserSelectedACountry: hasUserSelectedACountry\n      }; // Some users requested a way to reset the component\n      // (both number `<input/>` and country `<select/>`).\n      // Whenever `reset` property changes both number `<input/>`\n      // and country `<select/>` are reset.\n      // It's not implemented as some instance `.reset()` method\n      // because `ref` is forwarded to `<input/>`.\n      // It's also not replaced with just resetting `country` on\n      // external `value` reset, because a user could select a country\n      // and then not input any `value`, and so the selected country\n      // would be \"stuck\", if not using this `reset` property.\n      // https://github.com/catamphetamine/react-phone-number-input/issues/300\n\n      if (newReset !== prevReset) {\n        return _objectSpread({}, newState, {\n          parsedInput: undefined,\n          value: undefined,\n          country: newDefaultCountry,\n          hasUserSelectedACountry: undefined\n        });\n      } // If the default country changed.\n      // (e.g. in case of ajax GeoIP detection after page loaded)\n      // then select it but only if the user hasn't already manually\n      // selected a country and no phone number has been entered so far.\n      // Because if the user has already started inputting a phone number\n      // then he's okay with no country being selected at all (\"International\")\n      // and doesn't want to be disturbed, doesn't want his input to be screwed, etc.\n\n\n      if (newDefaultCountry !== prevDefaultCountry && !hasUserSelectedACountry && (!value && !newValue || international && value === getInitialParsedInput(undefined, prevDefaultCountry, international, metadata) && value === getInitialParsedInput(undefined, newDefaultCountry, international, metadata))) {\n        return _objectSpread({}, newState, {\n          country: isCountrySupportedWithError(newDefaultCountry, metadata) ? newDefaultCountry : prevDefaultCountry,\n          // If `parsedInput` is empty, then automatically select the new `country`\n          // and set `parsedInput` to `+{getCountryCallingCode(newCountry)}`.\n          parsedInput: generateInitialParsedInput(newValue, undefined, props) // `value` is `undefined`.\n          // `parsedInput` is `undefined` because `value` is `undefined`.\n\n        });\n      } // If a new `value` is set externally.\n      // (e.g. as a result of an ajax API request\n      //  to get user's phone after page loaded)\n      // The first part — `newValue !== prevValue` —\n      // is basically `props.value !== prevProps.value`\n      // so it means \"if value property was changed externally\".\n      // The second part — `newValue !== value` —\n      // is for ignoring the `getDerivedStateFromProps()` call\n      // which happens in `this.onChange()` right after `this.setState()`.\n      // If this `getDerivedStateFromProps()` call isn't ignored\n      // then the country flag would reset on each input.\n      else if (newValue !== prevValue && newValue !== value) {\n          var phoneNumber = parsePhoneNumber(newValue, metadata);\n          var parsedCountry;\n\n          if (phoneNumber) {\n            var _countries = getSupportedCountries(props.countries, metadata);\n\n            if (!_countries || _countries.indexOf(phoneNumber.country) >= 0) {\n              parsedCountry = phoneNumber.country;\n            }\n          }\n\n          if (!newValue) {\n            newState.hasUserSelectedACountry = undefined;\n          }\n\n          return _objectSpread({}, newState, {\n            parsedInput: generateInitialParsedInput(newValue, phoneNumber, props),\n            value: newValue,\n            country: newValue ? parsedCountry : newDefaultCountry\n          });\n        } // `defaultCountry` didn't change.\n      // `value` didn't change.\n      // `parsedInput` didn't change, because `value` didn't change.\n      //\n      // So no need to update state here really.\n      // Could as well return `null` explicitly\n      // to indicate that the `state` hasn't changed.\n      // But just in case, returns `newState`.\n      // (who knows if someone adds something\n      // changing `newState` above in some future)\n\n\n      return newState;\n    }\n  }]);\n\n  return PhoneNumberInput_;\n}(React.PureComponent); // This wrapper is only to `.forwardRef()` to the `<input/>`.\n\n\nvar PhoneNumberInput = React.forwardRef(function (props, ref) {\n  return React.createElement(PhoneNumberInput_, _extends({}, props, {\n    inputRef: ref\n  }));\n});\nPhoneNumberInput.defaultProps = {\n  /**\r\n   * Remember (and autofill) the value as a phone number.\r\n   */\n  autoComplete: 'tel',\n\n  /**\r\n   * Flag icon component.\r\n   */\n  flagComponent: Flag,\n\n  /**\r\n   * By default, uses icons from `country-flag-icons` gitlab pages website.\r\n   */\n  // Must be equal to `flagUrl` in `./CountryIcon.js`.\n  flagUrl: 'https://catamphetamine.gitlab.io/country-flag-icons/3x2/{XX}.svg',\n\n  /**\r\n   * Default \"International\" country `<select/>` option icon.\r\n   */\n  internationalIcon: InternationalIcon,\n\n  /**\r\n   * Phone number `<input/>` component.\r\n   */\n  inputComponent: 'input',\n\n  /**\r\n   * Wrapping `<div/>` component.\r\n   */\n  containerComponent: 'div',\n\n  /**\r\n   * Some users requested a way to reset the component:\r\n   * both number `<input/>` and country `<select/>`.\r\n   * Whenever `reset` property changes both number `<input/>`\r\n   * and country `<select/>` are reset.\r\n   * It's not implemented as some instance `.reset()` method\r\n   * because `ref` is forwarded to `<input/>`.\r\n   * It's also not replaced with just resetting `country` on\r\n   * external `value` reset, because a user could select a country\r\n   * and then not input any `value`, and so the selected country\r\n   * would be \"stuck\", if not using this `reset` property.\r\n   */\n  // https://github.com/catamphetamine/react-phone-number-input/issues/300\n  reset: PropTypes.any,\n\n  /**\r\n   * Don't convert the initially passed phone number `value`\r\n   * to a national phone number for its country.\r\n   * The reason is that the newer generation grows up when\r\n   * there are no stationary phones and therefore everyone inputs\r\n   * phone numbers with a `+` in their smartphones\r\n   * so phone numbers written in international form\r\n   * are gradually being considered more natural than local ones.\r\n   */\n  displayInitialValueAsLocalNumber: false,\n\n  /**\r\n   * Set to `false` to use \"basic\" caret instead of the \"smart\" one.\r\n   */\n  smartCaret: true,\n\n  /**\r\n   * Whether to add the \"International\" option\r\n   * to the list of countries.\r\n   */\n  addInternationalOption: true,\n\n  /**\r\n   * If set to `true` the phone number input will get trimmed\r\n   * if it exceeds the maximum length for the country.\r\n   */\n  limitMaxLength: false\n};\nexport default PhoneNumberInput;\n/**\r\n * Gets initial `parsedInput` value.\r\n * @param  {string} [value]\r\n * @param  {PhoneNumber} [phoneNumber]\r\n * @param  {boolean} [options.international]\r\n * @param  {string} [options.defaultCountry]\r\n * @param  {boolean} options.displayInitialValueAsLocalNumber\r\n * @param  {object} options.metadata\r\n * @return {string} [parsedInput]\r\n */\n\nfunction generateInitialParsedInput(value, phoneNumber, _ref) {\n  var international = _ref.international,\n      defaultCountry = _ref.defaultCountry,\n      metadata = _ref.metadata,\n      displayInitialValueAsLocalNumber = _ref.displayInitialValueAsLocalNumber; // If the `value` (E.164 phone number)\n  // belongs to the currently selected country\n  // and `displayInitialValueAsLocalNumber` property is `true`\n  // then convert `value` (E.164 phone number)\n  // to a local phone number digits.\n  // E.g. '+78005553535' -> '88005553535'.\n\n  if (displayInitialValueAsLocalNumber && phoneNumber && phoneNumber.country) {\n    return generateNationalNumberDigits(phoneNumber);\n  }\n\n  return getInitialParsedInput(value, defaultCountry, international, metadata);\n}\n\nvar countrySelectOptionsMemo;\nvar countrySelectOptionsMemoDependencies;\n\nfunction useMemoCountrySelectOptions(generator, dependencies) {\n  if (!countrySelectOptionsMemoDependencies || !areEqualArrays(dependencies, countrySelectOptionsMemoDependencies)) {\n    countrySelectOptionsMemo = generator();\n    countrySelectOptionsMemoDependencies = dependencies;\n  }\n\n  return countrySelectOptionsMemo;\n}\n\nfunction areEqualArrays(a, b) {\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  var i = 0;\n\n  while (i < a.length) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n\n    i++;\n  }\n\n  return true;\n}","/**\r\n * Creates Unicode flag from a two-letter ISO country code.\r\n * https://stackoverflow.com/questions/24050671/how-to-put-japan-flag-character-in-a-string\r\n * @param  {string} country — A two-letter ISO country code (case-insensitive).\r\n * @return {string}\r\n */\nexport default function getCountryFlag(country) {\n  return getRegionalIndicatorSymbol(country[0]) + getRegionalIndicatorSymbol(country[1]);\n}\n/**\r\n * Converts a letter to a Regional Indicator Symbol.\r\n * @param  {string} letter\r\n * @return {string}\r\n */\n\nfunction getRegionalIndicatorSymbol(letter) {\n  return String.fromCodePoint(0x1F1E6 - 65 + letter.toUpperCase().charCodeAt(0));\n}","function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { useCallback, useMemo } from 'react';\nimport classNames from 'classnames';\nimport getUnicodeFlagIcon from 'country-flag-icons/unicode';\nexport default function CountrySelect(_ref) {\n  var value = _ref.value,\n      onChange = _ref.onChange,\n      options = _ref.options,\n      rest = _objectWithoutProperties(_ref, [\"value\", \"onChange\", \"options\"]);\n\n  var onChange_ = useCallback(function (event) {\n    var value = event.target.value;\n    onChange(value === 'ZZ' ? undefined : value);\n  }, [onChange]);\n  var selectedOption = useMemo(function () {\n    return getSelectedOption(options, value);\n  }, [options, value]); // \"ZZ\" means \"International\".\n  // (HTML requires each `<option/>` have some string `value`).\n\n  return React.createElement(\"select\", _extends({}, rest, {\n    value: value || 'ZZ',\n    onChange: onChange_\n  }), options.map(function (_ref2) {\n    var value = _ref2.value,\n        label = _ref2.label,\n        divider = _ref2.divider;\n    return React.createElement(\"option\", {\n      key: divider ? '|' : value || 'ZZ',\n      value: divider ? '|' : value || 'ZZ',\n      disabled: divider ? true : false,\n      style: divider ? DIVIDER_STYLE : undefined\n    }, label);\n  }));\n}\nvar DIVIDER_STYLE = {\n  fontSize: '1px',\n  backgroundColor: 'currentColor',\n  color: 'inherit'\n};\nexport function CountrySelectWithIcon(_ref3) {\n  var value = _ref3.value,\n      options = _ref3.options,\n      className = _ref3.className,\n      Icon = _ref3.iconComponent,\n      getIconAspectRatio = _ref3.getIconAspectRatio,\n      Arrow = _ref3.arrowComponent,\n      unicodeFlags = _ref3.unicodeFlags,\n      rest = _objectWithoutProperties(_ref3, [\"value\", \"options\", \"className\", \"iconComponent\", \"getIconAspectRatio\", \"arrowComponent\", \"unicodeFlags\"]);\n\n  var selectedOption = useMemo(function () {\n    return getSelectedOption(options, value);\n  }, [options, value]);\n  return React.createElement(\"div\", {\n    className: \"PhoneInputCountry\"\n  }, React.createElement(CountrySelect, _extends({}, rest, {\n    value: value,\n    options: options,\n    className: classNames('PhoneInputCountrySelect', className)\n  })), unicodeFlags && value && React.createElement(\"div\", {\n    className: \"PhoneInputCountryIconUnicode\"\n  }, getUnicodeFlagIcon(value)), !(unicodeFlags && value) && React.createElement(Icon, {\n    country: value,\n    label: selectedOption && selectedOption.label,\n    aspectRatio: unicodeFlags ? 1 : undefined\n  }), React.createElement(Arrow, null));\n}\nCountrySelectWithIcon.defaultProps = {\n  // Is \"International\" icon square?\n  arrowComponent: function arrowComponent() {\n    return React.createElement(\"div\", {\n      className: \"PhoneInputCountrySelectArrow\"\n    });\n  }\n};\n\nfunction getSelectedOption(options, value) {\n  for (var _iterator = options, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref4;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref4 = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref4 = _i.value;\n    }\n\n    var option = _ref4;\n\n    if (!option.divider && option.value === value) {\n      return option;\n    }\n  }\n}","function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport labels from '../locale/en.json';\nimport { metadata as metadataPropType, labels as labelsPropType } from './PropTypes';\nimport PhoneInput from './PhoneInputWithCountry';\nimport { CountrySelectWithIcon as CountrySelect } from './CountrySelect';\nexport function createPhoneInput(defaultMetadata) {\n  var PhoneInputDefault = React.forwardRef(function (props, ref) {\n    return React.createElement(PhoneInput, _extends({\n      ref: ref\n    }, props));\n  });\n  PhoneInputDefault.defaultProps = {\n    metadata: defaultMetadata,\n    labels: labels,\n    countrySelectComponent: CountrySelect\n  };\n  return PhoneInputDefault;\n}\nexport default createPhoneInput();","import metadata from 'libphonenumber-js/metadata.min.json';\nimport { parsePhoneNumber as _parsePhoneNumber, formatPhoneNumber as _formatPhoneNumber, formatPhoneNumberIntl as _formatPhoneNumberIntl, isValidPhoneNumber as _isValidPhoneNumber, isPossiblePhoneNumber as _isPossiblePhoneNumber, getCountries as _getCountries, getCountryCallingCode as _getCountryCallingCode } from '../core/index';\nimport { createPhoneInput } from '../modules/PhoneInputWithCountryDefault';\n\nfunction call(func, _arguments) {\n  var args = Array.prototype.slice.call(_arguments);\n  args.push(metadata);\n  return func.apply(this, args);\n}\n\nexport default createPhoneInput(metadata);\nexport function parsePhoneNumber() {\n  return call(_parsePhoneNumber, arguments);\n}\nexport function formatPhoneNumber() {\n  return call(_formatPhoneNumber, arguments);\n}\nexport function formatPhoneNumberIntl() {\n  return call(_formatPhoneNumberIntl, arguments);\n}\nexport function isValidPhoneNumber() {\n  return call(_isValidPhoneNumber, arguments);\n}\nexport function isPossiblePhoneNumber() {\n  return call(_isPossiblePhoneNumber, arguments);\n}\nexport function getCountries() {\n  return call(_getCountries, arguments);\n}\nexport function getCountryCallingCode() {\n  return call(_getCountryCallingCode, arguments);\n}","import React, { useContext, useState } from 'react';\r\nimport { graphql } from 'gatsby';\r\nimport Img from 'gatsby-image';\r\nimport { FormattedMessage, navigate, Link, useIntl } from 'gatsby-plugin-intl';\r\nimport { Layout } from '../components/layout';\r\nimport { SEO } from '../components/seo';\r\nimport { Query, AllorsSerialisedItem, AllorsUnifiedGood } from '../../graphql-types';\r\nimport { StoreContext } from '../store/Store';\r\nimport { Separator } from '../components/separator';\r\nimport { useToasts } from 'react-toast-notifications';\r\nimport axios from 'axios';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Breadcrumb from 'react-bootstrap/Breadcrumb';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Table from 'react-bootstrap/Table';\r\n\r\nimport PhoneInput, { isValidPhoneNumber } from 'react-phone-number-input';\r\nimport 'react-phone-number-input/style.css';\r\n\r\nconst RequestPage: React.FunctionComponent<{ data: Query }> = ({\r\n  data: {\r\n    site: {\r\n      siteMetadata: { allorsApiUrl },\r\n    },\r\n    allAllorsUnifiedGood,\r\n    allAllorsSerialisedItem,\r\n  },\r\n}) => {\r\n  const {\r\n    email: [email, setEmail],\r\n    telephone: [telephone, setTelephone],\r\n    comment: [comment, setComment],\r\n    productIds: [productIds, setProductIds],\r\n    serialisedItemIds: [serialisedItemIds, setSerialisedItemIds],\r\n    removeProductId,\r\n    removeSerialisedItemId,\r\n  } = useContext(StoreContext);\r\n\r\n  const [formClass, setFormClass] = useState('');\r\n\r\n  const products = allAllorsUnifiedGood.nodes.filter((v) => productIds.indexOf(v.allorsId) !== -1);\r\n  const serialisedItems = allAllorsSerialisedItem.nodes.filter((v) => serialisedItemIds.indexOf(v.allorsId) !== -1);\r\n\r\n  const count = products.length + serialisedItems.length;\r\n\r\n  const { addToast } = useToasts();\r\n\r\n  const intl = useIntl();\r\n\r\n  const removeProduct = (product: AllorsUnifiedGood) => {\r\n    removeProductId(product.allorsId);\r\n    addToast(`Successfully removed ${product.name}`, {\r\n      appearance: 'info',\r\n      autoDismiss: true,\r\n    });\r\n  };\r\n\r\n  const removeSerialisedItem = (serialisedItem: AllorsSerialisedItem) => {\r\n    removeSerialisedItemId(serialisedItem.allorsId);\r\n    addToast(`Successfully removed ${serialisedItem.name}`, {\r\n      appearance: 'info',\r\n      autoDismiss: true,\r\n    });\r\n  };\r\n\r\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n\r\n    const form = event.target as HTMLFormElement;\r\n    const emailField = form.elements.namedItem('email') as HTMLFormElement;\r\n    const telephoneField = form.elements.namedItem('telephone') as HTMLFormElement;\r\n\r\n    const isEmailValid = emailField.checkValidity();\r\n    const isTelephoneValid = isValidPhoneNumber(telephone);\r\n    telephoneField.setCustomValidity(!isTelephoneValid ? 'invalid' : '');\r\n\r\n    if (!isEmailValid || !isTelephoneValid) {\r\n      setFormClass('was-validated');\r\n      return;\r\n    }\r\n\r\n    setFormClass('');\r\n\r\n    const model = {\r\n      email,\r\n      telephone,\r\n      comment,\r\n      productIds,\r\n      serialisedItemIds,\r\n    };\r\n    axios\r\n      .post(`${allorsApiUrl}/request`, model)\r\n      .then(() => {\r\n        setProductIds([]);\r\n        setSerialisedItemIds([]);\r\n        addToast('Successfully saved', {\r\n          appearance: 'success',\r\n          autoDismiss: true,\r\n        });\r\n        navigate('/');\r\n      })\r\n      .catch((error) => {\r\n        if (error.response?.status === 403) {\r\n          const messages = error.response.data as string[];\r\n          for (const message of messages) {\r\n            addToast(`${message}`, {\r\n              appearance: 'error',\r\n              autoDismiss: true,\r\n            });\r\n          }\r\n        } else {\r\n          addToast(`${error}`, {\r\n            appearance: 'error',\r\n            autoDismiss: true,\r\n          });\r\n        }\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Layout>\r\n      <SEO title={intl.formatMessage({ id: 'request' })} description={intl.formatMessage({ id: 'request-description' })} />\r\n\r\n      <main role=\"main\">\r\n        <article>\r\n          <header className=\"page-header\">\r\n            <Container>\r\n              <Row>\r\n                <Col>\r\n                  <Breadcrumb>\r\n                    <Breadcrumb.Item>\r\n                      <Link to=\"/\">Home</Link>\r\n                    </Breadcrumb.Item>\r\n                    <Breadcrumb.Item active>\r\n                      <FormattedMessage id=\"request-a-quote\" />\r\n                    </Breadcrumb.Item>\r\n                  </Breadcrumb>\r\n                  <h1 className=\"page-title\">\r\n                    <FormattedMessage id=\"request-a-quote\" />\r\n                  </h1>\r\n                  <p className=\"page-description\">SEO Friendly description </p>\r\n                  <Separator />\r\n                </Col>\r\n              </Row>\r\n            </Container>\r\n          </header>\r\n\r\n          <Form onSubmit={handleSubmit} noValidate className={formClass}>\r\n            <Container>\r\n              <Row>\r\n                <Col xs={{ span: 12, order: 1 }} md={{ span: 6, order: 0 }}>\r\n                  <Form.Group>\r\n                    <Form.Label>\r\n                      <FormattedMessage id=\"email\" /> *\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      id=\"email\"\r\n                      type=\"email\"\r\n                      required\r\n                      value={email}\r\n                      onChange={(e) => {\r\n                        setEmail(e.target.value);\r\n                      }}\r\n                    />\r\n                  </Form.Group>\r\n                  <Form.Group>\r\n                    <Form.Label>\r\n                      <FormattedMessage id=\"telephone\" /> *\r\n                    </Form.Label>\r\n                    <PhoneInput\r\n                      id=\"telephone\"\r\n                      numberInputProps={{ className: 'form-control' }}\r\n                      value={telephone ?? ''}\r\n                      onChange={(v) => setTelephone(v)}\r\n                    />\r\n                    <div className=\"invalid-feedback\">Please provide a valid telephone number.</div>\r\n                  </Form.Group>\r\n                  <Form.Group>\r\n                    <Form.Label>\r\n                      <FormattedMessage id=\"comment\" />\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      id=\"comment\"\r\n                      as=\"textarea\"\r\n                      value={comment}\r\n                      onChange={(e) => {\r\n                        setComment(e.currentTarget.value);\r\n                      }}\r\n                    />\r\n                  </Form.Group>\r\n                  <Button type=\"submit\" color=\"primary\">\r\n                    <FormattedMessage id=\"send\" />\r\n                  </Button>\r\n                  <Link to=\"/catalogue\"> or add more products</Link>\r\n                </Col>\r\n                <Col xs={{ span: 12, order: 0 }} md={{ span: 6, order: 0 }} className=\"pt-3\">\r\n                  {count === 0 && (\r\n                    <Alert>\r\n                      No products selected. Check out our <Link to=\"/Catalogue\">Catalogue</Link> or <a href=\"/Brands\">Brands</a> to add\r\n                      products.\r\n                    </Alert>\r\n                  )}\r\n                  {count > 0 && (\r\n                    <Table striped hover>\r\n                      <thead>\r\n                        <tr>\r\n                          <th scope=\"col\" style={{ width: '25%' }}></th>\r\n                          <th scope=\"col\">Code</th>\r\n                          <th scope=\"col\">Name</th>\r\n                          <th scope=\"col\"></th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        {products.map((product) => {\r\n                          return (\r\n                            <tr key={product.slug}>\r\n                              <td>\r\n                                <Img fluid={product.primaryPhoto.file.childImageSharp.fluid} alt=\"Product\"></Img>\r\n                              </td>\r\n                              <td></td>\r\n                              <td>{product.name}</td>\r\n                              <td>\r\n                                <Button type=\"button\" color=\"danger\" onClick={() => removeProduct(product)}>\r\n                                  Remove\r\n                                </Button>\r\n                              </td>\r\n                            </tr>\r\n                          );\r\n                        })}\r\n                        {serialisedItems.map((serialisedItem) => {\r\n                          return (\r\n                            <tr key={serialisedItem.allorsId}>\r\n                              <td>\r\n                                <Img fluid={serialisedItem.primaryPhoto.file.childImageSharp.fluid} alt=\"Product\"></Img>\r\n                              </td>\r\n                              <td>{serialisedItem.itemNumber}</td>\r\n                              <td>{serialisedItem.name}</td>\r\n                              <td>\r\n                                <Button type=\"button\" color=\"danger\" onClick={() => removeSerialisedItem(serialisedItem)}>\r\n                                  Remove\r\n                                </Button>\r\n                              </td>\r\n                            </tr>\r\n                          );\r\n                        })}\r\n                      </tbody>\r\n                    </Table>\r\n                  )}\r\n                </Col>\r\n              </Row>\r\n            </Container>\r\n          </Form>\r\n        </article>\r\n      </main>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport const query = graphql`\r\n  query {\r\n    site {\r\n      siteMetadata {\r\n        allorsApiUrl\r\n      }\r\n    }\r\n    allAllorsUnifiedGood {\r\n      nodes {\r\n        allorsId\r\n        name\r\n        primaryPhoto {\r\n          file {\r\n            childImageSharp {\r\n              id\r\n              fluid {\r\n                ...GatsbyImageSharpFluid\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    allAllorsSerialisedItem {\r\n      nodes {\r\n        allorsId\r\n        itemNumber\r\n        name\r\n        primaryPhoto {\r\n          file {\r\n            childImageSharp {\r\n              id\r\n              fluid {\r\n                ...GatsbyImageSharpFluid\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default RequestPage;\r\n","'use strict';\n/**\n * Update an Error with the specified config, error code, and response.\n *\n * @param {Error} error The error to update.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The error.\n */\n\nmodule.exports = function enhanceError(error, config, code, request, response) {\n  error.config = config;\n\n  if (code) {\n    error.code = code;\n  }\n\n  error.request = request;\n  error.response = response;\n  error.isAxiosError = true;\n\n  error.toJSON = function () {\n    return {\n      // Standard\n      message: this.message,\n      name: this.name,\n      // Microsoft\n      description: this.description,\n      number: this.number,\n      // Mozilla\n      fileName: this.fileName,\n      lineNumber: this.lineNumber,\n      columnNumber: this.columnNumber,\n      stack: this.stack,\n      // Axios\n      config: this.config,\n      code: this.code\n    };\n  };\n\n  return error;\n};","'use strict';\n\nvar utils = require('../utils');\n/**\n * Config-specific merge-function which creates a new config-object\n * by merging two configuration objects together.\n *\n * @param {Object} config1\n * @param {Object} config2\n * @returns {Object} New object resulting from merging config2 to config1\n */\n\n\nmodule.exports = function mergeConfig(config1, config2) {\n  // eslint-disable-next-line no-param-reassign\n  config2 = config2 || {};\n  var config = {};\n  var valueFromConfig2Keys = ['url', 'method', 'params', 'data'];\n  var mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy'];\n  var defaultToConfig2Keys = ['baseURL', 'url', 'transformRequest', 'transformResponse', 'paramsSerializer', 'timeout', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName', 'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress', 'maxContentLength', 'validateStatus', 'maxRedirects', 'httpAgent', 'httpsAgent', 'cancelToken', 'socketPath'];\n  utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {\n    if (typeof config2[prop] !== 'undefined') {\n      config[prop] = config2[prop];\n    }\n  });\n  utils.forEach(mergeDeepPropertiesKeys, function mergeDeepProperties(prop) {\n    if (utils.isObject(config2[prop])) {\n      config[prop] = utils.deepMerge(config1[prop], config2[prop]);\n    } else if (typeof config2[prop] !== 'undefined') {\n      config[prop] = config2[prop];\n    } else if (utils.isObject(config1[prop])) {\n      config[prop] = utils.deepMerge(config1[prop]);\n    } else if (typeof config1[prop] !== 'undefined') {\n      config[prop] = config1[prop];\n    }\n  });\n  utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {\n    if (typeof config2[prop] !== 'undefined') {\n      config[prop] = config2[prop];\n    } else if (typeof config1[prop] !== 'undefined') {\n      config[prop] = config1[prop];\n    }\n  });\n  var axiosKeys = valueFromConfig2Keys.concat(mergeDeepPropertiesKeys).concat(defaultToConfig2Keys);\n  var otherKeys = Object.keys(config2).filter(function filterAxiosKeys(key) {\n    return axiosKeys.indexOf(key) === -1;\n  });\n  utils.forEach(otherKeys, function otherKeysDefaultToConfig2(prop) {\n    if (typeof config2[prop] !== 'undefined') {\n      config[prop] = config2[prop];\n    } else if (typeof config1[prop] !== 'undefined') {\n      config[prop] = config1[prop];\n    }\n  });\n  return config;\n};","'use strict';\n\nvar utils = require('./../utils');\n\nfunction InterceptorManager() {\n  this.handlers = [];\n}\n/**\n * Add a new interceptor to the stack\n *\n * @param {Function} fulfilled The function to handle `then` for a `Promise`\n * @param {Function} rejected The function to handle `reject` for a `Promise`\n *\n * @return {Number} An ID used to remove interceptor later\n */\n\n\nInterceptorManager.prototype.use = function use(fulfilled, rejected) {\n  this.handlers.push({\n    fulfilled: fulfilled,\n    rejected: rejected\n  });\n  return this.handlers.length - 1;\n};\n/**\n * Remove an interceptor from the stack\n *\n * @param {Number} id The ID that was returned by `use`\n */\n\n\nInterceptorManager.prototype.eject = function eject(id) {\n  if (this.handlers[id]) {\n    this.handlers[id] = null;\n  }\n};\n/**\n * Iterate over all the registered interceptors\n *\n * This method is particularly useful for skipping over any\n * interceptors that may have become `null` calling `eject`.\n *\n * @param {Function} fn The function to call for each interceptor\n */\n\n\nInterceptorManager.prototype.forEach = function forEach(fn) {\n  utils.forEach(this.handlers, function forEachHandler(h) {\n    if (h !== null) {\n      fn(h);\n    }\n  });\n};\n\nmodule.exports = InterceptorManager;","'use strict';\n\nvar bind = require('./helpers/bind');\n/*global toString:true*/\n// utils is a library of generic helper functions non-specific to axios\n\n\nvar toString = Object.prototype.toString;\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Array, otherwise false\n */\n\nfunction isArray(val) {\n  return toString.call(val) === '[object Array]';\n}\n/**\n * Determine if a value is undefined\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if the value is undefined, otherwise false\n */\n\n\nfunction isUndefined(val) {\n  return typeof val === 'undefined';\n}\n/**\n * Determine if a value is a Buffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Buffer, otherwise false\n */\n\n\nfunction isBuffer(val) {\n  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);\n}\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\n\n\nfunction isArrayBuffer(val) {\n  return toString.call(val) === '[object ArrayBuffer]';\n}\n/**\n * Determine if a value is a FormData\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an FormData, otherwise false\n */\n\n\nfunction isFormData(val) {\n  return typeof FormData !== 'undefined' && val instanceof FormData;\n}\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\n\n\nfunction isArrayBufferView(val) {\n  var result;\n\n  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = val && val.buffer && val.buffer instanceof ArrayBuffer;\n  }\n\n  return result;\n}\n/**\n * Determine if a value is a String\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a String, otherwise false\n */\n\n\nfunction isString(val) {\n  return typeof val === 'string';\n}\n/**\n * Determine if a value is a Number\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Number, otherwise false\n */\n\n\nfunction isNumber(val) {\n  return typeof val === 'number';\n}\n/**\n * Determine if a value is an Object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Object, otherwise false\n */\n\n\nfunction isObject(val) {\n  return val !== null && typeof val === 'object';\n}\n/**\n * Determine if a value is a Date\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Date, otherwise false\n */\n\n\nfunction isDate(val) {\n  return toString.call(val) === '[object Date]';\n}\n/**\n * Determine if a value is a File\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a File, otherwise false\n */\n\n\nfunction isFile(val) {\n  return toString.call(val) === '[object File]';\n}\n/**\n * Determine if a value is a Blob\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Blob, otherwise false\n */\n\n\nfunction isBlob(val) {\n  return toString.call(val) === '[object Blob]';\n}\n/**\n * Determine if a value is a Function\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\n\n\nfunction isFunction(val) {\n  return toString.call(val) === '[object Function]';\n}\n/**\n * Determine if a value is a Stream\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Stream, otherwise false\n */\n\n\nfunction isStream(val) {\n  return isObject(val) && isFunction(val.pipe);\n}\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\n\n\nfunction isURLSearchParams(val) {\n  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;\n}\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n * @returns {String} The String freed of excess whitespace\n */\n\n\nfunction trim(str) {\n  return str.replace(/^\\s*/, '').replace(/\\s*$/, '');\n}\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> 'ReactNative'\n * nativescript\n *  navigator.product -> 'NativeScript' or 'NS'\n */\n\n\nfunction isStandardBrowserEnv() {\n  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' || navigator.product === 'NativeScript' || navigator.product === 'NS')) {\n    return false;\n  }\n\n  return typeof window !== 'undefined' && typeof document !== 'undefined';\n}\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n */\n\n\nfunction forEach(obj, fn) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  } // Force an array if not already something iterable\n\n\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (var i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        fn.call(null, obj[key], key, obj);\n      }\n    }\n  }\n}\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n * @returns {Object} Result of all merge properties\n */\n\n\nfunction merge()\n/* obj1, obj2, obj3, ... */\n{\n  var result = {};\n\n  function assignValue(val, key) {\n    if (typeof result[key] === 'object' && typeof val === 'object') {\n      result[key] = merge(result[key], val);\n    } else {\n      result[key] = val;\n    }\n  }\n\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    forEach(arguments[i], assignValue);\n  }\n\n  return result;\n}\n/**\n * Function equal to merge with the difference being that no reference\n * to original objects is kept.\n *\n * @see merge\n * @param {Object} obj1 Object to merge\n * @returns {Object} Result of all merge properties\n */\n\n\nfunction deepMerge()\n/* obj1, obj2, obj3, ... */\n{\n  var result = {};\n\n  function assignValue(val, key) {\n    if (typeof result[key] === 'object' && typeof val === 'object') {\n      result[key] = deepMerge(result[key], val);\n    } else if (typeof val === 'object') {\n      result[key] = deepMerge({}, val);\n    } else {\n      result[key] = val;\n    }\n  }\n\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    forEach(arguments[i], assignValue);\n  }\n\n  return result;\n}\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n * @return {Object} The resulting value of object a\n */\n\n\nfunction extend(a, b, thisArg) {\n  forEach(b, function assignValue(val, key) {\n    if (thisArg && typeof val === 'function') {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  });\n  return a;\n}\n\nmodule.exports = {\n  isArray: isArray,\n  isArrayBuffer: isArrayBuffer,\n  isBuffer: isBuffer,\n  isFormData: isFormData,\n  isArrayBufferView: isArrayBufferView,\n  isString: isString,\n  isNumber: isNumber,\n  isObject: isObject,\n  isUndefined: isUndefined,\n  isDate: isDate,\n  isFile: isFile,\n  isBlob: isBlob,\n  isFunction: isFunction,\n  isStream: isStream,\n  isURLSearchParams: isURLSearchParams,\n  isStandardBrowserEnv: isStandardBrowserEnv,\n  forEach: forEach,\n  merge: merge,\n  deepMerge: deepMerge,\n  extend: extend,\n  trim: trim\n};","'use strict';\n\nvar utils = require('./../utils');\n\nfunction encode(val) {\n  return encodeURIComponent(val).replace(/%40/gi, '@').replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%20/g, '+').replace(/%5B/gi, '[').replace(/%5D/gi, ']');\n}\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @returns {string} The formatted url\n */\n\n\nmodule.exports = function buildURL(url, params, paramsSerializer) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n\n  var serializedParams;\n\n  if (paramsSerializer) {\n    serializedParams = paramsSerializer(params);\n  } else if (utils.isURLSearchParams(params)) {\n    serializedParams = params.toString();\n  } else {\n    var parts = [];\n    utils.forEach(params, function serialize(val, key) {\n      if (val === null || typeof val === 'undefined') {\n        return;\n      }\n\n      if (utils.isArray(val)) {\n        key = key + '[]';\n      } else {\n        val = [val];\n      }\n\n      utils.forEach(val, function parseValue(v) {\n        if (utils.isDate(v)) {\n          v = v.toISOString();\n        } else if (utils.isObject(v)) {\n          v = JSON.stringify(v);\n        }\n\n        parts.push(encode(key) + '=' + encode(v));\n      });\n    });\n    serializedParams = parts.join('&');\n  }\n\n  if (serializedParams) {\n    var hashmarkIndex = url.indexOf('#');\n\n    if (hashmarkIndex !== -1) {\n      url = url.slice(0, hashmarkIndex);\n    }\n\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n};","'use strict';\n\nvar createError = require('./createError');\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n */\n\n\nmodule.exports = function settle(resolve, reject, response) {\n  var validateStatus = response.config.validateStatus;\n\n  if (!validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(createError('Request failed with status code ' + response.status, response.config, null, response.request, response));\n  }\n};","'use strict';\n\nmodule.exports = function isCancel(value) {\n  return !!(value && value.__CANCEL__);\n};","'use strict';\n\nvar utils = require('./../utils');\n\nvar buildURL = require('../helpers/buildURL');\n\nvar InterceptorManager = require('./InterceptorManager');\n\nvar dispatchRequest = require('./dispatchRequest');\n\nvar mergeConfig = require('./mergeConfig');\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n */\n\n\nfunction Axios(instanceConfig) {\n  this.defaults = instanceConfig;\n  this.interceptors = {\n    request: new InterceptorManager(),\n    response: new InterceptorManager()\n  };\n}\n/**\n * Dispatch a request\n *\n * @param {Object} config The config specific for this request (merged with this.defaults)\n */\n\n\nAxios.prototype.request = function request(config) {\n  /*eslint no-param-reassign:0*/\n  // Allow for axios('example/url'[, config]) a la fetch API\n  if (typeof config === 'string') {\n    config = arguments[1] || {};\n    config.url = arguments[0];\n  } else {\n    config = config || {};\n  }\n\n  config = mergeConfig(this.defaults, config); // Set config.method\n\n  if (config.method) {\n    config.method = config.method.toLowerCase();\n  } else if (this.defaults.method) {\n    config.method = this.defaults.method.toLowerCase();\n  } else {\n    config.method = 'get';\n  } // Hook up interceptors middleware\n\n\n  var chain = [dispatchRequest, undefined];\n  var promise = Promise.resolve(config);\n  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n    chain.unshift(interceptor.fulfilled, interceptor.rejected);\n  });\n  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n    chain.push(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  while (chain.length) {\n    promise = promise.then(chain.shift(), chain.shift());\n  }\n\n  return promise;\n};\n\nAxios.prototype.getUri = function getUri(config) {\n  config = mergeConfig(this.defaults, config);\n  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\\?/, '');\n}; // Provide aliases for supported request methods\n\n\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function (url, config) {\n    return this.request(utils.merge(config || {}, {\n      method: method,\n      url: url\n    }));\n  };\n});\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function (url, data, config) {\n    return this.request(utils.merge(config || {}, {\n      method: method,\n      url: url,\n      data: data\n    }));\n  };\n});\nmodule.exports = Axios;","'use strict';\n\nvar utils = require('./utils');\n\nvar normalizeHeaderName = require('./helpers/normalizeHeaderName');\n\nvar DEFAULT_CONTENT_TYPE = {\n  'Content-Type': 'application/x-www-form-urlencoded'\n};\n\nfunction setContentTypeIfUnset(headers, value) {\n  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {\n    headers['Content-Type'] = value;\n  }\n}\n\nfunction getDefaultAdapter() {\n  var adapter;\n\n  if (typeof XMLHttpRequest !== 'undefined') {\n    // For browsers use XHR adapter\n    adapter = require('./adapters/xhr');\n  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {\n    // For node use HTTP adapter\n    adapter = require('./adapters/http');\n  }\n\n  return adapter;\n}\n\nvar defaults = {\n  adapter: getDefaultAdapter(),\n  transformRequest: [function transformRequest(data, headers) {\n    normalizeHeaderName(headers, 'Accept');\n    normalizeHeaderName(headers, 'Content-Type');\n\n    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {\n      return data;\n    }\n\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n\n    if (utils.isURLSearchParams(data)) {\n      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n      return data.toString();\n    }\n\n    if (utils.isObject(data)) {\n      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');\n      return JSON.stringify(data);\n    }\n\n    return data;\n  }],\n  transformResponse: [function transformResponse(data) {\n    /*eslint no-param-reassign:0*/\n    if (typeof data === 'string') {\n      try {\n        data = JSON.parse(data);\n      } catch (e) {\n        /* Ignore */\n      }\n    }\n\n    return data;\n  }],\n\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n  maxContentLength: -1,\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  }\n};\ndefaults.headers = {\n  common: {\n    'Accept': 'application/json, text/plain, */*'\n  }\n};\nutils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {\n  defaults.headers[method] = {};\n});\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);\n});\nmodule.exports = defaults;","'use strict';\n\nvar utils = require('./../utils'); // Headers whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\n\n\nvar ignoreDuplicateOf = ['age', 'authorization', 'content-length', 'content-type', 'etag', 'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since', 'last-modified', 'location', 'max-forwards', 'proxy-authorization', 'referer', 'retry-after', 'user-agent'];\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} headers Headers needing to be parsed\n * @returns {Object} Headers parsed into an object\n */\n\nmodule.exports = function parseHeaders(headers) {\n  var parsed = {};\n  var key;\n  var val;\n  var i;\n\n  if (!headers) {\n    return parsed;\n  }\n\n  utils.forEach(headers.split('\\n'), function parser(line) {\n    i = line.indexOf(':');\n    key = utils.trim(line.substr(0, i)).toLowerCase();\n    val = utils.trim(line.substr(i + 1));\n\n    if (key) {\n      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {\n        return;\n      }\n\n      if (key === 'set-cookie') {\n        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);\n      } else {\n        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n      }\n    }\n  });\n  return parsed;\n};","module.exports = require('./lib/axios');","'use strict';\n\nvar enhanceError = require('./enhanceError');\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The created error.\n */\n\n\nmodule.exports = function createError(message, config, code, request, response) {\n  var error = new Error(message);\n  return enhanceError(error, config, code, request, response);\n};","'use strict';\n\nvar isAbsoluteURL = require('../helpers/isAbsoluteURL');\n\nvar combineURLs = require('../helpers/combineURLs');\n/**\n * Creates a new URL by combining the baseURL with the requestedURL,\n * only when the requestedURL is not already an absolute URL.\n * If the requestURL is absolute, this function returns the requestedURL untouched.\n *\n * @param {string} baseURL The base URL\n * @param {string} requestedURL Absolute or relative URL to combine\n * @returns {string} The combined full path\n */\n\n\nmodule.exports = function buildFullPath(baseURL, requestedURL) {\n  if (baseURL && !isAbsoluteURL(requestedURL)) {\n    return combineURLs(baseURL, requestedURL);\n  }\n\n  return requestedURL;\n};","'use strict';\n\nvar utils = require('../utils');\n\nmodule.exports = function normalizeHeaderName(headers, normalizedName) {\n  utils.forEach(headers, function processHeader(value, name) {\n    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {\n      headers[normalizedName] = value;\n      delete headers[name];\n    }\n  });\n};","'use strict';\n\nmodule.exports = function bind(fn, thisArg) {\n  return function wrap() {\n    var args = new Array(arguments.length);\n\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    return fn.apply(thisArg, args);\n  };\n};","'use strict';\n\nvar utils = require('./../utils');\n\nmodule.exports = utils.isStandardBrowserEnv() ? // Standard browser envs support document.cookie\nfunction standardBrowserEnv() {\n  return {\n    write: function write(name, value, expires, path, domain, secure) {\n      var cookie = [];\n      cookie.push(name + '=' + encodeURIComponent(value));\n\n      if (utils.isNumber(expires)) {\n        cookie.push('expires=' + new Date(expires).toGMTString());\n      }\n\n      if (utils.isString(path)) {\n        cookie.push('path=' + path);\n      }\n\n      if (utils.isString(domain)) {\n        cookie.push('domain=' + domain);\n      }\n\n      if (secure === true) {\n        cookie.push('secure');\n      }\n\n      document.cookie = cookie.join('; ');\n    },\n    read: function read(name) {\n      var match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n      return match ? decodeURIComponent(match[3]) : null;\n    },\n    remove: function remove(name) {\n      this.write(name, '', Date.now() - 86400000);\n    }\n  };\n}() : // Non standard browser env (web workers, react-native) lack needed support.\nfunction nonStandardBrowserEnv() {\n  return {\n    write: function write() {},\n    read: function read() {\n      return null;\n    },\n    remove: function remove() {}\n  };\n}();"],"sourceRoot":""}